<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0079)https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./40.Find Repeat, Space Edition _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./40.Find Repeat, Space Edition _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./40.Find Repeat, Space Edition _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":0,"agent":"","applicationID":"7328113","applicationTime":307,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/find-duplicate-optimize-for-space">
        <meta name="description" content="Figure out which number is repeated. But here&#39;s the catch: optimize for space.">

        

        <meta property="og:title" content="Find Repeat, Space Edition | Interview Cake">
        <meta property="og:description" content="Figure out which number is repeated. But here&#39;s the catch: optimize for space.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/find-duplicate-optimize-for-space">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Find Repeat, Space Edition | Interview Cake">
        <meta name="twitter:description" content="Figure out which number is repeated. But here&#39;s the catch: optimize for space.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Find Repeat, Space Edition | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./40.Find Repeat, Space Edition _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./40.Find Repeat, Space Edition _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./40.Find Repeat, Space Edition _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./40.Find Repeat, Space Edition _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./40.Find Repeat, Space Edition _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./40.Find Repeat, Space Edition _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./40.Find Repeat, Space Edition _ Interview Cake_files/j.php" type="text/javascript"></script>

</head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./40.Find Repeat, Space Edition _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./40.Find Repeat, Space Edition _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE" aria-describedby="tooltip946173">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip946173" style="top: 92px; left: 1185.5px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Find Repeat, Space Edition BEAST MODE</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;find-duplicate-optimize-for-space&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Find Repeat, Space Edition" data-meta_desc="Figure out which number is repeated. But here&#39;s the catch: optimize for space." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="9" data-num-hints="10" data-num-gotchas="4" ng-init="setNumHints(10); setNumGotchas(4); ">
</span>



<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
Find a duplicate, <em>Space Edition</em>™.
</strong>
</p>

<p class="ng-scope">
We have <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__a-standard-list"><span class="ng-scope">a list</span></span> of integers, where:
</p>

<ol class="ng-scope">
<li>
The integers are in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>
</li>
<li>
The <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> has a length of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>
</li>
</ol>

<p class="ng-scope">
It follows that our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> has <em>at least</em> one integer which appears <em>at least</em> twice. But it may have <em>several</em> duplicates, and each duplicate may appear <em>more than</em> twice.
</p>

<p class="ng-scope">
<strong>
Write a function which finds an integer that appears more than once in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>.
</strong>
(If there are multiple duplicates, you only need to find one of them.)
</p>

<p class="ng-scope">
We're going to run this function on our new, super-hip Macbook Pro With Retina Display™. Thing is, the damn thing came with the RAM soldered right to the motherboard, so we can't upgrade our RAM. <strong>So we need to optimize for space!</strong>
</p>

</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in less than <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time, while keeping <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this <em>without</em> destroying the input.
<!--
Were you planning to start with an in-place sort on the array? Good idea, but we can get away with <em>not</em> modifying the input (which is definitely preferable, as modifying the input array could cause side effects elsewhere in our code).
-->
</p>
</div>
</div>
</div>

    
</div>




<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
This one's a classic! We just do one walk through the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>, using a set to keep track of which items we've seen!
</p>

<div code-block="question__find-duplicate-optimize-for-space__find-repeat-hash" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_repeat</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    numbers_seen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
        <span class="token keyword">if</span> number <span class="token keyword">in</span> numbers_seen<span class="token punctuation">:</span>
            <span class="token keyword">return</span> number
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            numbers_seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>number<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># whoops--no duplicate</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'no duplicate!'</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Bam. <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and ... <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space ...
</p>

<p class="ng-scope">
Right, we're supposed to optimize for <em>space</em>. <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> is actually kinda high space-wise. Hm. We can probably get <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>...
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can "brute force" this by taking each number in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span> and, for each, walking through the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> to see if it appears twice.
</p>
<div code-block="question__find-duplicate-optimize-for-space__find-repeat-brute-force" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_repeat_brute_force</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> needle <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        has_been_seen <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
            <span class="token keyword">if</span> number <span class="token operator">==</span> needle<span class="token punctuation">:</span>
                <span class="token keyword">if</span> has_been_seen<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> number
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    has_been_seen <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token comment" spellcheck="true"># whoops--no duplicate</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'no duplicate!'</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
This is <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space and <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>
<p class="ng-scope">
That space complexity can't be beat, but the time cost seems a bit high. Can we do better?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
One way to beat <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time is to get <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time. Sorting takes <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time. And if we sorted the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>, any duplicates would be right next to each-other!
</p>
<p class="ng-scope">
But if we start off by sorting our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> we'll need to take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space to store the sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>...
</p>
<p class="ng-scope">
...unless we sort the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> <span concept="in-place" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><em class="ng-scope">in place</em></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
An <strong>in-place</strong> algorithm operates <em>directly</em> on its input and <em>changes</em> it, instead of creating and returning a <em>new</em> object. This is sometimes called <strong>destructive</strong>, since the original input is "destroyed" when it's edited to create the new output.
</p>

<p>
<strong>Careful: "In-place" does <em>not</em> mean "without creating any additional variables"!</strong> Rather, it means "without creating a new copy of the input." In general, an in-place function will only create additional variables that are <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>

<p>
Here are two functions that do the same operation, except one is in-place and the other is out-of-place:
</p>

<div code-block="concept__in-place__in-place-and-out-of-place" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">square_list_in_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># enumerate() lets us get the index and element</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        int_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*=</span> element

    <span class="token comment" spellcheck="true"># NOTE: we don't /need/ to return anything</span>
    <span class="token comment" spellcheck="true"># this is just a convenience</span>
    <span class="token keyword">return</span> int_list

<span class="token keyword">def</span> <span class="token function">square_list_out_of_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we allocate a new list with the length of the input list</span>
    squared_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        squared_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token keyword">return</span> squared_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Working in-place is a good way to save space.</strong> An in-place algorithm will generally have <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space cost.
</p>

<p>
<strong>
But be careful: an in-place algorithm can cause side effects.
</strong>
Your input is "destroyed" or "altered," which can affect code <em>outside</em> of your function. For example:
</p>

<div code-block="concept__in-place__side-effect" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
squared_list  <span class="token operator">=</span> square_list_in_place<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">"squared: %s"</span> <span class="token operator">%</span> squared_list
<span class="token comment" spellcheck="true"># prints: squared: [4, 9, 16, 25]</span>

<span class="token keyword">print</span> <span class="token string">"original list: %s"</span> <span class="token operator">%</span> original_list
<span class="token comment" spellcheck="true"># prints: original list: [4, 9, 16, 25], confusingly!</span>

<span class="token comment" spellcheck="true"># and if square_list_in_place() didn't return anything,</span>
<span class="token comment" spellcheck="true"># which it could reasonably do, squared_list would be None!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Generally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you're very space constrained or you're <em>positive</em> you don't need the original input anymore, even for debugging.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__in-place__in-place-and-out-of-place": {"java": {"tests": "int[] inPlaceArray = new int[]{1, 2, 3};\nt.squareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, new int[]{1, 4, 9});\n\nint[] outOfPlaceArray = new int[]{2, 3, 4};\nint[] squaredArrayResult = t.squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, new int[]{4, 9, 16});\nassertEqual(outOfPlaceArray, new int[]{2, 3, 4});", "code": "public int[] squareArrayInPlace(int[] intArray) {\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        intArray[i] *= intArray[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\npublic int[] squareArrayOutOfPlace(int[] intArray) {\n\n    // we allocate a new array with the length of the input array\n    int[] squaredArray = new int[intArray.length];\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        squaredArray[i] = (int) Math.pow(intArray[i], 2);\n    }\n\n    return squaredArray;\n}"}, "python": {"tests": "in_place_list = [1, 2, 3]\nsquare_list_in_place(in_place_list)\nassert in_place_list == [1, 4, 9]\n\nout_of_place_list = [2, 3, 4]\nsquared_array_result = square_list_out_of_place(out_of_place_list)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_list == [2, 3, 4]", "code": "def square_list_in_place(int_list):\n\n    # enumerate() lets us get the index and element\n    for index, element in enumerate(int_list):\n        int_list[index] *= element\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_list\n\ndef square_list_out_of_place(int_list):\n\n    # we allocate a new list with the length of the input list\n    squared_list = [None] * len(int_list)\n\n    for index, element in enumerate(int_list):\n        squared_list[index] = element ** 2\n\n    return squared_list"}, "c": {"tests": "{\n    char msg[256];\n    int inPlaceArray[3] = {1, 2, 3};\n    int inPlaceArrayExpectedResult[3] = {1, 4, 9};\n\n    squareArrayInPlace(inPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'inPlaceArray == inPlaceArrayExpectedResult'\");\n    ASSERT_EQUAL(inPlaceArray, inPlaceArrayExpectedResult, sizeof(inPlaceArray), msg);\n\n    int outOfPlaceArray[3] = {2, 3, 4};\n    int squaredArrayExpectedResult[3] = {4, 9, 16};\n    int *squaredArrayResult;\n    int tempArray[3];\n\n    memcpy(tempArray, outOfPlaceArray, sizeof(outOfPlaceArray));\n    squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'squaredArrayResult == squaredArrayExpectedResult'\");\n    ASSERT_EQUAL(squaredArrayResult, squaredArrayExpectedResult, sizeof(squaredArrayResult), msg);\n    free(squaredArrayResult);\n\n    snprintf(msg, sizeof(msg), \"%s\", \"'outOfPlaceArray == tempArray'\");\n    ASSERT_EQUAL(outOfPlaceArray, tempArray, sizeof(outOfPlaceArray), msg);\n}", "code": "int *squareArrayInPlace(int *intArray, size_t length) {\n    size_t i;\n\n    for (i = 0; i &lt; length; i++) {\n        intArray[i] *= intArray[i];\n    }\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nint *squareArrayOutOfPlace(int *intArray, size_t length) {\n    size_t i;\n    // we allocate a new array with the length of the input array\n    int *squaredArray = malloc(length * sizeof(int));\n\n    assert(squaredArray != NULL);\n    for (i = 0; i &lt; length; i++) {\n        squaredArray[i] = intArray[i] * intArray[i];\n    }\n\n    return squaredArray;\n}"}, "ruby": {"tests": "in_place_array = [1, 2, 3]\nsquare_array_in_place(in_place_array)\nassert in_place_array == [1, 4, 9]\n\nout_of_place_array = [2, 3, 4]\nsquared_array_result = square_array_out_of_place(out_of_place_array)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_array == [2, 3, 4]", "code": "def square_array_in_place(int_array)\n\n    int_array.each_with_index do |element, index|\n        int_array[index] *= element\n    end\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_array\nend\n\ndef square_array_out_of_place(int_array)\n\n    # we allocate a new array with the length of the input array\n    squared_array = [nil] * int_array.length\n\n    int_array.each_with_index do |element, index|\n        squared_array[index] = element ** 2\n    end\n\n    return squared_array\nend"}, "javascript": {"tests": "var inPlaceArray = [1, 2, 3];\nsquareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, [1, 4, 9]);\n\nvar outOfPlaceArray = [2, 3, 4];\nvar squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, [4, 9, 16]);\nassertEqual(outOfPlaceArray, [2, 3, 4]);", "code": "function squareArrayInPlace(intArray) {\n\n    intArray.forEach(function(int, index) {\n        intArray[index] *= int;\n    });\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nfunction squareArrayOutOfPlace(intArray) {\n\n    // we allocate a new array with the length of the input array\n    var squaredArray = [];\n\n    intArray.forEach(function(int, index) {\n        squaredArray[index] = Math.pow(int, 2);\n    });\n\n    return squaredArray;\n}"}, "cpp": {"tests": "vector<int> inPlaceVector {1, 2, 3};\nsquareVectorInPlace(inPlaceVector);\nconst vector<int> test1Result {1, 4, 9};\nassertEqual(inPlaceVector, test1Result);\n\nconst vector<int> outOfPlaceVector {2, 3, 4};\nvector<int> squaredVectorResult = squareVectorOutOfPlace(outOfPlaceVector);\nconst vector<int> test2aResult {4, 9, 16};\nconst vector<int> test2bResult {2, 3, 4};\nassertEqual(squaredVectorResult, test2aResult);\nassertEqual(outOfPlaceVector, test2bResult);", "code": "vector&lt;int>& squareVectorInPlace(vector&lt;int>& intVector)\n{\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        intVector[i] *= intVector[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intVector;\n}\n\nvector&lt;int> squareVectorOutOfPlace(const vector&lt;int>& intVector)\n{\n    // we create a new vector with the size of the input vector\n    vector&lt;int> squaredVector(intVector.size());\n\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        int item = intVector[i];\n        squaredVector[i] =  item * item;\n    }\n\n    return squaredVector;\n}"}}, "concept__in-place__side-effect": {"java": "int[] originalArray = new int[]{2, 3, 4, 5};\nint[] squaredArray  = squareArrayInPlace(originalArray);\n\nSystem.out.println(\"squared: \" + Arrays.toString(squaredArray));\n// prints: squared: [4, 9, 16, 25]\n\nSystem.out.println(\"original array: \" + Arrays.toString(originalArray));\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be null!", "python": "original_list = [2, 3, 4, 5]\nsquared_list  = square_list_in_place(original_list)\n\nprint \"squared: %s\" % squared_list\n# prints: squared: [4, 9, 16, 25]\n\nprint \"original list: %s\" % original_list\n# prints: original list: [4, 9, 16, 25], confusingly!\n\n# and if square_list_in_place() didn't return anything,\n# which it could reasonably do, squared_list would be None!", "c": "size_t i;\nconst size_t originalArrayLength = 4;\nint originalArray[4] = {2, 3, 4, 5};\nint *squaredArray = squareArrayInPlace(originalArray, originalArrayLength);\n\nprintf(\"squared array: [\");\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", squaredArray[i]);\n}\nprintf(\"]\\n\");\n// prints: squared array: [4, 9, 16, 25]\n\nprintf(\"original array: [\";\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", originalArray[i]);\n}\nprintf(\"]\\n\");\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredArray!", "ruby": "original_array = [2, 3, 4, 5]\nsquared_array  = square_array_in_place(original_array)\n\nputs \"squared: #{squared_array}\"\n# prints: squared: [4, 9, 16, 25]\n\nputs \"original array: #{original_array}\"\n# prints: original array: [4, 9, 16, 25], confusingly!\n\n# and if square_array_in_place() didn't return anything,\n# which it could reasonably do, squared_array would be nil!", "javascript": "var originalArray = [2, 3, 4, 5];\nvar squaredArray  = squareArrayInPlace(originalArray);\n\nconsole.log('squared: ' + squaredArray);\n// logs: squared: 4,9,16,25\n\nSystem.out.println(\"original array: \" + originalArray);\n// logs: original array: 4,9,16,25 - confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be undefined!", "cpp": "vector&lt;int> originalVector = {2, 3, 4, 5};\nvector&lt;int>& squaredVector  = squareVectorInPlace(originalArray);\n\ncout &lt;&lt; \"squared vector: [\";\nfor (size_t i = 0; i &lt; squaredVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; squaredVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: squared vector: [4, 9, 16, 25]\n\ncout &lt;&lt; \"original vector: [\";\nfor (size_t i = 0; i &lt; originalVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; originalVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: original vector: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredVector!"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>!
</p>
<p class="ng-scope">
Okay, so this'll work:
</p>
<ol class="ng-scope">
<li>
Do an in-place sort of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> (for example an in-place mergesort).
</li>
<li>
Walk through the now-sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> from left to right.
</li>
<li>
Return as soon as we find two adjacent numbers which are the same.
</li>
</ol>
<p class="ng-scope">
This'll keep us at <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space and bring us down to <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>
<p class="ng-scope">
But destroying the input is kind of a drag—it might cause problems elsewhere in our code. Can we maintain this time and space cost without destroying the input?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's take a step back. <strong>How can we break this problem down into subproblems?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we're going to do <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time, we'll probably be iteratively doubling something or iteratively cutting something in half. That's how we usually get a <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">lgn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">n</span></span></span></span></span>. So what if we could cut the problem in half somehow?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well <span concept="binary-search" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">binary search</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>
A binary search algorithm finds an item in a <em>sorted</em> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> in <span complexity="lgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time.
</strong>
</p>

<p>
A brute force search would walk through the whole set, taking <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case.
</p>

<p>
Let's say we have a sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> of numbers. To find a number with a binary search, we:
</p>

<ol>
<li>
<strong>Start with the middle number: is it bigger or smaller than our target number?</strong> Since the <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> is sorted, this tells us if the target would be in the <em>left</em> half or the <em>right</em> half of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span>.
</li>
<li>
<strong>We've effectively divided the problem in half</strong>. We can "rule out" the whole half of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> that we know doesn't contain the target number.
</li>
<li>
<strong>Repeat the same approach (of starting in the middle) on the new half-size problem</strong>. Then do it again and again, until we either find the number or "rule out" the whole set.
</li>
</ol>

<p>
We can do this recursively, or iteratively. Here's an iterative version:
</p>

<div code-block="concept__binary-search__iterative-binary-search" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># see if target appears in nums</span>

    <span class="token comment" spellcheck="true"># we think of floor_index and ceiling_index as "walls" around</span>
    <span class="token comment" spellcheck="true"># the possible positions of our target so by -1 below we mean</span>
    <span class="token comment" spellcheck="true"># to start our wall "to the left" of the 0th index</span>
    <span class="token comment" spellcheck="true"># (we /don't/ mean "the last index")</span>
    floor_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    ceiling_index <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># if there isn't at least 1 index between floor and ceiling,</span>
    <span class="token comment" spellcheck="true"># we've run out of guesses and the number must not be present</span>
    <span class="token keyword">while</span> floor_index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> ceiling_index<span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># find the index ~halfway between the floor and ceiling</span>
        <span class="token comment" spellcheck="true"># we use integer division, so we'll never get a "half index"</span>
        distance <span class="token operator">=</span> ceiling_index <span class="token operator">-</span> floor_index
        half_distance <span class="token operator">=</span> distance <span class="token operator">/</span> <span class="token number">2</span>
        guess_index <span class="token operator">=</span> floor_index <span class="token operator">+</span> half_distance

        guess_value <span class="token operator">=</span> nums<span class="token punctuation">[</span>guess_index<span class="token punctuation">]</span>

        <span class="token keyword">if</span> guess_value <span class="token operator">==</span> target<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>

        <span class="token keyword">if</span> guess_value <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># target is to the left</span>
            <span class="token comment" spellcheck="true"># so move ceiling to the left</span>
            ceiling_index <span class="token operator">=</span> guess_index

        <span class="token keyword">else</span><span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># target is to the right</span>
            <span class="token comment" spellcheck="true"># so move floor to the right</span>
            floor_index <span class="token operator">=</span> guess_index

    <span class="token keyword">return</span> <span class="token boolean">False</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>How did we know the time cost of binary search was <span complexity="lgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span>?</strong>
The only non-constant part of our time cost is the number of times our while loop runs.
Each step of our while loop cuts the range (dictated by <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__binary-search__floor-index"><span class="ng-scope">floor_index</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__binary-search__ceiling-index"><span class="ng-scope">ceiling_index</span></span>) in half, until our range has just one element left.
</p>

<p>
<strong>So the question is, "how many times must we divide our original <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> size (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>) in half until we get down to 1?</strong>
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac><mo>∗</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac><mo>∗</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac><mo>∗</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n * \frac{1}{2} * \frac{1}{2} * \frac{1}{2} * \frac{1}{2} * ... = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.19011em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">∗</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span>

<p>
How many <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.19011em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>'s are there? We don't know yet, but we can call that number <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span>:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>(</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac><msup><mo>)</mo><mi>x</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n * (\frac{1}{2})^x = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.19011em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mopen">(</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span>

<p>
Now we solve for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span>:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mfrac><mrow><msup><mn>1</mn><mi>x</mi></msup></mrow><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n * \frac{1^x}{2^x} = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.86338em;"></span><span class="strut bottom" style="height: 1.20838em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.289em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord">1</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mfrac><mrow><mn>1</mn></mrow><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n * \frac{1}{2^x} = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.19011em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.289em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
\frac{n}{2^x} = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.289em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">
n = 2^x
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>

<p>
Now to get the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> out of the exponent. How do we do that? Logarithms.
</p>

<p>
<strong>Recall that <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>log</mo><mrow><mn>1</mn><mn>0</mn></mrow></msub><mrow><mn>1</mn><mn>0</mn><mn>0</mn></mrow></mrow><annotation encoding="application/x-tex">\log_{10}{100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mop"><span class="mop">lo<span style="margin-right: 0.01389em;">g</span></span><span class="vlist"><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord textstyle uncramped"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></span> means, "what power must we raise 10 to, to get 100"? The answer is 2.</strong>
</p>

<p>
So in this case, if we take the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>log</mo><mrow><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\log_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mop"><span class="mop">lo<span style="margin-right: 0.01389em;">g</span></span><span class="vlist"><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> of both sides...
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>log</mo><mrow><mn>2</mn></mrow></msub><mrow><mi>n</mi></mrow><mo>=</mo><msub><mo>log</mo><mrow><mn>2</mn></mrow></msub><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow></mrow><annotation encoding="application/x-tex">
\log_{2}{n} = \log_{2}{2^x}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mop"><span class="mop">lo<span style="margin-right: 0.01389em;">g</span></span><span class="vlist"><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mrel">=</span><span class="mop"><span class="mop">lo<span style="margin-right: 0.01389em;">g</span></span><span class="vlist"><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord textstyle uncramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>

<p>
The right hand side asks, "what power must we raise <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> to, to get <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">2^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>?" Well, that's just <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span>!
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>log</mo><mrow><mn>2</mn></mrow></msub><mrow><mi>n</mi></mrow><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">
\log_{2}{n} = x
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mop"><span class="mop">lo<span style="margin-right: 0.01389em;">g</span></span><span class="vlist"><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mrel">=</span><span class="mord mathit">x</span></span></span></span></span>

<p>
So there it is. The number of times we must divide <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> in half to get down to 1 is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mrow><mn>2</mn></mrow></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="vlist"><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord mathit">n</span></span></span></span></span>. So our total time cost is <span complexity="lgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span>
</p>

<p>
<strong>
Careful: we can only use binary search if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__binary-search__standard-list"><span class="ng-scope">list</span></span> is <em>already sorted</em>.
</strong>
</p>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__binary-search__ceiling-index": {"camel": "ceilingIndex", "snake": "ceiling_index"}, "concept__binary-search__floor-index": {"camel": "floorIndex", "snake": "floor_index"}}, "words": {"concept__binary-search__standard-list": {"python": "list", "objectivec": "array", "c": "array", "java": "array", "cpp": "vector", "ruby": "array", "default": "list", "csharp": "list", "javascript": "array", "swift": "array", "php": "array"}}, "code-blocks": {"concept__binary-search__iterative-binary-search": {"python": {"code": "def binary_search(target, nums):\n    # see if target appears in nums\n\n    # we think of floor_index and ceiling_index as \"walls\" around\n    # the possible positions of our target so by -1 below we mean\n    # to start our wall \"to the left\" of the 0th index\n    # (we /don't/ mean \"the last index\")\n    floor_index = -1\n    ceiling_index = len(nums)\n\n    # if there isn't at least 1 index between floor and ceiling,\n    # we've run out of guesses and the number must not be present\n    while floor_index + 1 &lt; ceiling_index:\n\n        # find the index ~halfway between the floor and ceiling\n        # we use integer division, so we'll never get a \"half index\"\n        distance = ceiling_index - floor_index\n        half_distance = distance / 2\n        guess_index = floor_index + half_distance\n\n        guess_value = nums[guess_index]\n\n        if guess_value == target:\n            return True\n\n        if guess_value > target:\n\n            # target is to the left\n            # so move ceiling to the left\n            ceiling_index = guess_index\n\n        else:\n\n            # target is to the right\n            # so move floor to the right\n            floor_index = guess_index\n\n    return False", "tests": "testInputAndOutputLists(binary_search, tests, True)"}, "ruby": {"code": "def binary_search(target, nums)\n    # see if target appears in nums\n\n    # we think of floor_index and ceiling_index as \"walls\" around\n    # the possible positions of our target so by -1 below we mean\n    # to start our wall \"to the left\" of the 0th index\n    # (we /don't/ mean \"the last index\")\n    floor_index = -1\n    ceiling_index = nums.length\n\n    # if there isn't at least 1 index between floor and ceiling,\n    # we've run out of guesses and the number must not be present\n    while floor_index + 1 &lt; ceiling_index\n\n        # find the index ~halfway between the floor and ceiling\n        # we use integer division, so we'll never get a \"half index\"\n        distance = ceiling_index - floor_index\n        half_distance = distance / 2\n        guess_index = floor_index + half_distance\n\n        guess_value = nums[guess_index]\n\n        return true if guess_value == target\n\n        if guess_value > target\n\n            # target is to the left\n            # so move ceiling to the left\n            ceiling_index = guess_index\n\n        else\n\n            # target is to the right\n            # so move floor to the right\n            floor_index = guess_index\n        end\n    end\n\n    return false\nend", "tests": "testInputAndOutputLists(method(:binary_search), tests, true)"}, "c": {"code": "int binarySearch(int target, const int *nums, size_t numsLength) {\n    // see if target appears in nums\n\n    // we think of floorIndex as leftmost edge of the possible positions of our target\n    // and ceilingIndex as \"wall\" on the right of it\n    size_t floorIndex = 0;\n    size_t ceilingIndex = numsLength;\n\n    // if there isn't at least 1 index between floor and ceiling,\n    // we've run out of guesses and the number must not be present\n    while (floorIndex &lt; ceilingIndex) {\n        // find the index ~halfway between the floor and ceiling\n        // we use integer division, so we'll never get a \"half index\"\n        size_t distance = ceilingIndex - floorIndex;\n        size_t halfDistance = distance / 2;\n        size_t guessIndex = floorIndex + halfDistance;\n        int guessValue = nums[guessIndex];\n\n        if (guessValue == target) {\n            return 1;\n        }\n\n        if (guessValue > target) {\n            // target is to the left\n            // so move ceiling to the left\n            ceilingIndex = guessIndex;\n        }\n        else {\n            // target is to the right\n            // so move floor to the right\n            floorIndex = guessIndex + 1;\n        }\n    }\n\n    return 0;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 5; i++) {\n        int retval = binarySearch(target, inputNums[i], inputNumsLength[i]);\n        ASSERT(retval == expectedOutputs[i]);\n    }\n}"}, "javascript": {"code": "function binarySearch(target, nums) {\n    // see if target appears in nums\n\n    // we think of floorIndex and ceilingIndex as \"walls\" around\n    // the possible positions of our target so by -1 below we mean\n    // to start our wall \"to the left\" of the 0th index\n    // (we /don't/ mean \"the last index\")\n    var floorIndex = -1;\n    var ceilingIndex = nums.length;\n\n    // if there isn't at least 1 index between floor and ceiling,\n    // we've run out of guesses and the number must not be present\n    while (floorIndex + 1 &lt; ceilingIndex) {\n\n        // find the index ~halfway between the floor and ceiling\n        // we use integer division, so we'll never get a \"half index\"\n        var distance = ceilingIndex - floorIndex;\n        var halfDistance = Math.floor(distance / 2);\n        var guessIndex = floorIndex + halfDistance;\n\n        var guessValue = nums[guessIndex];\n\n        if (guessValue === target) return true;\n\n        if (guessValue > target) {\n\n            // target is to the left\n            // so move ceiling to the left\n            ceilingIndex = guessIndex;\n\n        } else {\n\n            // target is to the right\n            // so move floor to the right\n            floorIndex = guessIndex;\n        }\n    }\n\n    return false;\n}", "tests": "testInputAndOutputLists(binarySearch, tests, true);"}, "java": {"code": "public boolean binarySearch(int target, int[] nums) {\n    // see if target appears in nums\n\n    // we think of floorIndex and ceilingIndex as \"walls\" around\n    // the possible positions of our target so by -1 below we mean\n    // to start our wall \"to the left\" of the 0th index\n    // (we /don't/ mean \"the last index\")\n    int floorIndex = -1;\n    int ceilingIndex = nums.length;\n\n    // if there isn't at least 1 index between floor and ceiling,\n    // we've run out of guesses and the number must not be present\n    while (floorIndex + 1 &lt; ceilingIndex) {\n\n        // find the index ~halfway between the floor and ceiling\n        // we use integer division, so we'll never get a \"half index\"\n        int distance = ceilingIndex - floorIndex;\n        int halfDistance = distance / 2;\n        int guessIndex = floorIndex + halfDistance;\n\n        int guessValue = nums[guessIndex];\n\n        if (guessValue == target) return true;\n\n        if (guessValue > target) {\n\n            // target is to the left\n            // so move ceiling to the left\n            ceilingIndex = guessIndex;\n\n        } else {\n\n            // target is to the right\n            // so move floor to the right\n            floorIndex = guessIndex;\n        }\n    }\n\n    return false;\n}", "tests": "for (int n = 0; n < inputNums.length; n++) {\n    assertEqual(t.binarySearch(target, inputNums[n]), expectedOutputs[n]);\n}"}, "cpp": {"code": "bool binarySearch(int target, const vector&lt;int>& nums)\n{\n    // see if target appears in nums\n\n    // we think of floorIndex as leftmost edge of the possible positions of our target\n    // and ceilingIndex as \"wall\" on the right of it\n    size_t floorIndex = 0;\n    size_t ceilingIndex = nums.size();\n\n    // if there isn't at least 1 index between floor and ceiling,\n    // we've run out of guesses and the number must not be present\n    while (floorIndex &lt; ceilingIndex) {\n\n        // find the index ~halfway between the floor and ceiling\n        // we use integer division, so we'll never get a \"half index\"\n        size_t distance = ceilingIndex - floorIndex;\n        size_t halfDistance = distance / 2;\n        size_t guessIndex = floorIndex + halfDistance;\n\n        int guessValue = nums[guessIndex];\n\n        if (guessValue == target) {\n            return true;\n        }\n\n        if (guessValue > target) {\n\n            // target is to the left\n            // so move ceiling to the left\n            ceilingIndex = guessIndex;\n\n        } else {\n\n            // target is to the right\n            // so move floor to the right\n            floorIndex = guessIndex + 1;\n        }\n    }\n\n    return false;\n}", "tests": "for (size_t i = 0; i <  inputNums.size(); ++i) {\n    assertEqual(binarySearch(target, inputNums[i]), \n        static_cast<bool>(expectedOutputs[i])); // have to cast due to vector<bool>\n}"}}, "setup": {"python": "tests = [\n    [[5, [1,2,3,4,5,6,7,7]], True],\n    [[5, [1,2,3,4,5]], True],\n    [[5, []], False],\n    [[5, [1,2,3,4]], False],\n    [[5, [1,2,3,4,6,7,7]], False],\n]", "ruby": "tests = [\n    [[5, [1,2,3,4,5,6,7,7]], true],\n    [[5, [1,2,3,4,5]], true],\n    [[5, []], false],\n    [[5, [1,2,3,4]], false],\n    [[5, [1,2,3,4,6,7,7]], false],\n]", "c": "const int target = 5;\n\nconst int inputNums[5][8] = {\n    {1,2,3,4,5,6,7,7},\n    {1,2,3,4,5},\n    {},\n    {1,2,3,4},\n    {1,2,3,4,6,7,7},\n};\n\nconst size_t inputNumsLength[5] = {8, 5, 0, 4, 7};\n\nconst int expectedOutputs[5] = {1, 1, 0, 0, 0};", "javascript": "var tests = [\n    [[5, [1,2,3,4,5,6,7,7]], true],\n    [[5, [1,2,3,4,5]], true],\n    [[5, []], false],\n    [[5, [1,2,3,4]], false],\n    [[5, [1,2,3,4,6,7,7]], false],\n];", "java": "int target = 5;\n\nint[][] inputNums = new int[][]{\n    {1,2,3,4,5,6,7,7},\n    {1,2,3,4,5},\n    {},\n    {1,2,3,4},\n    {1,2,3,4,6,7,7},\n};\n\nboolean[] expectedOutputs = new boolean[]{\n    true,\n    true,\n    false,\n    false,\n    false,\n};", "cpp": "const int target = 5;\n\nconst vector<vector<int>> inputNums {\n    vector<int> {1, 2, 3, 4, 5, 6, 7, 7},\n    vector<int> {1, 2, 3, 4, 5},\n    vector<int> {},\n    vector<int> {1, 2, 3, 4},\n    vector<int> {1, 2, 3, 4, 6, 7, 7},\n};\n\nconst vector<bool> expectedOutputs {\n    true,\n    true,\n    false,\n    false,\n    false,\n};"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> works by cutting the problem in half after figuring out which half of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> holds the answer.
</p>

<p class="ng-scope">
But in a binary search the <em>reason</em> we can confidently say which half has the answer is because the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> is <em>sorted</em>. For this problem, when we cut our unsorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> in half we can't really make any strong statements about which elements are in the left half and which are in the right half.
</p>

<p class="ng-scope">
What if we could cut the problem in half a <em>different</em> way, other than cutting the <em><span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span></em> in half?
</p>
</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
With this problem, we're looking for a needle (a repeated number) in a haystack (<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>). What if instead of cutting the haystack in half, we cut <em>the set of possibilities for the needle</em> in half?
</p>

<p class="ng-scope">
The full range of possibilites for our needle is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>. How could we test whether the actual needle is in the first half of that range (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">1..\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>) or the second half (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{n}{2}+1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>)?
</p>

<p class="ng-scope">
A quick note about how we're defining our ranges: when we take <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> we're doing <em>integer division</em>, so we throw away the remainder. To see what's going on, we should look at what happens when <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is even and when <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is odd:
</p>

<ul class="ng-scope">
<li>
If <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span></span></span></span></span> (an even number), we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2}=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">3</span></span></span></span></span> and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2}+1=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mrel">=</span><span class="mord">4</span></span></span></span></span>, so our ranges are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">1..3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">3</span></span></span></span></span> and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">4..6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">4</span><span class="mord">.</span><span class="mord">.</span><span class="mord">6</span></span></span></span></span>.
</li>
<li>
If <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">5</span></span></span></span></span> (an odd number), <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2}=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">2</span></span></span></span></span> (we throw out the remainder) and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2}+1=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mrel">=</span><span class="mord">3</span></span></span></span></span>, so our ranges are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1..2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">2</span></span></span></span></span> and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">3..5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">5</span></span></span></span></span>.
</li>
</ul>

<p class="ng-scope">
So we can notice a few properties about our ranges:
</p>

<ol class="ng-scope">
<li>
They aren't necessarily the same size.
</li>
<li>
They don't overlap.
</li>
<li>
Taken <em>together</em>, they represent the original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>'s range of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>. In math terminology, we could say their <em>union</em> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>.
</li>
</ol>

<p class="ng-scope">
So, how do we know if the needle is in <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">1..\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> or <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{n}{2}+1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>?
</p>

</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
Think about the original problem statement. We know that we have at least one repeat because there are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span> items and they are all in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, which contains only <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> distinct integers.
</p>

<p class="ng-scope">
This notion of "we have more items than we have possibilities, so we must have at least one repeat" is pretty powerful. It's sometimes called the <span concept="pigeonhole-principle" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">pigeonhole principle</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>pigeonhole principle</strong> states that if n items are put into m containers, with n &gt; m, then at least one container must contain more than one item.
</p>

<p>
For example, there must be at least two left gloves or two right gloves in a group of three gloves.
</p>
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>. Can we exploit the pigeonhole principle to see which half of our range contains a repeat?
</p>


</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Imagine that we separated the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> into two sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s—one containing the items in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">1..\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and the other containing the items in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{n}{2}+1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>.
</p>

<p class="ng-scope">
Each sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> has <em>a number of elements</em> as well as <em>a number of possible distinct integers</em> (that is, the length of the range of possible integers it holds).
</p>

<p class="ng-scope">
Given what we know about the number of elements vs the number of possible distinct integers in the <em>original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span></em>, what can we say about the number of elements vs the number of distinct possible integers in <em>these sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s</em>?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
The sum of the sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s' numbers of elements is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span> (the number of elements in the original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>) and the sum of the sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s' numbers of possible distinct integers is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> (the number of possible distinct integers in the original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>).
</p>

<p class="ng-scope">
Since the sums of the sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s' numbers of elements must be 1 greater than the sum of the sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s' numbers of possible distinct integers, one of the sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s must have at least one more element than it has possible distinct integers.
</p>

<p class="ng-scope">
Not convinced? We can prove this by contradiction. Suppose neither <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> had more elements than it had possible distinct integers. In other words, both <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s have <em>at most</em> the same number of items as they have distinct possibilites. The sum of their numbers of items would then be <em>at most</em> the total number of possibilities across each of them, which is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>. This is a contradiction—we know that our total number of items from the original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>, which is greater than <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.
</p>

<p class="ng-scope">
Now that we know <em>one</em> of our sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s has 1 or more items more than it has distinct possibilities, we know <em>that sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span></em> must have at least one duplicate, by the same pigeonhole argument that we use to know that the <em>original input aray</em> has at least one duplicate.
</p>

<p class="ng-scope">
So once we know <em>which</em> sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> has the count higher than its number of distinct possibilites, we can use this same approach recursively, cutting <em>that</em> sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> into two halves, etc, until we have just 1 item left in our range.
</p>

<p class="ng-scope">
Of course, we don't need to actually separate our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> into sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>s. All we care about is <em>how long</em> each sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> would be. So we can simply do one walk through the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>, counting the number of items that <em>would be</em> in each sub<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span>.
</p>

<p class="ng-scope">
Can you formalize this in code?
</p>

<p class="ng-scope">
<strong>Careful—if we do this recursively, we'll incur a space cost in the call stack!</strong> Do it iteratively instead.
</p>

</div>
</div>

</div>

    
</div>




<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Our approach is similar to a binary search, except we divide the <em>range of possible answers</em> in half at each step, rather than dividing the <em><span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span></em> in half.
</p>

<ol class="ng-scope">
<li>
Find the number of integers in our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space__standard-list"><span class="ng-scope">list</span></span> which lie within the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">1..\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.
</li>
<li>
Compare that to the number of possible unique integers in the same range.
</li>
<li>
If the number of <em>actual</em> integers <em>is greater</em> than the number of <em>possible</em> integers, we know there’s a duplicate in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">1..\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, so we iteratively use the same approach on that range.
</li>
<li>
If the number of actual integers <em>is not greater</em> than the number of possible integers, we know there must be duplicate in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{n}{2} + 1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mbin">+</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, so we iteratively use the same approach on that range.
</li>
<li>
At some point our range will contain just 1 integer, which will be our answer.
</li>
</ol>

<div code-block="question__find-duplicate-optimize-for-space__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_repeat</span><span class="token punctuation">(</span>the_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    floor <span class="token operator">=</span> <span class="token number">1</span>
    ceiling <span class="token operator">=</span> len<span class="token punctuation">(</span>the_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> floor <span class="token operator">&lt;</span> ceiling<span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># divide our range 1..n into an upper range and lower range</span>
        <span class="token comment" spellcheck="true"># (such that they don't overlap)</span>
        <span class="token comment" spellcheck="true"># lower range is floor..midpoint</span>
        <span class="token comment" spellcheck="true"># upper range is midpoint+1..ceiling</span>
        midpoint <span class="token operator">=</span> floor <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ceiling <span class="token operator">-</span> floor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        lower_range_floor<span class="token punctuation">,</span> lower_range_ceiling <span class="token operator">=</span> floor<span class="token punctuation">,</span> midpoint
        upper_range_floor<span class="token punctuation">,</span> upper_range_ceiling <span class="token operator">=</span> midpoint<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ceiling

        <span class="token comment" spellcheck="true"># count number of items in lower range</span>
        items_in_lower_range <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> the_list<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># is it in the lower range?</span>
            <span class="token keyword">if</span> item <span class="token operator">&gt;=</span> lower_range_floor <span class="token operator">and</span> item <span class="token operator">&lt;=</span> lower_range_ceiling<span class="token punctuation">:</span>
                items_in_lower_range <span class="token operator">+=</span> <span class="token number">1</span>

        distinct_possible_integers_in_lower_range <span class="token operator">=</span> \
            lower_range_ceiling <span class="token operator">-</span> lower_range_floor <span class="token operator">+</span> <span class="token number">1</span>

        <span class="token keyword">if</span> items_in_lower_range <span class="token operator">&gt;</span> distinct_possible_integers_in_lower_range<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># there must be a duplicate in the lower range</span>
            <span class="token comment" spellcheck="true"># so use the same approach iteratively on that range</span>
            floor<span class="token punctuation">,</span> ceiling <span class="token operator">=</span> lower_range_floor<span class="token punctuation">,</span> lower_range_ceiling
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># there must be a duplicate in the upper range</span>
            <span class="token comment" spellcheck="true"># so use the same approach iteratively on that range</span>
            floor<span class="token punctuation">,</span> ceiling <span class="token operator">=</span> upper_range_floor<span class="token punctuation">,</span> upper_range_ceiling


    <span class="token comment" spellcheck="true"># floor and ceiling have converged</span>
    <span class="token comment" spellcheck="true"># we found a number that repeats!</span>
    <span class="token keyword">return</span> floor</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space and <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>

<p class="ng-scope">
Tricky as this solution is, we can actually do even better, getting our runtime down to <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> while keeping our space cost at <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>. The solution is NUTS; it's probably outside the scope of what most interviewers would expect. But for the curious...<a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode">here it is</a>!
</p>

<!--
<p>
<strong>We can actually do even better, getting our runtime down to O(n) and keeping our space cost at O(1).</strong> The solution is difficult to derive, but it&#8217;s a cool challenge and an opportunity to stretch your problem solving skills and endurance. Next up: <a href="find-duplicate-optimize-for-space-beast-mode">BEAST MODE</a>
</p>
-->


</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
This function always returns <em>one</em> duplicate, but there may be several duplicates. Write a function that returns <em>all</em> duplicates.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Our answer was a modified binary search. We got there by <em>reasoning about the expected runtime</em>:
</p>

<ol class="ng-scope">
<li>
We started with an <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> "brute force" solution and wondered if we could do better.
</li>
<li>
We knew to beat <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> we'd probably do <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> or <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span>, so we started thinking of ways we might get an <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> runtime.
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>lg</mo><mrow><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mrow><annotation encoding="application/x-tex">\lg{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span> usually comes from iteratively cutting stuff in half, so we arrived at the final algorithm by exploring that idea.
</li>
</ol>

<p class="ng-scope">
Starting with a target runtime and working <em>backwards</em> from there can be a powerful strategy for all kinds of coding interview questions.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"setup": {"java": "int[][] inputArrays = new int[][]{\n    {1,2,2,3},\n    {1,2,3,3},\n    {1,1,2,3},\n    {1,2,3,4,4},\n    {1,1,1,2},\n    {1,1},\n};\n\nint[] expectedOutputs = new int[]{\n    2,\n    3,\n    1,\n    4,\n    1,\n    1,\n};", "cpp": "const vector<vector<unsigned int>> inputArrays {\n    vector<unsigned int> {1,2,2,3},\n    vector<unsigned int> {1,2,3,3},\n    vector<unsigned int> {1,1,2,3},\n    vector<unsigned int> {1,2,3,4,4},\n    vector<unsigned int> {1,1,1,2},\n    vector<unsigned int> {1,1},\n};\n\nconst vector<unsigned int> expectedOutputs {\n    2,\n    3,\n    1,\n    4,\n    1,\n    1,\n};", "c": "unsigned int inputs[6][5] = {\n    {1, 2, 2, 3},\n    {1, 2, 3, 3},\n    {1, 1, 2, 3},\n    {1, 2, 3, 4, 4},\n    {1, 1, 1, 2},\n    {1, 1},\n};\n\nsize_t lengths[6] = {\n    4,\n    4,\n    4,\n    5,\n    4,\n    2,\n};\n\nunsigned int expected[6] = {\n    2,\n    3,\n    1,\n    4,\n    1,\n    1,\n};\n\nvoid testFindRepeat((*findRepeatImplementation)(const unsigned int*, size_t)) {\n    for (size_t i = 0; i < sizeof(inputs) / sizeof(inputs[0]); ++i) {\n        ASSERT(findRepeatImplementation(inputs[i], lengths[i]) == expected[i]);\n    }\n}\n\nvoid testFindRepeatWithNoDup((*findRepeatImplementation)(const unsigned int*, size_t)) {\n    testFindRepeat(findRepeatImplementation);\n\n    unsigned int numbers[3] = {1, 2, 3};\n    ASSERT_RAISES(findRepeatImplementation(numbers, sizeof(numbers) / sizeof(int)));\n}", "javascript": "var tests = [\n    [[1,2,2,3], 2],\n    [[1,2,3,3], 3],\n    [[1,1,2,3], 1],\n    [[1,2,3,4,4], 4],\n    [[1,1,1,2], 1],\n    [[1,1], 1],\n]\n\nfunction test(functionToTest, tests, assertError) {\n    if (assertError !== false) assertError = true;\n\n    for (var i = 0; i < tests.length; i++) {\n        var test = tests[i];\n        assertEqual(functionToTest(test[0]), test[1]);\n    }\n\n    function noDuplicate() {\n        functionToTest([1, 2, 5]);\n    }\n\n    if (assertError) {\n        assertRaisesError(noDuplicate, 'no duplicate');\n    }\n}", "ruby": "tests = [\n    [[1,2,2,3], 2],\n    [[1,2,3,3], 3],\n    [[1,1,2,3], 1],\n    [[1,2,3,4,4], 4],\n    [[1,1,1,2], 1],\n    [[1,1], 1],\n]\n\ndef test(function, tests, assert_error=true)\n    tests.each do |test|\n        assertEqual(function.call(test[0]), test[1])\n    end\n\n    $function = function\n    def no_duplicate\n        $function.call([1, 2, 5])\n    end\n\n    if assert_error\n        assertRaisesError(method(:no_duplicate), 'no duplicate')\n    end\nend", "python": "tests = [\n    ([1,2,2,3], 2),\n    ([1,2,3,3], 3),\n    ([1,1,2,3], 1),\n    ([1,2,3,4,4], 4),\n    ([1,1,1,2], 1),\n    ([1,1], 1),\n]\n\ndef test(function, tests, assert_error=True):\n    for test in tests:\n        assertEqual(function(test[0]), test[1])\n\n    def no_duplicate():\n        function([1, 2, 5])\n\n    if assert_error:\n        assertRaisesError(no_duplicate, 'no duplicate')"}, "question__find-duplicate-optimize-for-space__find-repeat-hash": {"java": {"setup": "public class NoDuplicate implements VoidFunctionToTest {\n    public void call() {\n        t.findRepeat(new int[]{1, 2, 3});\n    }\n}", "code": "public int findRepeat(int[] numbers) {\n    Set&lt;Integer> numbersSeen = new HashSet&lt;Integer>();\n    for (int number : numbers) {\n        if (numbersSeen.contains(number)) {\n            return number;\n        } else {\n            numbersSeen.add(number);\n        }\n    }\n\n    // whoops--no duplicate\n    throw new IllegalArgumentException(\"no duplicate!\");\n}", "tests": "for (int n = 0; n < inputArrays.length; n++) {\n    assertEqual(t.findRepeat(inputArrays[n]), expectedOutputs[n]);\n}\n\nassertRaisesError(t.new NoDuplicate(), \"no duplicate\");"}, "cpp": {"code": "unsigned int findRepeat(const vector&lt;unsigned int>& numbers)\n{\n    unordered_set&lt;unsigned int> numbersSeen;\n    for (unsigned int number : numbers) {\n        auto it = numbersSeen.find(number);\n        if (it != numbersSeen.end()) {\n            return number;\n        }\n        else {\n            numbersSeen.insert(number);\n        }\n    }\n\n    // whoops--no duplicate\n    throw invalid_argument(\"no duplicate!\");\n}", "tests": "for (size_t i = 0; i < inputArrays.size(); ++i) {\n    assertEqual(findRepeat(inputArrays[i]), expectedOutputs[i]);\n}\n{\n    const vector<unsigned int>& numbers {1, 2, 3};\n    assertRaisesError<invalid_argument>(\"no duplicate\", &findRepeat, numbers);\n}"}, "c": {"code": "// Assume we've already implemented a set\nSet * setNew();\nvoid setFree();\nint setIn_uint(const Set*, unsigned int);\nvoid setInsert_uint(Set*, unsigned int);\n\nunsigned int findRepeat(const unsigned int *numbers, size_t length) {\n    size_t i;\n    Set *numbersSeen = setNew();\n    for (i = 0; i &lt; length; ++i) {\n        if (setIn_uint(numbersSeen, numbers[i])) {\n            unsigned int duplicate = numbers[i];\n            setFree(numbersSeen);\n            return duplicate;\n        }\n        else {\n            setInsert_uint(numbersSeen, numbers[i]);\n        }\n    }\n    setFree(numbersSeen);\n\n    // whoops--no duplicate\n    assert(0);\n\n    return 0; // unreachable\n}", "tests": "testFindRepeatWithNoDup(&findRepeat);"}, "javascript": {"code": "function findRepeat(numbers) {\n    var numbersSeen = new Set();\n    for (var i = 0; i &lt; numbers.length; i++) {\n        var number = numbers[i];\n        if (numbersSeen.has(number)) {\n            return number;\n        } else {\n            numbersSeen.add(number);\n        }\n    }\n\n    // whoops--no duplicate\n    throw new Error('no duplicate!');\n}", "tests": "test(findRepeat, tests);"}, "ruby": {"code": "require 'set'\n\ndef find_repeat(numbers)\n    numbers_seen = Set.new\n    numbers.each do |number|\n        if numbers_seen.include? number\n            return number\n        else\n            numbers_seen.add(number)\n        end\n    end\n\n    # whoops--no duplicate\n    raise Exception, 'no duplicate!'\nend", "tests": "test(method(:find_repeat), tests)"}, "python": {"code": "def find_repeat(numbers):\n    numbers_seen = set()\n    for number in numbers:\n        if number in numbers_seen:\n            return number\n        else:\n            numbers_seen.add(number)\n\n    # whoops--no duplicate\n    raise Exception('no duplicate!')", "tests": "test(find_repeat, tests)"}}, "question__find-duplicate-optimize-for-space__find-repeat-brute-force": {"java": {"setup": "public class NoDuplicate implements VoidFunctionToTest {\n    public void call() {\n        t.findRepeatBruteForce(new int[]{1, 2, 3});\n    }\n}", "code": "public int findRepeatBruteForce(int[] numbers) {\n    for (int needle = 1; needle &lt; numbers.length; needle++) {\n        boolean hasBeenSeen = false;\n        for (int number : numbers) {\n            if (number == needle) {\n                if (hasBeenSeen) {\n                    return number;\n                } else {\n                    hasBeenSeen = true;\n                }\n            }\n        }\n    }\n\n    // whoops--no duplicate\n    throw new IllegalArgumentException(\"no duplicate!\");\n}", "tests": "for (int n = 0; n < inputArrays.length; n++) {\n    assertEqual(t.findRepeatBruteForce(inputArrays[n]), expectedOutputs[n]);\n}\n\nassertRaisesError(t.new NoDuplicate(), \"no duplicate\");"}, "cpp": {"code": "unsigned int findRepeatBruteForce(const vector &lt;unsigned int>& numbers) \n{\n    for (unsigned int needle = 1; needle &lt; numbers.size(); ++needle) {\n        bool hasBeenSeen = false;\n        for (unsigned int number : numbers) {\n            if (number == needle) {\n                if (hasBeenSeen) {\n                    return number;\n                }\n                else {\n                    hasBeenSeen = true;\n                }\n            }\n        }\n    }\n\n    // whoops--no duplicate\n    throw invalid_argument(\"no duplicate!\");\n}", "tests": "for (size_t i = 0; i < inputArrays.size(); ++i) {\n    assertEqual(findRepeatBruteForce(inputArrays[i]), expectedOutputs[i]);\n}\n{\n    const vector<unsigned int>& numbers {1, 2, 3};\n    assertRaisesError<invalid_argument>(\"no duplicate\", &findRepeatBruteForce, numbers);\n}"}, "c": {"code": "unsigned int findRepeatBruteForce(const unsigned int *numbers, size_t length) {\n    unsigned int needle;\n    for (needle = 1; needle &lt; length; ++needle) {\n        size_t i;\n        int hasBeenSeen = 0;\n        for (i = 0; i &lt; length; ++i) {\n            if (numbers[i] == needle) {\n                if (hasBeenSeen) {\n                    return numbers[i];\n                }\n                else {\n                    hasBeenSeen = 1;\n                }\n            }\n        }\n    }\n\n    // whoops--no duplicate\n    assert(0);\n\n    return 0;  // unreachable\n}", "tests": "testFindRepeatWithNoDup(&findRepeatBruteForce);"}, "javascript": {"code": "function findRepeatBruteForce(numbers) {\n    for (var needle = 1; needle &lt; numbers.length; needle++) {\n        var hasBeenSeen = false;\n        for (var i = 0; i &lt; numbers.length; i++) {\n            var number = numbers[i];\n            if (number === needle) {\n                if (hasBeenSeen) {\n                    return number;\n                } else {\n                    hasBeenSeen = true;\n                }\n            }\n        }\n    }\n\n    // whoops--no duplicate\n    throw new Error('no duplicate!');\n}", "tests": "test(findRepeatBruteForce, tests);"}, "ruby": {"code": "def find_repeat_brute_force(numbers)\n    (1...numbers.length).each do |needle|\n        has_been_seen = false\n        numbers.each do |number|\n            if number == needle\n                if has_been_seen\n                    return number\n                else\n                    has_been_seen = true\n                end\n            end\n        end\n    end\n\n    # whoops--no duplicate\n    raise Exception, 'no duplicate!'\nend", "tests": "test(method(:find_repeat_brute_force), tests)"}, "python": {"code": "def find_repeat_brute_force(numbers):\n    for needle in range(1, len(numbers)):\n        has_been_seen = False\n        for number in numbers:\n            if number == needle:\n                if has_been_seen:\n                    return number\n                else:\n                    has_been_seen = True\n\n    # whoops--no duplicate\n    raise Exception('no duplicate!')", "tests": "test(find_repeat_brute_force, tests)"}}, "question__find-duplicate-optimize-for-space__solution": {"java": {"code": "public int findRepeat(int[] theArray) {\n\n    int floor = 1;\n    int ceiling = theArray.length - 1;\n\n    while (floor &lt; ceiling) {\n\n        // divide our range 1..n into an upper range and lower range\n        // (such that they don't overlap)\n        // lower range is floor..midpoint\n        // upper range is midpoint+1..ceiling\n        int midpoint = floor + ((ceiling - floor) / 2);\n        int lowerRangeFloor   = floor;\n        int lowerRangeCeiling = midpoint;\n        int upperRangeFloor   = midpoint + 1;\n        int upperRangeCeiling = ceiling;\n\n        // count number of items in lower range\n        int itemsInLowerRange = 0;\n        for (int item : theArray) {\n\n            // is it in the lower range?\n            if (item >= lowerRangeFloor && item &lt;= lowerRangeCeiling) {\n                itemsInLowerRange += 1;\n            }\n        }\n\n        int distinctPossibleIntegersInLowerRange = lowerRangeCeiling - lowerRangeFloor + 1;\n\n        if (itemsInLowerRange > distinctPossibleIntegersInLowerRange) {\n\n            // there must be a duplicate in the lower range\n            // so use the same approach iteratively on that range\n            floor   = lowerRangeFloor;\n            ceiling = lowerRangeCeiling;\n        } else {\n\n            // there must be a duplicate in the upper range\n            // so use the same approach iteratively on that range\n            floor   = upperRangeFloor;\n            ceiling = upperRangeCeiling;\n        }\n    }\n\n    // floor and ceiling have converged\n    // we found a number that repeats!\n    return floor;\n}", "tests": "for (int n = 0; n < inputArrays.length; n++) {\n    assertEqual(t.findRepeat(inputArrays[n]), expectedOutputs[n]);\n}"}, "cpp": {"code": "unsigned int findRepeat(const vector&lt;unsigned int>& theVector) \n{\n    unsigned int floor = 1;\n    unsigned int ceiling = theVector.size() - 1;\n\n    while (floor &lt; ceiling) {\n\n        // divide our range 1..n into an upper range and lower range\n        // (such that they don't overlap)\n        // lower range is floor..midpoint\n        // upper range is midpoint+1..ceiling\n        unsigned int midpoint = floor + ((ceiling - floor) / 2);\n        unsigned int lowerRangeFloor   = floor;\n        unsigned int lowerRangeCeiling = midpoint;\n        unsigned int upperRangeFloor   = midpoint + 1;\n        unsigned int upperRangeCeiling = ceiling;\n\n        // count number of items in lower range\n        unsigned int itemsInLowerRange = 0;\n        for (unsigned int item : theVector) {\n            // is it in the lower range?\n            if (item >= lowerRangeFloor && item &lt;= lowerRangeCeiling) {\n                ++itemsInLowerRange;\n            }\n        }\n\n        unsigned int distinctPossibleIntegersInLowerRange = lowerRangeCeiling - lowerRangeFloor + 1;\n\n        if (itemsInLowerRange > distinctPossibleIntegersInLowerRange) {\n            // there must be a duplicate in the lower range\n            // so use the same approach iteratively on that range\n            floor   = lowerRangeFloor;\n            ceiling = lowerRangeCeiling;\n        }\n        else {\n            // there must be a duplicate in the upper range\n            // so use the same approach iteratively on that range\n            floor   = upperRangeFloor;\n            ceiling = upperRangeCeiling;\n        }\n    }\n\n    // floor and ceiling have converged\n    // we found a number that repeats!\n    return floor;\n}", "tests": "for (size_t i = 0; i < inputArrays.size(); ++i) {\n    assertEqual(findRepeat(inputArrays[i]), expectedOutputs[i]);\n}"}, "c": {"code": "unsigned int findRepeat(const unsigned int *numbers, size_t length) {\n    unsigned int floor = 1;\n    unsigned int ceiling = length - 1;\n\n    while (floor &lt; ceiling) {\n\n        // divide our range 1..n into an upper range and lower range\n        // (such that they don't overlap)\n        // lower range is floor..midpoint\n        // upper range is midpoint+1..ceiling\n        unsigned int midpoint = floor + ((ceiling - floor) / 2);\n        unsigned int lowerRangeFloor   = floor;\n        unsigned int lowerRangeCeiling = midpoint;\n        unsigned int upperRangeFloor   = midpoint + 1;\n        unsigned int upperRangeCeiling = ceiling;\n\n        // count number of items in lower range\n        unsigned int itemsInLowerRange = 0;\n        size_t i;\n        for (i = 0; i &lt; length; ++i) {\n            // is it in the lower range?\n            if (numbers[i] >= lowerRangeFloor && numbers[i] &lt;= lowerRangeCeiling) {\n                ++itemsInLowerRange;\n            }\n        }\n\n        unsigned int distinctPossibleIntegersInLowerRange = lowerRangeCeiling - lowerRangeFloor + 1;\n\n        if (itemsInLowerRange > distinctPossibleIntegersInLowerRange) {\n\n            // there must be a duplicate in the lower range\n            // so use the same approach iteratively on that range\n            floor   = lowerRangeFloor;\n            ceiling = lowerRangeCeiling;\n        }\n        else {\n\n            // there must be a duplicate in the upper range\n            // so use the same approach iteratively on that range\n            floor   = upperRangeFloor;\n            ceiling = upperRangeCeiling;\n        }\n    }\n\n    // floor and ceiling have converged\n    // we found a number that repeats!\n    return floor;\n}", "tests": "testFindRepeat(&findRepeat);"}, "javascript": {"code": "function findRepeat(theArray) {\n\n    var floor = 1;\n    var ceiling = theArray.length - 1;\n\n    while (floor &lt; ceiling) {\n\n        // divide our range 1..n into an upper range and lower range\n        // (such that they don't overlap)\n        // lower range is floor..midpoint\n        // upper range is midpoint+1..ceiling\n        var midpoint = Math.floor(floor + ((ceiling - floor) / 2));\n        var lowerRangeFloor   = floor;\n        var lowerRangeCeiling = midpoint;\n        var upperRangeFloor   = midpoint + 1;\n        var upperRangeCeiling = ceiling;\n\n        var distinctPossibleIntegersInLowerRange = lowerRangeCeiling - lowerRangeFloor + 1;\n\n        // count number of items in lower range\n        var itemsInLowerRange = 0;\n        theArray.forEach(function(item) {\n\n            // is it in the lower range?\n            if (item >= lowerRangeFloor && item &lt;= lowerRangeCeiling) {\n                itemsInLowerRange += 1;\n            }\n        });\n\n        if (itemsInLowerRange > distinctPossibleIntegersInLowerRange) {\n\n            // there must be a duplicate in the lower range\n            // so use the same approach iteratively on that range\n            floor   = lowerRangeFloor;\n            ceiling = lowerRangeCeiling;\n        } else {\n\n            // there must be a duplicate in the upper range\n            // so use the same approach iteratively on that range\n            floor   = upperRangeFloor;\n            ceiling = upperRangeCeiling;\n        }\n    }\n\n    // floor and ceiling have converged\n    // we found a number that repeats!\n    return floor;\n}", "tests": "test(findRepeat, tests, false);"}, "ruby": {"code": "def find_repeat(the_array)\n    floor = 1\n    ceiling = the_array.length - 1\n\n    while floor &lt; ceiling\n\n        # divide our range 1..n into an upper range and lower range\n        # (such that they don't overlap)\n        # lower range is floor..midpoint\n        # upper range is midpoint+1..ceiling\n        midpoint = floor + ((ceiling - floor) / 2)\n        lower_range_floor, lower_range_ceiling = floor, midpoint\n        upper_range_floor, upper_range_ceiling = midpoint+1, ceiling\n\n        # count number of items in lower range\n        items_in_lower_range = 0\n        the_array.each do |item|\n            # is it in the lower range?\n            if item >= lower_range_floor and item &lt;= lower_range_ceiling\n                items_in_lower_range += 1\n            end\n        end\n\n        distinct_possible_integers_in_lower_range = \\\n            lower_range_ceiling - lower_range_floor + 1\n\n        if items_in_lower_range > distinct_possible_integers_in_lower_range\n            # there must be a duplicate in the lower range\n            # so use the same approach iteratively on that range\n            floor, ceiling = lower_range_floor, lower_range_ceiling\n        else\n            # there must be a duplicate in the upper range\n            # so use the same approach iteratively on that range\n            floor, ceiling = upper_range_floor, upper_range_ceiling\n        end\n    end\n\n    # floor and ceiling have converged\n    # we found a number that repeats!\n    return floor\nend", "tests": "test(method(:find_repeat), tests, false)"}, "python": {"code": "def find_repeat(the_list):\n    floor = 1\n    ceiling = len(the_list) - 1\n\n    while floor &lt; ceiling:\n\n        # divide our range 1..n into an upper range and lower range\n        # (such that they don't overlap)\n        # lower range is floor..midpoint\n        # upper range is midpoint+1..ceiling\n        midpoint = floor + ((ceiling - floor) / 2)\n        lower_range_floor, lower_range_ceiling = floor, midpoint\n        upper_range_floor, upper_range_ceiling = midpoint+1, ceiling\n\n        # count number of items in lower range\n        items_in_lower_range = 0\n        for item in the_list:\n            # is it in the lower range?\n            if item >= lower_range_floor and item &lt;= lower_range_ceiling:\n                items_in_lower_range += 1\n\n        distinct_possible_integers_in_lower_range = \\\n            lower_range_ceiling - lower_range_floor + 1\n\n        if items_in_lower_range > distinct_possible_integers_in_lower_range:\n            # there must be a duplicate in the lower range\n            # so use the same approach iteratively on that range\n            floor, ceiling = lower_range_floor, lower_range_ceiling\n        else:\n            # there must be a duplicate in the upper range\n            # so use the same approach iteratively on that range\n            floor, ceiling = upper_range_floor, upper_range_ceiling\n\n\n    # floor and ceiling have converged\n    # we found a number that repeats!\n    return floor", "tests": "test(find_repeat, tests, False)"}}}, "words": {"question__find-duplicate-optimize-for-space__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}, "question__find-duplicate-optimize-for-space__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/jquery.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/underscore-min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/angular-seo.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/base.js"></script>

    
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/prism.min.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/codemirror.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/python.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/ruby.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/javascript.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/clike.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/php.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/haskell.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./40.Find Repeat, Space Edition _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./40.Find Repeat, Space Edition _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./40.Find Repeat, Space Edition _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./40.Find Repeat, Space Edition _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="3M42sB9BpVta02NIVARMijk17fQeYzCwAltoKGkvVuLRP7ZOj565P2IJs46HcNQL">
<div id="loading">
. . .
</div>


<link href="./40.Find Repeat, Space Edition _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default276939_provider" id="stripeXDM_default276939_provider" src="./40.Find Repeat, Space Edition _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./40.Find Repeat, Space Edition _ Interview Cake_files/saved_resource(1).html"></iframe></body></html>