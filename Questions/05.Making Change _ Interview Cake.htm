<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0050)https://www.interviewcake.com/question/python/coin -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./05.Making Change _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./05.Making Change _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./05.Making Change _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./05.Making Change _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":0,"agent":"","applicationID":"7328113","applicationTime":293,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/coin">
        <meta name="description" content="Write a function that will replace your role as a cashier and make everyone rich or something.">

        

        <meta property="og:title" content="Making Change | Interview Cake">
        <meta property="og:description" content="Write a function that will replace your role as a cashier and make everyone rich or something.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/coin">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Making Change | Interview Cake">
        <meta name="twitter:description" content="Write a function that will replace your role as a cashier and make everyone rich or something.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Making Change | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./05.Making Change _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./05.Making Change _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./05.Making Change _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./05.Making Change _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./05.Making Change _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./05.Making Change _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./05.Making Change _ Interview Cake_files/j.php" type="text/javascript"></script>

</head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./05.Making Change _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./05.Making Change _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/coin" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/coin" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/coin" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/coin" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;coin&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Making Change" data-meta_desc="Write a function that will replace your role as a cashier and make everyone rich or something." data-title="" data-meta_keywords="" data-weight="9" data-difficulty="10" data-num-hints="12" data-num-gotchas="3" ng-init="setNumHints(12); setNumGotchas(3); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
    <p class="ng-scope">
        <strong>
            Imagine you landed a new job as a cashier...
        </strong>
    </p>

    <p class="ng-scope">
        Your quirky boss found out that you're a programmer and has a weird request about something they've been wondering for a long time.
    </p>

    <p class="ng-scope">
        Write a function that, given:
    </p>
    <ol class="ng-scope">
        <li>an <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> of money</li>
        <li>
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__a-standard-list"><span class="ng-scope">a list</span></span> of coin <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>
</li>
    </ol>
    <p class="ng-scope">
        computes the number of ways to make <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> of money with coins of the available <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>.
    </p>

    <p example="" class="ng-scope">
        <strong>Example:</strong> for <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span>=<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">4</span></span></span></span></span> (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">4</span></span></span></span></span>¢) and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>=<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,2,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mord">2</span><span class="mpunct">,</span><span class="mord">3</span><span class="mclose">]</span></span></span></span></span> (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span></span></span></span></span>¢, <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span>¢ and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">3</span></span></span></span></span>¢), your program would output <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">4</span></span></span></span></span>—the number of ways to make <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">4</span></span></span></span></span>¢ with those <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>:
    </p>
    <ol class="ng-scope">
        <li>1¢, 1¢, 1¢, 1¢</li>
        <li>1¢, 1¢, 2¢</li>
        <li>1¢, 3¢</li>
        <li>2¢, 2¢</li>
    </ol>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            What if there's <em>no way</em> to make the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> with the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>? Does your function have reasonable behavior?
        </p>
    </div>
</div>
    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            We can do this in <span complexity="n*m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> of money and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> is the number of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>.
        </p>
        <p class="ng-scope">
            A simple recursive approach works, but you'll find that your function gets called more than once with the same inputs. We can do better.
        </p>
    </div>
</div>
    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            We could avoid the duplicate function calls by <span concept="memoization" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">memoizing</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>Memoization</strong> ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for given inputs (usually in <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__memoization__a-hash-table"><span class="ng-scope">a dictionary</span></span>).
</p>

<p>
For example, a simple recursive function for computing the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>th fibonacci number:
</p>

<div code-block="concept__memoization__recursive-fibonacci" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">fib_recursive</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    <span class="token keyword">print</span> <span class="token string">"computing fib_recursive(%i)"</span> <span class="token operator">%</span> n
    <span class="token keyword">return</span> fib_recursive<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib_recursive<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Will run on the same inputs multiple times:
</p>

<div code-block="concept__memoization__recursive-fibonacci-prints" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">&gt;&gt;&gt; fib_recursive(8)
computing fib_recursive(8)
computing fib_recursive(7)
computing fib_recursive(6)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(6)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
21</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
We can imagine the recursive calls of this function as a tree, where the two children of a node are the two recursive calls it makes. We can see that the tree quickly branches out of control:
</p>

<div class="diagram">
    <img src="./05.Making Change _ Interview Cake_files/fibonacci__binary_tree_recursive.svg" height="255" width="510" alt="A binary tree showing the recursive calls of calling fib of 5. Every fib of n call calls fib of n minus 1 and fib of n minus 2. So calling fib of 5 calls fib of 4 and fib of 3, which keep calling fib of lower numbers until reaching the base cases fib of 1 or fib of 0.">


    
</div>


<p>
To avoid the duplicate work caused by the branching, we can wrap the function in a class that stores an instance variable <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span> that maps inputs to outputs. Then we simply:
</p>

<ol>
<li>
Check <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span> to see if we can avoid computing the answer for any given input, and
</li>
<li>
Save the results of any calculations to <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span>.
</li>
</ol>

<div code-block="concept__memoization__fibonacci-memo" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">Fibber</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>memo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># edge case</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Index was negative. No such thing as a negative index in a series."</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># base cases</span>
        <span class="token keyword">elif</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n

        <span class="token comment" spellcheck="true"># see if we've already calculated this</span>
        <span class="token keyword">if</span> n <span class="token keyword">in</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">"grabbing memo[%i]"</span> <span class="token operator">%</span> n
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>

        <span class="token keyword">print</span> <span class="token string">"computing fib(%i)"</span> <span class="token operator">%</span> n
        result <span class="token operator">=</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># memoize</span>
        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result

        <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
We save a bunch of calls by checking the memo:
</p>

<div code-block="concept__memoization__fibonacci-memo-print" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">&gt;&gt;&gt; Fibber().fib(8)
computing fib(8)
computing fib(7)
computing fib(6)
computing fib(5)
computing fib(4)
computing fib(3)
computing fib(2)
grabbing memo[2]
grabbing memo[3]
grabbing memo[4]
grabbing memo[5]
grabbing memo[6]
21</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Now in our recurrence tree, no node appears more than twice:
</p>

<div class="diagram">
    <img src="./05.Making Change _ Interview Cake_files/fibonacci__binary_tree_memoized.svg" height="260" width="510" alt="A binary tree showing the memos and recursive calls of calling fib of 5. Starting with the calls for fib of n minus 1, fib of 5 calls fib of 4, which calls fib of 3, which calls fib of 2, which calls fib of 1. then, for the fib of n minus 2 calls, fib of 5 gets the memo fib of 3, fib of 4 gets the memo fib of 2, fib of 3 gets the memo fib of 1, and fib of 2 calls fib of 0.">


    
</div>


<p>
Memoization is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/bottom-up">going bottom-up</a></strong>, which is usually cleaner and often more efficient.
</p>

<script type="text/javascript">
            var elTranslations = {"words": {"concept__memoization__a-hash-table": {"c": "a hash table", "objectivec": "a dictionary", "ruby": "a hash", "javascript": "an object", "swift": "a dictionary", "python": "a dictionary", "csharp": "a dictionary", "php": "an array", "cpp": "an unordered map", "java": "a hash map"}}, "code-blocks": {"setup": {"python": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]", "javascript": "var tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {0, 0},\n    vector<int> {1, 1},\n    vector<int> {2, 1},\n    vector<int> {3, 2},\n    vector<int> {4, 3},\n    vector<int> {5, 5},\n    vector<int> {6, 8},\n    vector<int> {7, 13},\n    vector<int> {8, 21},\n    vector<int> {9, 34},\n};", "c": "const int tests[10][2] = {\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34}\n};", "java": "int[][] tests = new int[][]{\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34},\n};", "ruby": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]"}, "concept__memoization__fibonacci-memo": {"python": {"code": "class Fibber:\n\n    def __init__(self):\n        self.memo = {}\n\n    def fib(self, n):\n\n        # edge case\n        if n &lt; 0:\n            raise Exception(\"Index was negative. No such thing as a negative index in a series.\")\n\n        # base cases\n        elif n in [0, 1]:\n            return n\n\n        # see if we've already calculated this\n        if n in self.memo:\n            print \"grabbing memo[%i]\" % n\n            return self.memo[n]\n\n        print \"computing fib(%i)\" % n\n        result = self.fib(n - 1) + self.fib(n - 2)\n\n        # memoize\n        self.memo[n] = result\n\n        return result", "tests": "testInputAndOutputLists(Fibber().fib, tests)\n\ndef negative_index_fibber():\n    Fibber().fib(-1)\n\nassertRaisesError(negative_index_fibber, 'negative index')"}, "javascript": {"code": "function Fibber() {\n    this.memo = {};\n}\n\nFibber.prototype.fib = function(n) {\n\n    // edge case\n    if (n &lt; 0) {\n        throw new Error('Index was negative. No such thing as a negative index in a series.');\n\n    // base cases\n    } else if (n === 0 || n === 1) {\n        return n;\n    }\n\n    // see if we've already calculated this\n    if (this.memo.hasOwnProperty(n)) {\n        console.log('grabbing memo[' + n + ']');\n        return this.memo[n];\n    }\n\n    console.log('computing fib(' + n + ')');\n    var result = this.fib(n - 1) + this.fib(n - 2);\n\n    // memoize\n    this.memo[n] = result;\n\n    return result;\n}", "tests": "var fibber = new Fibber();\n\ntests.forEach(function(test) {\n    assertEqual(fibber.fib(test[0]), test[1]);\n});\n\nfunction negativeIndexFibber() {\n    new Fibber().fib(-1);\n}\n\nassertRaisesError(negativeIndexFibber, 'negative index');"}, "cpp": {"code": "class Fibber \n{\nprivate:\n    unordered_map&lt;int, int> memo_;\n\npublic:\n    int fib(int n) \n    {\n        // edge case\n        if (n &lt; 0) {\n            throw invalid_argument(\n                \"Index was negative.\"\n                \" No such thing as a negative index in a series.\");\n        }\n\n        // base cases\n        else if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // see if we've already calculated this\n        auto it = memo_.find(n);\n        if (it != memo_.end()) {\n            cout &lt;&lt; \"grabbing memo[\" &lt;&lt; n &lt;&lt; \"]\" &lt;&lt; endl;\n            return it->second;\n        }\n\n        cout &lt;&lt; \"computing fib(\" &lt;&lt; n &lt;&lt; \")\" &lt;&lt; endl;\n        int result = fib(n - 1) + fib(n - 2);\n\n        // memoize\n        memo_.insert(make_pair(n, result));\n\n        return result;\n    }\n};", "tests": "for (const auto& test : tests) {\n    Fibber obj;\n    assertEqual(obj.fib(test[0]), test[1]);\n}\n{\n    using namespace std::placeholders;\n    Fibber obj;\n    auto f = bind(&Fibber::fib, &obj, _1);\n    assertRaisesError<invalid_argument>(\"negative index\", f, -1);\n}"}, "c": {"code": "// Assume we've implmented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key, void *value, size_t valueSize);\nvoid *hashTableFind(HashTable *hashTable, const char *key);\n\nint fib(int n, HashTable **memo) {\n    char key[16]; // large enough to hold INT_MAX as string\n    void *value;\n    int result;\n\n    // edge case, index must not be negative\n    assert(n >= 0);\n\n    // base cases\n    if (n == 0 || n == 1) {\n        return n;\n    }\n\n    // see if we've already calculated this\n    snprintf(key, sizeof(key) - 1, \"%d\", n);\n    key[sizeof(key) - 1] = '\\0';\n    value = hashTableFind(*memo, key);\n    if (value != NULL) {\n        printf(\"grabbing memo[%d]\\n\", n);\n        return *(int *) value;\n    }\n\n    printf(\"computing fib(%d)\\n\", n);\n    result = fib(n - 1, memo) + fib(n - 2, memo);\n\n    // memoize\n    *memo = hashTableInsert(*memo, key, &result, sizeof(int));\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        HashTable *memo = hashTableNew();\n        int retval = fib(tests[i][0], &memo);\n        hashTableFree(memo);\n        ASSERT(retval == tests[i][1]);\n    }\n}"}, "java": {"code": "import java.util.Map;\nimport java.util.HashMap;\n\nclass Fibber {\n\n    Map&lt;Integer, Integer> memo = new HashMap&lt;Integer, Integer>();\n\n    public int fib(int n) {\n\n        // edge case\n        if (n &lt; 0) {\n            throw new IllegalArgumentException(\"Index was negative. No such thing as a negative index in a series.\");\n\n        // base cases\n        } else if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // see if we've already calculated this\n        if (memo.containsKey(n)) {\n            System.out.println(\"grabbing memo[\" + n + \"]\");\n            return memo.get(n);\n        }\n\n        System.out.println(\"computing fib(\" + n + \")\");\n        int result = fib(n - 1) + fib(n - 2);\n\n        // memoize\n        memo.put(n, result);\n\n        return result;\n    }\n}", "setup": "public class NegativeIndexFibber implements VoidFunctionToTest {\n    public void call() {\n        t.new Fibber().fib(-1);\n    }\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.new Fibber().fib(test[0]), test[1]);\n}\n\nassertRaisesError(t.new NegativeIndexFibber(), \"negative index\");"}, "ruby": {"code": "class Fibber\n\n    def initialize\n        @memo = {}\n    end\n\n    def fib(n)\n\n        # edge case\n        if n &lt; 0\n            raise Exception, \"Index was negative. No such thing as a negative index in a series.\"\n\n        # base cases\n        elsif n == 0 || n == 1\n            return n\n        end\n\n        # see if we've already calculated this\n        if @memo.include? n\n            puts \"grabbing memo[#{n}]\"\n            return @memo[n]\n        end\n\n        print \"computing fib(#{n})\"\n        result = self.fib(n - 1) + self.fib(n - 2)\n\n        # memoize\n        @memo[n] = result\n\n        return result\n    end\nend", "tests": "testInputAndOutputLists(Fibber.new().method(:fib), tests)\n\ndef negative_index_fibber\n    Fibber.new().fib(-1)\nend\n\nassertRaisesError(method(:negative_index_fibber), 'negative index')"}}, "concept__memoization__recursive-fibonacci-prints": {"python": ">>> fib_recursive(8)\ncomputing fib_recursive(8)\ncomputing fib_recursive(7)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\n21", "javascript": "\u276f fibRecursive(8)\n  computing fibRecursive(8)\n  computing fibRecursive(7)\n  computing fibRecursive(6)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(6)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n\u276e 21", "cpp": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "c": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "java": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "ruby": "001:0> fib_recursive(8)\ncomputing fib_recursive(8)\ncomputing fib_recursive(7)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\n=> 21"}, "concept__memoization__fibonacci-memo-print": {"python": ">>> Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "javascript": "\u276f Fibber().fib(8)\n  computing fib(8)\n  computing fib(7)\n  computing fib(6)\n  computing fib(5)\n  computing fib(4)\n  computing fib(3)\n  computing fib(2)\n  grabbing memo[2]\n  grabbing memo[3]\n  grabbing memo[4]\n  grabbing memo[5]\n  grabbing memo[6]\n\u276f 21", "cpp": "// output of Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "c": "// output of new fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "java": "// output of new Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "ruby": "001:0> Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n=> 21"}, "concept__memoization__recursive-fibonacci": {"python": {"code": "def fib_recursive(n):\n    if n in [0, 1]:\n        return n\n    print \"computing fib_recursive(%i)\" % n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)", "tests": "testInputAndOutputLists(fib_recursive, tests)"}, "javascript": {"code": "function fibRecursive(n) {\n    if (n === 0 || n === 1) {\n        return n;\n    }\n    console.log('computing fibRecursive(' + n + ')');\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "testInputAndOutputLists(fibRecursive, tests);"}, "cpp": {"code": "int fibRecursive(int n) \n{\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    cout &lt;&lt; \"computing fibRecursive(\" &lt;&lt; n &lt;&lt; \")\" &lt;&lt; endl;\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(fibRecursive(test[0]), test[1]);\n}"}, "c": {"code": "int fibRecursive(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    printf(\"computing fibRecursive(%d)\\n\", n);\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        int retval = fibRecursive(tests[i][0]);\n        ASSERT(retval == tests[i][1]);\n    }\n}"}, "java": {"code": "public int fibRecursive(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    System.out.println(\"computing fibRecursive(\" + n + \")\");\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.fibRecursive(test[0]), test[1]);\n}"}, "ruby": {"code": "def fib_recursive(n)\n    if n == 0 || n == 1\n        return n\n    end\n    puts \"computing fib_recursive(#{n})\"\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\nend", "tests": "testInputAndOutputLists(method(:fib_recursive), tests)"}}}, "code-inlines": {"concept__memoization__instance-memo": {"cpp": "memo", "java": "memo", "javascript": "this.memo", "python": "self.memo", "c": "memo", "ruby": "@memo"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>, but there's a cleaner <span concept="bottom-up" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">bottom-up</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Going <strong>bottom-up</strong> is a way to avoid recursion, saving the <strong>memory cost</strong> that recursion incurs when it builds up the <strong>call stack</strong>.
</p>

<p>
Put simply, a bottom-up algorithm "starts from the beginning," while a recursive algorithm often "starts from the end and works backwards."
</p>

<p>
For example, if we wanted to multiply all the numbers in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1...n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, we could use this cute, <strong>top-down</strong>, recursive one-liner:
</p>

<div code-block="concept__bottom-up__top-down" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> product_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach has a problem: it builds up a <strong>call stack</strong> of size <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which makes our total memory cost <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. This makes it vulnerable to a <strong>stack overflow error</strong>, where the call stack gets too big and runs out of space.
</p>
<!--TODO: what if you don't know what the call stack is?-->


<p>
To avoid this, we can instead go <strong>bottom-up</strong>:
</p>

<div code-block="concept__bottom-up__bottom-up" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>

    result <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> num

    <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach uses <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time).
</p>

<p class="aside">
<em>Some</em> compilers and interpreters will do what's called <strong>tail call optimization</strong> (TCO), where it can optimize <em>some</em> recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don't. Some C implementations do, and the JavaScript spec recently <em>allowed</em> TCO. Scheme is one of the few languages that <em>guarantee</em> TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.
</p>

<p>
Going bottom-up is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/memoization">memoization</a></strong>.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__bottom-up__top-down": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n    return n * product_1_to_n(n-1) if n > 1 else 1", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n    return n > 1 ? n * product_1_to_n(n-1) : 1\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}, "setup": {"python": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]", "javascript": "var tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {2, 2},\n    vector<int> {3, 6},\n    vector<int> {10, 3628800},\n};", "c": "const int tests[3][2] = {\n    {2, 2},\n    {3, 6},\n    {10, 3628800}\n};", "java": "int[][] tests = new int[][]{\n    {2, 2},\n    {3, 6},\n    {10, 3628800},\n};", "ruby": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]"}, "concept__bottom-up__bottom-up": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n\n    result = 1\n    for num in range(1, n+1):\n        result *= num\n\n    return result", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n\n    var result = 1;\n    for (var num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; ++num) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    int num;\n    int result = 1;\n\n    for (num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n\n    result = 1\n    (1..n).each do |num|\n        result *= num\n    end\n\n    return result\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> approach.
        </p>
    </div>
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
         <p class="ng-scope">
            We need to find some way to break this problem down into subproblems.
         </p>
    </div>
</div>

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
         <p class="ng-scope">
            Here's one way: for <strong>each denomination</strong>, we can use it once, or twice, or...as many times as it takes to reach or overshoot the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> with coins of that denomination alone.
         </p>
    </div>
</div>
    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
         <p class="ng-scope">
            For each of those choices of how many times to include coins of each denomination, we're left with the subproblem of seeing how many ways we can get the remaining amount from the remaining denominations.
         </p>
         <p class="ng-scope">
            Here's that approach in pseudocode:
         </p>
        <div code-block="question__coin__num-ways-pseudocode" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def number_of_ways(amount, denominations):
    answer = 0
    for each denomination in denominations:
        for each num_times_to_use_denomination in possible_num_times_to_use_denomination_without_overshooting_amount:
            answer += number_of_ways(amount_remaining, other_denominations)
    return answer</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
         <p class="ng-scope">
            The answer for some of those subproblems will of course be 0. For example, there's no way to get 1¢ with only 2¢ coins.
         </p>
    </div>
</div>



<!--
    <div note>
         <p>
            For a <strong>recursive</strong> dynamic programming solution, we want to think if there's a way to divide up and simplify the input at each step. What might we break off at each recursive step?
         </p>
    </div>

    <div note>
        <p>
            For each coin in <span var="denominations"></span>, we can either <em>not</em> include the coin, or include it as many times as we choose. How might that change the input?
        </p>
    </div>

    <div note>
        <p>
            So then for each possible <strong># of inclusions of that coin</strong>, we can recursively sum up how many valid choices of reaching the remaining amount there are. What might that code look like?
        </p>
    </div>
-->

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">

        <p class="ng-scope">As a recursive function, we could formalize this as:</p>

<div code-block="question__coin__change-possibilities-top-down-recursive" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">change_possibilities_top_down</span><span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">,</span> current_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># base cases:</span>
    <span class="token comment" spellcheck="true"># we hit the amount spot on. yes!</span>
    <span class="token keyword">if</span> amount_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># we overshot the amount left (used too many coins)</span>
    <span class="token keyword">if</span> amount_left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>

    <span class="token comment" spellcheck="true"># we're out of denominations</span>
    <span class="token keyword">if</span> current_index <span class="token operator">==</span> len<span class="token punctuation">(</span>denominations<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>

    <span class="token keyword">print</span> <span class="token string">"checking ways to make %i with %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">[</span>current_index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># choose a current coin</span>
    current_coin <span class="token operator">=</span> denominations<span class="token punctuation">[</span>current_index<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># see how many possibilities we can get</span>
    <span class="token comment" spellcheck="true"># for each number of times to use current_coin</span>
    num_possibilities <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> amount_left <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        num_possibilities <span class="token operator">+=</span> change_possibilities_top_down<span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">,</span> current_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        amount_left <span class="token operator">-=</span> current_coin

    <span class="token keyword">return</span> num_possibilities</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

        <p class="ng-scope">
            But there's a problem—we'll often <strong>duplicate</strong> the work of checking remaining change possibilities. Note the duplicate calls with the input 4, [1,2,3]:
        </p>

<div code-block="question__coin__change-possibilities-top-down-recursive-print" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">&gt;&gt;&gt; change_possibilities_top_down(4, [1, 2, 3])
checking ways to make 4 with [1, 2, 3]
checking ways to make 4 with [2, 3]
checking ways to make 4 with [3]
checking ways to make 2 with [3]
checking ways to make 3 with [2, 3]
checking ways to make 3 with [3]
checking ways to make 1 with [3]
checking ways to make 2 with [2, 3]
checking ways to make 2 with [3]
checking ways to make 1 with [2, 3]
checking ways to make 1 with [3]
4</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
        <p class="ng-scope">
            For example, we check ways to make <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__two"><span class="ng-scope">2</span></span> with <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__three-in-array"><span class="ng-scope">[3]</span></span> <em>twice</em>.
        </p>

        <p class="ng-scope">
            We can do better. How do we avoid this duplicate work and bring down the time cost?
        </p>

    </div>
</div>

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">

        <p class="ng-scope">
            One way is to <span concept="memoization" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><strong class="ng-scope">memoize</strong></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>Memoization</strong> ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for given inputs (usually in <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__memoization__a-hash-table"><span class="ng-scope">a dictionary</span></span>).
</p>

<p>
For example, a simple recursive function for computing the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>th fibonacci number:
</p>

<div code-block="concept__memoization__recursive-fibonacci" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">fib_recursive</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    <span class="token keyword">print</span> <span class="token string">"computing fib_recursive(%i)"</span> <span class="token operator">%</span> n
    <span class="token keyword">return</span> fib_recursive<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib_recursive<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Will run on the same inputs multiple times:
</p>

<div code-block="concept__memoization__recursive-fibonacci-prints" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">&gt;&gt;&gt; fib_recursive(8)
computing fib_recursive(8)
computing fib_recursive(7)
computing fib_recursive(6)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(6)
computing fib_recursive(5)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(4)
computing fib_recursive(3)
computing fib_recursive(2)
computing fib_recursive(2)
21</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
We can imagine the recursive calls of this function as a tree, where the two children of a node are the two recursive calls it makes. We can see that the tree quickly branches out of control:
</p>

<div class="diagram">
    <img src="./05.Making Change _ Interview Cake_files/fibonacci__binary_tree_recursive.svg" height="255" width="510" alt="A binary tree showing the recursive calls of calling fib of 5. Every fib of n call calls fib of n minus 1 and fib of n minus 2. So calling fib of 5 calls fib of 4 and fib of 3, which keep calling fib of lower numbers until reaching the base cases fib of 1 or fib of 0.">


    
</div>


<p>
To avoid the duplicate work caused by the branching, we can wrap the function in a class that stores an instance variable <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span> that maps inputs to outputs. Then we simply:
</p>

<ol>
<li>
Check <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span> to see if we can avoid computing the answer for any given input, and
</li>
<li>
Save the results of any calculations to <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__memoization__instance-memo"><span class="ng-scope">self.memo</span></span>.
</li>
</ol>

<div code-block="concept__memoization__fibonacci-memo" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">Fibber</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>memo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># edge case</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Index was negative. No such thing as a negative index in a series."</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># base cases</span>
        <span class="token keyword">elif</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n

        <span class="token comment" spellcheck="true"># see if we've already calculated this</span>
        <span class="token keyword">if</span> n <span class="token keyword">in</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">"grabbing memo[%i]"</span> <span class="token operator">%</span> n
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>

        <span class="token keyword">print</span> <span class="token string">"computing fib(%i)"</span> <span class="token operator">%</span> n
        result <span class="token operator">=</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># memoize</span>
        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result

        <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
We save a bunch of calls by checking the memo:
</p>

<div code-block="concept__memoization__fibonacci-memo-print" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">&gt;&gt;&gt; Fibber().fib(8)
computing fib(8)
computing fib(7)
computing fib(6)
computing fib(5)
computing fib(4)
computing fib(3)
computing fib(2)
grabbing memo[2]
grabbing memo[3]
grabbing memo[4]
grabbing memo[5]
grabbing memo[6]
21</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Now in our recurrence tree, no node appears more than twice:
</p>

<div class="diagram">
    <img src="./05.Making Change _ Interview Cake_files/fibonacci__binary_tree_memoized.svg" height="260" width="510" alt="A binary tree showing the memos and recursive calls of calling fib of 5. Starting with the calls for fib of n minus 1, fib of 5 calls fib of 4, which calls fib of 3, which calls fib of 2, which calls fib of 1. then, for the fib of n minus 2 calls, fib of 5 gets the memo fib of 3, fib of 4 gets the memo fib of 2, fib of 3 gets the memo fib of 1, and fib of 2 calls fib of 0.">


    
</div>


<p>
Memoization is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/bottom-up">going bottom-up</a></strong>, which is usually cleaner and often more efficient.
</p>

<script type="text/javascript">
            var elTranslations = {"words": {"concept__memoization__a-hash-table": {"c": "a hash table", "objectivec": "a dictionary", "ruby": "a hash", "javascript": "an object", "swift": "a dictionary", "python": "a dictionary", "csharp": "a dictionary", "php": "an array", "cpp": "an unordered map", "java": "a hash map"}}, "code-blocks": {"setup": {"python": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]", "javascript": "var tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {0, 0},\n    vector<int> {1, 1},\n    vector<int> {2, 1},\n    vector<int> {3, 2},\n    vector<int> {4, 3},\n    vector<int> {5, 5},\n    vector<int> {6, 8},\n    vector<int> {7, 13},\n    vector<int> {8, 21},\n    vector<int> {9, 34},\n};", "c": "const int tests[10][2] = {\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34}\n};", "java": "int[][] tests = new int[][]{\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34},\n};", "ruby": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]"}, "concept__memoization__fibonacci-memo": {"python": {"code": "class Fibber:\n\n    def __init__(self):\n        self.memo = {}\n\n    def fib(self, n):\n\n        # edge case\n        if n &lt; 0:\n            raise Exception(\"Index was negative. No such thing as a negative index in a series.\")\n\n        # base cases\n        elif n in [0, 1]:\n            return n\n\n        # see if we've already calculated this\n        if n in self.memo:\n            print \"grabbing memo[%i]\" % n\n            return self.memo[n]\n\n        print \"computing fib(%i)\" % n\n        result = self.fib(n - 1) + self.fib(n - 2)\n\n        # memoize\n        self.memo[n] = result\n\n        return result", "tests": "testInputAndOutputLists(Fibber().fib, tests)\n\ndef negative_index_fibber():\n    Fibber().fib(-1)\n\nassertRaisesError(negative_index_fibber, 'negative index')"}, "javascript": {"code": "function Fibber() {\n    this.memo = {};\n}\n\nFibber.prototype.fib = function(n) {\n\n    // edge case\n    if (n &lt; 0) {\n        throw new Error('Index was negative. No such thing as a negative index in a series.');\n\n    // base cases\n    } else if (n === 0 || n === 1) {\n        return n;\n    }\n\n    // see if we've already calculated this\n    if (this.memo.hasOwnProperty(n)) {\n        console.log('grabbing memo[' + n + ']');\n        return this.memo[n];\n    }\n\n    console.log('computing fib(' + n + ')');\n    var result = this.fib(n - 1) + this.fib(n - 2);\n\n    // memoize\n    this.memo[n] = result;\n\n    return result;\n}", "tests": "var fibber = new Fibber();\n\ntests.forEach(function(test) {\n    assertEqual(fibber.fib(test[0]), test[1]);\n});\n\nfunction negativeIndexFibber() {\n    new Fibber().fib(-1);\n}\n\nassertRaisesError(negativeIndexFibber, 'negative index');"}, "cpp": {"code": "class Fibber \n{\nprivate:\n    unordered_map&lt;int, int> memo_;\n\npublic:\n    int fib(int n) \n    {\n        // edge case\n        if (n &lt; 0) {\n            throw invalid_argument(\n                \"Index was negative.\"\n                \" No such thing as a negative index in a series.\");\n        }\n\n        // base cases\n        else if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // see if we've already calculated this\n        auto it = memo_.find(n);\n        if (it != memo_.end()) {\n            cout &lt;&lt; \"grabbing memo[\" &lt;&lt; n &lt;&lt; \"]\" &lt;&lt; endl;\n            return it->second;\n        }\n\n        cout &lt;&lt; \"computing fib(\" &lt;&lt; n &lt;&lt; \")\" &lt;&lt; endl;\n        int result = fib(n - 1) + fib(n - 2);\n\n        // memoize\n        memo_.insert(make_pair(n, result));\n\n        return result;\n    }\n};", "tests": "for (const auto& test : tests) {\n    Fibber obj;\n    assertEqual(obj.fib(test[0]), test[1]);\n}\n{\n    using namespace std::placeholders;\n    Fibber obj;\n    auto f = bind(&Fibber::fib, &obj, _1);\n    assertRaisesError<invalid_argument>(\"negative index\", f, -1);\n}"}, "c": {"code": "// Assume we've implmented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key, void *value, size_t valueSize);\nvoid *hashTableFind(HashTable *hashTable, const char *key);\n\nint fib(int n, HashTable **memo) {\n    char key[16]; // large enough to hold INT_MAX as string\n    void *value;\n    int result;\n\n    // edge case, index must not be negative\n    assert(n >= 0);\n\n    // base cases\n    if (n == 0 || n == 1) {\n        return n;\n    }\n\n    // see if we've already calculated this\n    snprintf(key, sizeof(key) - 1, \"%d\", n);\n    key[sizeof(key) - 1] = '\\0';\n    value = hashTableFind(*memo, key);\n    if (value != NULL) {\n        printf(\"grabbing memo[%d]\\n\", n);\n        return *(int *) value;\n    }\n\n    printf(\"computing fib(%d)\\n\", n);\n    result = fib(n - 1, memo) + fib(n - 2, memo);\n\n    // memoize\n    *memo = hashTableInsert(*memo, key, &result, sizeof(int));\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        HashTable *memo = hashTableNew();\n        int retval = fib(tests[i][0], &memo);\n        hashTableFree(memo);\n        ASSERT(retval == tests[i][1]);\n    }\n}"}, "java": {"code": "import java.util.Map;\nimport java.util.HashMap;\n\nclass Fibber {\n\n    Map&lt;Integer, Integer> memo = new HashMap&lt;Integer, Integer>();\n\n    public int fib(int n) {\n\n        // edge case\n        if (n &lt; 0) {\n            throw new IllegalArgumentException(\"Index was negative. No such thing as a negative index in a series.\");\n\n        // base cases\n        } else if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // see if we've already calculated this\n        if (memo.containsKey(n)) {\n            System.out.println(\"grabbing memo[\" + n + \"]\");\n            return memo.get(n);\n        }\n\n        System.out.println(\"computing fib(\" + n + \")\");\n        int result = fib(n - 1) + fib(n - 2);\n\n        // memoize\n        memo.put(n, result);\n\n        return result;\n    }\n}", "setup": "public class NegativeIndexFibber implements VoidFunctionToTest {\n    public void call() {\n        t.new Fibber().fib(-1);\n    }\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.new Fibber().fib(test[0]), test[1]);\n}\n\nassertRaisesError(t.new NegativeIndexFibber(), \"negative index\");"}, "ruby": {"code": "class Fibber\n\n    def initialize\n        @memo = {}\n    end\n\n    def fib(n)\n\n        # edge case\n        if n &lt; 0\n            raise Exception, \"Index was negative. No such thing as a negative index in a series.\"\n\n        # base cases\n        elsif n == 0 || n == 1\n            return n\n        end\n\n        # see if we've already calculated this\n        if @memo.include? n\n            puts \"grabbing memo[#{n}]\"\n            return @memo[n]\n        end\n\n        print \"computing fib(#{n})\"\n        result = self.fib(n - 1) + self.fib(n - 2)\n\n        # memoize\n        @memo[n] = result\n\n        return result\n    end\nend", "tests": "testInputAndOutputLists(Fibber.new().method(:fib), tests)\n\ndef negative_index_fibber\n    Fibber.new().fib(-1)\nend\n\nassertRaisesError(method(:negative_index_fibber), 'negative index')"}}, "concept__memoization__recursive-fibonacci-prints": {"python": ">>> fib_recursive(8)\ncomputing fib_recursive(8)\ncomputing fib_recursive(7)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\n21", "javascript": "\u276f fibRecursive(8)\n  computing fibRecursive(8)\n  computing fibRecursive(7)\n  computing fibRecursive(6)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(6)\n  computing fibRecursive(5)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(4)\n  computing fibRecursive(3)\n  computing fibRecursive(2)\n  computing fibRecursive(2)\n\u276e 21", "cpp": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "c": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "java": "// output for fibRecursive(8)\nComputing fibRecursive(8)\nComputing fibRecursive(7)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(6)\nComputing fibRecursive(5)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(4)\nComputing fibRecursive(3)\nComputing fibRecursive(2)\nComputing fibRecursive(2)\n21", "ruby": "001:0> fib_recursive(8)\ncomputing fib_recursive(8)\ncomputing fib_recursive(7)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\n=> 21"}, "concept__memoization__fibonacci-memo-print": {"python": ">>> Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "javascript": "\u276f Fibber().fib(8)\n  computing fib(8)\n  computing fib(7)\n  computing fib(6)\n  computing fib(5)\n  computing fib(4)\n  computing fib(3)\n  computing fib(2)\n  grabbing memo[2]\n  grabbing memo[3]\n  grabbing memo[4]\n  grabbing memo[5]\n  grabbing memo[6]\n\u276f 21", "cpp": "// output of Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "c": "// output of new fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "java": "// output of new Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21", "ruby": "001:0> Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n=> 21"}, "concept__memoization__recursive-fibonacci": {"python": {"code": "def fib_recursive(n):\n    if n in [0, 1]:\n        return n\n    print \"computing fib_recursive(%i)\" % n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)", "tests": "testInputAndOutputLists(fib_recursive, tests)"}, "javascript": {"code": "function fibRecursive(n) {\n    if (n === 0 || n === 1) {\n        return n;\n    }\n    console.log('computing fibRecursive(' + n + ')');\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "testInputAndOutputLists(fibRecursive, tests);"}, "cpp": {"code": "int fibRecursive(int n) \n{\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    cout &lt;&lt; \"computing fibRecursive(\" &lt;&lt; n &lt;&lt; \")\" &lt;&lt; endl;\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(fibRecursive(test[0]), test[1]);\n}"}, "c": {"code": "int fibRecursive(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    printf(\"computing fibRecursive(%d)\\n\", n);\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        int retval = fibRecursive(tests[i][0]);\n        ASSERT(retval == tests[i][1]);\n    }\n}"}, "java": {"code": "public int fibRecursive(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    System.out.println(\"computing fibRecursive(\" + n + \")\");\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.fibRecursive(test[0]), test[1]);\n}"}, "ruby": {"code": "def fib_recursive(n)\n    if n == 0 || n == 1\n        return n\n    end\n    puts \"computing fib_recursive(#{n})\"\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\nend", "tests": "testInputAndOutputLists(method(:fib_recursive), tests)"}}}, "code-inlines": {"concept__memoization__instance-memo": {"cpp": "memo", "java": "memo", "javascript": "this.memo", "python": "self.memo", "c": "memo", "ruby": "@memo"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>.
        </p>
    </div>
</div>

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">

    <p class="ng-scope">Here's what the memoization might look like:</p>

    <div code-block="question__coin__change-possibilities-top-down-memo" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">Change</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>memo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">change_possibilities_top_down</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">,</span> current_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># check our memo and short-circuit if we've already solved this one</span>
        memo_key <span class="token operator">=</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> current_index<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> memo_key <span class="token keyword">in</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">"grabbing memo[%s]"</span> <span class="token operator">%</span> memo_key
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>memo_key<span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># base cases:</span>
        <span class="token comment" spellcheck="true"># we hit the amount spot on. yes!</span>
        <span class="token keyword">if</span> amount_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># we overshot the amount left (used too many coins)</span>
        <span class="token keyword">if</span> amount_left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>

        <span class="token comment" spellcheck="true"># we're out of denominations</span>
        <span class="token keyword">if</span> current_index <span class="token operator">==</span> len<span class="token punctuation">(</span>denominations<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>

        <span class="token keyword">print</span> <span class="token string">"checking ways to make %i with %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">[</span>current_index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># choose a current coin</span>
        current_coin <span class="token operator">=</span> denominations<span class="token punctuation">[</span>current_index<span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># see how many possibilities we can get</span>
        <span class="token comment" spellcheck="true"># for each number of times to use current_coin</span>
        num_possibilities <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> amount_left <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            num_possibilities <span class="token operator">+=</span> self<span class="token punctuation">.</span>change_possibilities_top_down<span class="token punctuation">(</span>amount_left<span class="token punctuation">,</span> denominations<span class="token punctuation">,</span> current_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            amount_left <span class="token operator">-=</span> current_coin

        <span class="token comment" spellcheck="true"># save the answer in our memo so we don't compute it again</span>
        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>memo_key<span class="token punctuation">]</span> <span class="token operator">=</span> num_possibilities
        <span class="token keyword">return</span> num_possibilities</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

    <p class="ng-scope">
        And now our checking has no duplication:
    </p>

    <div code-block="question__coin__change-possibilities-top-down-memo-print" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">&gt;&gt;&gt; Change().change_possibilities_top_down(4, [1, 2, 3])
checking ways to make 4 with [1, 2, 3]
checking ways to make 4 with [2, 3]
checking ways to make 4 with [3]
checking ways to make 2 with [3]
checking ways to make 3 with [2, 3]
checking ways to make 3 with [3]
checking ways to make 1 with [3]
checking ways to make 2 with [2, 3]
grabbing memo[(2, [3])]
checking ways to make 1 with [2, 3]
grabbing memo[(1, [3])]
4</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

        <p class="ng-scope">
            This answer is quite good. It certainly solves our duplicate work problem. It takes <span complexity="n*m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n*m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the size of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__m"><span class="ng-scope">m</span></span> is the number of items in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>. <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__array-slicing-takes-space"><span class="ng-scope">(Except we'd need to remove the line where we </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="print"><span class="ng-scope">print</span></span><span class="ng-scope"> "checking ways to make..." because making all those sub</span><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span><span class="ng-scope">s will take </span><span complexity="m^2" class="ng-scope ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>m</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(m^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">m</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span><span class="ng-scope"> space!)</span></span>
        </p>

        <p class="ng-scope">
            However, we can do better. Because our function is recursive it will build up a <span concept="call-stack" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><strong class="ng-scope">large call stack</strong></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>call stack</strong> is what a program uses to keep track of what function it's currently running and what to do with that function's return value.
</p>

<p>
Whenever you call a function, a new <strong>frame</strong> gets pushed onto the call stack, which is popped off when the function returns. As functions call other functions, the stack gets taller. In recursive functions, the stack can get as tall as the number of times the function calls itself. This can cause a problem: the stack has a limited amount of space, and if it gets too big you can get a <strong>stack overflow</strong> error.
</p>

<!-- #illustrate -->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> of size <span complexity="m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span>. Of course, this cost is eclipsed by the memory cost of <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__self-memo"><span class="ng-scope">self.memo</span></span>, which is <span complexity="n*m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span>. But it's still best to avoid building up a large stack like this, because it can cause a <strong>stack overflow</strong> (yes, that means recursion is <em>usually</em> better to avoid for functions that might have arbitrarily large inputs).
        </p>

        <p class="ng-scope">
            It turns out we can get <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> additional space.
        </p>
    </div>
</div>

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            A great way to avoid recursion is to go <span concept="bottom-up" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><strong class="ng-scope">bottom-up</strong></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Going <strong>bottom-up</strong> is a way to avoid recursion, saving the <strong>memory cost</strong> that recursion incurs when it builds up the <strong>call stack</strong>.
</p>

<p>
Put simply, a bottom-up algorithm "starts from the beginning," while a recursive algorithm often "starts from the end and works backwards."
</p>

<p>
For example, if we wanted to multiply all the numbers in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1...n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, we could use this cute, <strong>top-down</strong>, recursive one-liner:
</p>

<div code-block="concept__bottom-up__top-down" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> product_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach has a problem: it builds up a <strong>call stack</strong> of size <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which makes our total memory cost <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. This makes it vulnerable to a <strong>stack overflow error</strong>, where the call stack gets too big and runs out of space.
</p>
<!--TODO: what if you don't know what the call stack is?-->


<p>
To avoid this, we can instead go <strong>bottom-up</strong>:
</p>

<div code-block="concept__bottom-up__bottom-up" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>

    result <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> num

    <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach uses <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time).
</p>

<p class="aside">
<em>Some</em> compilers and interpreters will do what's called <strong>tail call optimization</strong> (TCO), where it can optimize <em>some</em> recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don't. Some C implementations do, and the JavaScript spec recently <em>allowed</em> TCO. Scheme is one of the few languages that <em>guarantee</em> TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.
</p>

<p>
Going bottom-up is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/memoization">memoization</a></strong>.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__bottom-up__top-down": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n    return n * product_1_to_n(n-1) if n > 1 else 1", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n    return n > 1 ? n * product_1_to_n(n-1) : 1\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}, "setup": {"python": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]", "javascript": "var tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {2, 2},\n    vector<int> {3, 6},\n    vector<int> {10, 3628800},\n};", "c": "const int tests[3][2] = {\n    {2, 2},\n    {3, 6},\n    {10, 3628800}\n};", "java": "int[][] tests = new int[][]{\n    {2, 2},\n    {3, 6},\n    {10, 3628800},\n};", "ruby": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]"}, "concept__bottom-up__bottom-up": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n\n    result = 1\n    for num in range(1, n+1):\n        result *= num\n\n    return result", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n\n    var result = 1;\n    for (var num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; ++num) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    int num;\n    int result = 1;\n\n    for (num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n\n    result = 1\n    (1..n).each do |num|\n        result *= num\n    end\n\n    return result\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>.
        </p>
    </div>
</div>



    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            Our recursive approach was top-down because it started with the final value for <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> and recursively broke the problem down into subproblems with smaller values for <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span>. What if instead we tried to <strong>compute the answer for small values of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> first</strong>, and use those answers to iteratively compute the answer for higher values until arriving at the final <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span>?
        </p>
    </div>
</div>


    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            We can <strong>start by making <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__a-standard-list"><span class="ng-scope">a list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents"><span class="ng-scope">ways_of_doing_n_cents</span></span></strong>, where the index is the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> and the value at each index is the number of ways of getting that amount.
        </p>
        <p class="ng-scope">
            This <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__standard-list"><span class="ng-scope">list</span></span> will take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the size of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span>.
        </p>
    </div>
</div>

    <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
        <p class="ng-scope">
            To further simplify the problem, we can work with only the first <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__coin"><span class="ng-scope">coin</span></span> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>, then add in the second coin, then the third, etc.
        </p>

        <p class="ng-scope">
            What would <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents"><span class="ng-scope">ways_of_doing_n_cents</span></span> look like for just our first <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__coin"><span class="ng-scope">coin</span></span>: 1¢? Let's call this <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents-one"><span class="ng-scope">ways_of_doing_n_cents_1</span></span>.
        </p>

        <div code-block="question__coin__ways-of-doing-n-cents-one" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">ways_of_doing_n_cents_1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 0c:  no coins</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 1c:  1 1c coin</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 2c:  2 1c coins</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 3c:  3 1c coins</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 4c:  4 1c coins</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 5c:  5 1c coins</span>
<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
        <p class="ng-scope">
            Now what if we add a 2¢ coin?
        </p>

        <div code-block="question__coin__ways-of-doing-n-cents-two" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">ways_of_doing_n_cents_1_2 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 0c:  no change</span>
    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 1c:  no change</span>
    <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 2c:  new [(2)]</span>
    <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 3c:  new [(2,1)]</span>
    <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 4c:  new [(2,1,1), (2,2)]</span>
    <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 5c:  new [(2,1,1,1), (2,2,1)]</span>
<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

        <p class="ng-scope">
            How do we formalize this process of going from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents-one"><span class="ng-scope">ways_of_doing_n_cents_1</span></span> to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents-one-two"><span class="ng-scope">ways_of_doing_n_cents_1_2</span></span>?
        </p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's <strong>suppose we're partway through already</strong> (this is a classic dynamic programming approach). Say we're trying to calculate <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-five"><span class="ng-scope">ways_of_doing_n_cents_1_2[5]</span></span>. Because we're going bottom-up, we know we already have:
</p>

<ol class="ng-scope">
    <li>
        <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents-one-two"><span class="ng-scope">ways_of_doing_n_cents_1_2</span></span> for amounts less than <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">5</span></span></span></span></span>
    </li>
    <li>
        a fully-populated <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents-one"><span class="ng-scope">ways_of_doing_n_cents_1</span></span>
    </li>
</ol>

<p class="ng-scope">
So how many <em>new</em> ways should we add to <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-of-five"><span class="ng-scope">ways_of_doing_n_cents_1[5]</span></span> to get <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-five"><span class="ng-scope">ways_of_doing_n_cents_1_2[5]</span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, if there are <em>any</em> new ways to get 5¢ now that we have 2¢ coins, those new ways must involve at least one 2¢ coin. So if we presuppose that we'll use one 2¢ coin, that leaves us with <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">5-2=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord">5</span><span class="mbin">−</span><span class="mord">2</span><span class="mrel">=</span><span class="mord">3</span></span></span></span></span> left to come up with. We already know how many ways we can get 3¢ with 1¢ and 2¢ coins: <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-three"><span class="ng-scope">ways_of_doing_n_cents_1_2[3]</span></span>, which is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span>.
</p>

<p class="ng-scope">
So we can see that:
</p>

<div code-block="question__coin__ways-of-doing-n-cents-with-one-two" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">ways_of_doing_n_cents_1_2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> ways_of_doing_n_cents_1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> ways_of_doing_n_cents_1_2<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>


<p class="ng-scope">
<strong>Why don't we also need to check <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-five-minus-two-minus-two"><span class="ng-scope">ways_of_doing_n_cents_1_2[5 - 2 - 2]</span></span> (two 2¢ coins)?</strong> Because we already checked <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-one"><span class="ng-scope">ways_of_doing_n_cents_1_2[1]</span></span> when calulating <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-three"><span class="ng-scope">ways_of_doing_n_cents_1_2[3]</span></span>. We'd be counting some arrangements multiple times. In other words, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-one-two-of-k"><span class="ng-scope">ways_of_doing_n_cents_1_2[k]</span></span> already includes the full count of possibilities for getting <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, including possibilities that use 2¢ any number of times. We're only interested in how many <em>more</em> possibilities we might get when we go from <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> to <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">k+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.77777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mbin">+</span><span class="mord">2</span></span></span></span></span> and thus have the ability to add one <em>more</em> 2¢ coin to each of the possibilities we have for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>.
</p>

</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
    <p class="ng-scope">
        We use a <span concept="bottom-up" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">bottom-up</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Going <strong>bottom-up</strong> is a way to avoid recursion, saving the <strong>memory cost</strong> that recursion incurs when it builds up the <strong>call stack</strong>.
</p>

<p>
Put simply, a bottom-up algorithm "starts from the beginning," while a recursive algorithm often "starts from the end and works backwards."
</p>

<p>
For example, if we wanted to multiply all the numbers in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1...n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, we could use this cute, <strong>top-down</strong>, recursive one-liner:
</p>

<div code-block="concept__bottom-up__top-down" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> product_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach has a problem: it builds up a <strong>call stack</strong> of size <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which makes our total memory cost <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. This makes it vulnerable to a <strong>stack overflow error</strong>, where the call stack gets too big and runs out of space.
</p>
<!--TODO: what if you don't know what the call stack is?-->


<p>
To avoid this, we can instead go <strong>bottom-up</strong>:
</p>

<div code-block="concept__bottom-up__bottom-up" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>

    result <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> num

    <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach uses <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time).
</p>

<p class="aside">
<em>Some</em> compilers and interpreters will do what's called <strong>tail call optimization</strong> (TCO), where it can optimize <em>some</em> recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don't. Some C implementations do, and the JavaScript spec recently <em>allowed</em> TCO. Scheme is one of the few languages that <em>guarantee</em> TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.
</p>

<p>
Going bottom-up is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/memoization">memoization</a></strong>.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__bottom-up__top-down": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n    return n * product_1_to_n(n-1) if n > 1 else 1", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n    return n > 1 ? n * product_1_to_n(n-1) : 1\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}, "setup": {"python": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]", "javascript": "var tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {2, 2},\n    vector<int> {3, 6},\n    vector<int> {10, 3628800},\n};", "c": "const int tests[3][2] = {\n    {2, 2},\n    {3, 6},\n    {10, 3628800}\n};", "java": "int[][] tests = new int[][]{\n    {2, 2},\n    {3, 6},\n    {10, 3628800},\n};", "ruby": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]"}, "concept__bottom-up__bottom-up": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n\n    result = 1\n    for num in range(1, n+1):\n        result *= num\n\n    return result", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n\n    var result = 1;\n    for (var num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; ++num) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    int num;\n    int result = 1;\n\n    for (num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n\n    result = 1\n    (1..n).each do |num|\n        result *= num\n    end\n\n    return result\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> algorithm to build up a table <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents"><span class="ng-scope">ways_of_doing_n_cents</span></span> such that <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-k"><span class="ng-scope">ways_of_doing_n_cents[k]</span></span> is how many ways we can get to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__k"><span class="ng-scope">k</span></span> cents using our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>. We start with the base case that there's <strong>one way to create the amount zero</strong>, and progressively add each of our denominations.
    </p>
    <p class="ng-scope">
        The number of new ways we can make a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__higher-amount"><span class="ng-scope">higher_amount</span></span> when we account for a new <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__coin"><span class="ng-scope">coin</span></span> is simply <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__coin__ways-of-doing-n-cents-of-higher-amount-minus-coin"><span class="ng-scope">ways_of_doing_n_cents[higher_amount - coin]</span></span>, where we know that value already includes combinations involving <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__coin"><span class="ng-scope">coin</span></span> (because we went bottom-up, we know smaller values have already been calculated).
    </p>


    <div code-block="question__coin__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">change_possibilities_bottom_up</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> denominations<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ways_of_doing_n_cents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    ways_of_doing_n_cents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">for</span> coin <span class="token keyword">in</span> denominations<span class="token punctuation">:</span>
        <span class="token keyword">for</span> higher_amount <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>coin<span class="token punctuation">,</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            higher_amount_remainder <span class="token operator">=</span> higher_amount <span class="token operator">-</span> coin
            ways_of_doing_n_cents<span class="token punctuation">[</span>higher_amount<span class="token punctuation">]</span> <span class="token operator">+=</span> ways_of_doing_n_cents<span class="token punctuation">[</span>higher_amount_remainder<span class="token punctuation">]</span>

    <span class="token keyword">return</span> ways_of_doing_n_cents<span class="token punctuation">[</span>amount<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
    <p class="ng-scope">
        Here's how <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents"><span class="ng-scope">ways_of_doing_n_cents</span></span> would look in successive iterations of our function for <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span>=<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">5</span></span></span></span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>=<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1,3,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mord">3</span><span class="mpunct">,</span><span class="mord">5</span><span class="mclose">]</span></span></span></span></span>.
    </p>
       <div code-block="question__coin__ways-of-doing-n-cents-successive-iterations" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">===========
key:
a = higher_amount
r = higher_amount_remainder
===========

============
for coin = 1:
============
[1, 1, 0, 0, 0, 0]
 r  a

[1, 1, 1, 0, 0, 0]
    r  a

[1, 1, 1, 1, 0, 0]
       r  a

[1, 1, 1, 1, 1, 0]
          r  a

[1, 1, 1, 1, 1, 1]
             r  a

============
for coin = 3:
=============
[1, 1, 1, 2, 1, 1]
 r        a

[1, 1, 1, 2, 2, 1]
    r        a

[1, 1, 1, 2, 2, 2]
       r        a

============
for coin = 5:
=============
[1, 1, 1, 2, 2, 3]
 r              a


final answer: 3</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">

    <p class="ng-scope">
        <span complexity="n*m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> additional space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__amount"><span class="ng-scope">amount</span></span> of money and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> is the number of potential <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__denominations"><span class="ng-scope">denominations</span></span>.
    </p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
This question is in a broad class called "dynamic programming." We have a bunch more <a href="https://www.interviewcake.com/concept/bottom-up#related_questions">dynamic programming questions</a> we'll go over later.
</p>

<p class="ng-scope">
Dynamic programming is <em>kind of</em> like the next step up from <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>. You're taking that idea of "keeping track of what we need in order to update the best answer so far," and applying it to situations where the new best answer so far might not <em>just</em> have to do with the previous answer, but some <em>other</em> earlier answer as well.
</p>

<p class="ng-scope">
So as you can see in this problem, we kept track of <em>all</em> of our previous answers to smaller versions of the problem (called "subproblems") in a big <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__standard-list"><span class="ng-scope">list</span></span> called <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__coin__ways-of-doing-n-cents"><span class="ng-scope">ways_of_doing_n_cents</span></span>.
</p>

<p class="ng-scope">
Again, same <em>idea</em> of keeping track of what we need in order to update the answer as we go, like we did when storing the max product of 2, min product of 2, etc in the <a href="https://www.interviewcake.com/question/highest-product-of-3">highest product of 3</a> question. Except now the thing we need to keep track of is <em>all</em> our previous answers, which we're keeping in <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__a-standard-list"><span class="ng-scope">a list</span></span>.
</p>

<p class="ng-scope">
We built that <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__coin__standard-list"><span class="ng-scope">list</span></span> bottom-up, but we also talked about how we could do it top-down and memoize. Going bottom-up is cleaner and usually more efficient, but often it's easier to think of the top-down version first and try to adapt from there.
</p>

<p class="ng-scope">
Dynamic programming is a weak point for lots of candidates. If this one was tricky for you, don't fret. We have more coming later.
</p>


</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__coin__ways-of-doing-n-cents-one": {"snake": "ways_of_doing_n_cents_1", "camel": "waysOfDoingNCents1"}, "question__coin__coin": {"default": "coin"}, "question__coin__ways-of-doing-n-cents": {"snake": "ways_of_doing_n_cents", "camel": "waysOfDoingNCents"}, "question__coin__denominations": {"default": "denominations"}, "question__coin__m": {"default": "m"}, "question__coin__amount": {"default": "amount"}, "question__coin__k": {"default": "k"}, "question__coin__ways-of-doing-n-cents-one-two": {"snake": "ways_of_doing_n_cents_1_2", "camel": "waysOfDoingNCents1And2"}, "question__coin__higher-amount": {"snake": "higher_amount", "camel": "higherAmount"}}, "code-blocks": {"question__coin__ways-of-doing-n-cents-one": {"java": "int[] waysOfDoingNCents1 = new int[]{\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n};", "cpp": "vector&lt;int> waysOfDoingNCents1 {\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n};", "c": "int waysOfDoingNCents1[amount + 1] = {\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n};", "javascript": "var waysOfDoingNCents1 = [\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n];", "swift": "let waysOfDoingNCents1 = [\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n]", "ruby": "ways_of_doing_n_cents_1 = [\n    1,  # 0c:  no coins\n    1,  # 1c:  1 1c coin\n    1,  # 2c:  2 1c coins\n    1,  # 3c:  3 1c coins\n    1,  # 4c:  4 1c coins\n    1,  # 5c:  5 1c coins\n]", "csharp": "int[] waysOfDoingNCents1 = new[]\n{\n    1,  // 0c:  no coins\n    1,  // 1c:  1 1c coin\n    1,  // 2c:  2 1c coins\n    1,  // 3c:  3 1c coins\n    1,  // 4c:  4 1c coins\n    1,  // 5c:  5 1c coins\n};", "python": "ways_of_doing_n_cents_1 = [\n    1,  # 0c:  no coins\n    1,  # 1c:  1 1c coin\n    1,  # 2c:  2 1c coins\n    1,  # 3c:  3 1c coins\n    1,  # 4c:  4 1c coins\n    1,  # 5c:  5 1c coins\n]"}, "question__coin__ways-of-doing-n-cents-successive-iterations": {"snake": "===========\nkey:\na = higher_amount\nr = higher_amount_remainder\n===========\n\n============\nfor coin = 1:\n============\n[1, 1, 0, 0, 0, 0]\n r  a\n\n[1, 1, 1, 0, 0, 0]\n    r  a\n\n[1, 1, 1, 1, 0, 0]\n       r  a\n\n[1, 1, 1, 1, 1, 0]\n          r  a\n\n[1, 1, 1, 1, 1, 1]\n             r  a\n\n============\nfor coin = 3:\n=============\n[1, 1, 1, 2, 1, 1]\n r        a\n\n[1, 1, 1, 2, 2, 1]\n    r        a\n\n[1, 1, 1, 2, 2, 2]\n       r        a\n\n============\nfor coin = 5:\n=============\n[1, 1, 1, 2, 2, 3]\n r              a\n\n\nfinal answer: 3", "camel": "===========\nkey:\na = higherAmount\nr = higherAmountRemainder\n===========\n\n============\nfor coin = 1:\n============\n[1, 1, 0, 0, 0, 0]\n r  a\n\n[1, 1, 1, 0, 0, 0]\n    r  a\n\n[1, 1, 1, 1, 0, 0]\n       r  a\n\n[1, 1, 1, 1, 1, 0]\n          r  a\n\n[1, 1, 1, 1, 1, 1]\n             r  a\n\n============\nfor coin = 3:\n=============\n[1, 1, 1, 2, 1, 1]\n r        a\n\n[1, 1, 1, 2, 2, 1]\n    r        a\n\n[1, 1, 1, 2, 2, 2]\n       r        a\n\n============\nfor coin = 5:\n=============\n[1, 1, 1, 2, 2, 3]\n r              a\n\n\nfinal answer: 3"}, "question__coin__change-possibilities-top-down-memo-print": {"java": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[2 [3]]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[1 [3]]\n4", "cpp": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[2, 3]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[1, 3]\n4", "c": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[2, 3]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[1, 3]\n4", "javascript": "\u276f new Change().changePossibilitiesTopDown(4, [1, 2, 3]);\n  checking ways to make 4 with 1,2,3\n  checking ways to make 4 with 2,3\n  checking ways to make 4 with 3\n  checking ways to make 2 with 3\n  checking ways to make 3 with 2,3\n  checking ways to make 3 with 3\n  checking ways to make 1 with 3\n  checking ways to make 2 with 2,3\n  grabbing memo[2,3]\n  checking ways to make 1 with 2,3\n  grabbing memo[1,3]\n\u276e 4", "swift": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo (2, 2)\nchecking ways to make 1 with [2, 3]\ngrabbing memo (1, 2)", "ruby": "001:0> Change().change_possibilities_top_down(4, [1, 2, 3])\nchecking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[(2, [3])]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[(1, [3])]\n=> 4", "csharp": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[2, 3]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[1, 3]\n4", "python": ">>> Change().change_possibilities_top_down(4, [1, 2, 3])\nchecking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\ngrabbing memo[(2, [3])]\nchecking ways to make 1 with [2, 3]\ngrabbing memo[(1, [3])]\n4"}, "question__coin__solution": {"java": {"code": "public int changePossibilitiesBottomUp(int amount, int[] denominations) {\n    int[] waysOfDoingNCents = new int[amount+1]; // array of zeros from 0..amount\n    waysOfDoingNCents[0] = 1;\n\n    for (int coin : denominations) {\n        for (int higherAmount = coin; higherAmount &lt; amount + 1; higherAmount++) {\n            int higherAmountRemainder = higherAmount - coin;\n            waysOfDoingNCents[higherAmount] += waysOfDoingNCents[higherAmountRemainder];\n        }\n    }\n\n    return waysOfDoingNCents[amount];\n}", "tests": "for (int i = 0; i<amounts.length; i++) {\n    assertEqual(t.changePossibilitiesBottomUp(amounts[i], denominations[i]), outputs[i]);\n}"}, "cpp": {"code": "size_t changePossibilitiesBottomUp(int amount, const vector&lt;int>& denominations)\n{\n    vector&lt;size_t> waysOfDoingNCents(amount + 1); // vector of zeros from 0..amount\n    waysOfDoingNCents[0] = 1;\n\n    for (const int coin : denominations) {\n        for (int higherAmount = coin; higherAmount &lt; amount + 1; ++higherAmount) {\n            int higherAmountRemainder = higherAmount - coin;\n            waysOfDoingNCents[higherAmount] += waysOfDoingNCents[higherAmountRemainder];\n        }\n    }\n\n    return waysOfDoingNCents[amount];\n}", "tests": "for (size_t i = 0; i<amounts.size(); ++i) {\n    assertEqual(changePossibilitiesBottomUp(amounts[i], denominations[i]), outputs[i]);\n}"}, "c": {"code": "int changePossibilitiesBottomUp(int amount, const int *denominations, size_t denominationsLength)\n{\n    int waysOfDoingNCents[amount + 1]; // array from 0..amount\n    size_t i;\n\n    // set all member to zero\n    memset(waysOfDoingNCents, 0, sizeof(waysOfDoingNCents));\n    waysOfDoingNCents[0] = 1;\n\n    for (i = 0; i &lt; denominationsLength; i++) {\n        int higherAmount;\n        int coin = denominations[i];\n\n        for (higherAmount = coin; higherAmount &lt; amount + 1; higherAmount++) {\n            int higherAmountRemainder = higherAmount - coin;\n            waysOfDoingNCents[higherAmount] += waysOfDoingNCents[higherAmountRemainder];\n        }\n    }\n\n    return waysOfDoingNCents[amount];\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < amountsLength; i++) {\n        int numPossibilities = changePossibilitiesBottomUp(amounts[i], denominations[i],\n                                                           denominationsLength[i]);\n        ASSERT(numPossibilities == outputs[i]);\n    }\n}"}, "javascript": {"code": "function changePossibilitiesBottomUp(amount, denominations) {\n\n    // intialize an array of zeros with indices up to amount\n    var waysOfDoingNcents = [];\n    for (var i = 0; i &lt;= amount; i++) {\n        waysOfDoingNcents[i] = 0;\n    }\n    waysOfDoingNcents[0] = 1;\n\n    for (var j = 0; j &lt; denominations.length; j++) {\n        var coin = denominations[j];\n        for (var higherAmount = coin; higherAmount &lt;= amount; higherAmount++) {\n            var higherAmountRemainder = higherAmount - coin;\n            waysOfDoingNcents[higherAmount] += waysOfDoingNcents[higherAmountRemainder];\n        }\n    }\n\n    return waysOfDoingNcents[amount];\n}", "tests": "testInputAndOutputLists(changePossibilitiesBottomUp, tests, true);"}, "swift": {"code": "func changePossibilitiesBottomUp(amount: Int, denominations: [Int]) -> Int {\n    \n    var waysOfDoingNCents = Array(repeating: 0, count: amount + 1) // array of zeros from 0..amount\n    waysOfDoingNCents[0] = 1\n    \n    for coin in denominations {\n        if coin &lt; amount {\n            for higherAmount in coin...amount {\n                let higherAmountRemainder = higherAmount - coin\n                waysOfDoingNCents[higherAmount] += waysOfDoingNCents[higherAmountRemainder]\n            }\n        }\n    }\n    \n    return waysOfDoingNCents[amount]\n}", "tests": "for (i, amount) in amounts.enumerated() {\n    try assertEqual(changePossibilitiesBottomUp(amount: amount, denominations: denominations[i]), outputs[i])\n}"}, "ruby": {"code": "def change_possibilities_bottom_up(amount, denominations)\n    ways_of_doing_n_cents = [0] * (amount + 1)\n    ways_of_doing_n_cents[0] = 1\n\n    denominations.each do |coin|\n        (coin..amount).each do |higher_amount|\n            higher_amount_remainder = higher_amount - coin\n            ways_of_doing_n_cents[higher_amount] += ways_of_doing_n_cents[higher_amount_remainder]\n        end\n    end\n\n    return ways_of_doing_n_cents[amount]\nend", "tests": "testInputAndOutputLists(method(:change_possibilities_bottom_up), tests, true)"}, "csharp": {"code": "public int ChangePossibilitiesBottomUp(int amount, int[] denominations) \n{\n    int[] waysOfDoingNCents = new int[amount + 1]; // Array of zeros from 0..amount\n    waysOfDoingNCents[0] = 1;\n\n    foreach (int coin in denominations)\n    {\n        for (int higherAmount = coin; higherAmount &lt; amount + 1; higherAmount++)\n        {\n            int higherAmountRemainder = higherAmount - coin;\n            waysOfDoingNCents[higherAmount] += waysOfDoingNCents[higherAmountRemainder];\n        }\n    }\n\n    return waysOfDoingNCents[amount];\n}", "tests": "for (int i = 0; i<amounts.Length; i++)\n{\n    AssertEqual(ChangePossibilitiesBottomUp(amounts[i], denominations[i]), outputs[i]);\n}"}, "python": {"code": "def change_possibilities_bottom_up(amount, denominations):\n    ways_of_doing_n_cents = [0] * (amount + 1)\n    ways_of_doing_n_cents[0] = 1\n\n    for coin in denominations:\n        for higher_amount in xrange(coin, amount + 1):\n            higher_amount_remainder = higher_amount - coin\n            ways_of_doing_n_cents[higher_amount] += ways_of_doing_n_cents[higher_amount_remainder]\n\n    return ways_of_doing_n_cents[amount]", "tests": "testInputAndOutputLists(change_possibilities_bottom_up, tests, True)"}}, "setup": {"java": "int[] amounts = new int[]{\n    10,\n    10,\n    1\n};\n\nint[][] denominations = new int[][]{\n    {5},\n    {2, 4},\n    {17}\n};\n\nint[] outputs = new int[]{\n    1,\n    3,\n    0\n};", "cpp": "const vector<int> amounts {\n    10,\n    10,\n    1\n};\n\nconst vector<vector<int>> denominations {\n    vector<int>{5},\n    vector<int>{2, 4},\n    vector<int>{17}\n};\n\nconst vector<size_t> outputs {\n    1,\n    3,\n    0\n};", "c": "const int amounts[3] = {\n    10,\n    10,\n    1\n};\n\nconst size_t amountsLength = 3;\n\nconst int denominations[3][2] = {\n    {5},\n    {2, 4},\n    {17}\n};\n\nconst size_t denominationsLength[3] = {\n    1,\n    2,\n    1\n};\n\nconst int outputs[3] = {\n    1,\n    3,\n    0\n};", "javascript": "var tests = [\n    [[10, [5]], 1],\n    [[10, [2, 4]], 3],\n    [[1, [17]], 0],\n];", "swift": "let amounts = [10, 10, 1]\n\nlet denominations = [\n    [5],\n    [2, 4],\n    [17]\n]\n\nlet outputs = [1, 3, 0]", "ruby": "tests = [\n    [[10, [5]], 1],\n    [[10, [2, 4]], 3],\n    [[1, [17]], 0],\n]", "csharp": "int[] amounts = new[]\n{\n    10,\n    10,\n    1\n};\n\nint[][] denominations = new int[][]\n{\n    new[] {5},\n    new[] {2, 4},\n    new[] {17}\n};\n\nint[] outputs = new[]\n{\n    1,\n    3,\n    0\n};", "python": "tests = [\n    [[10, [5]], 1],\n    [[10, [2, 4]], 3],\n    [[1, [17]], 0],\n]"}, "question__coin__ways-of-doing-n-cents-with-one-two": {"snake": "ways_of_doing_n_cents_1_2[5] = ways_of_doing_n_cents_1[5] + ways_of_doing_n_cents_1_2[5-2]", "camel": "waysOfDoingNCents1And2[5] = waysOfDoingNCents1[5] + waysOfDoingNCents1And2[5-2]"}, "question__coin__change-possibilities-top-down-recursive": {"java": {"code": "public int changePossibilitiesTopDown(int amountLeft, int[] denominations) {\n    return changePossibilitiesTopDown(amountLeft, denominations, 0);\n}\n\npublic int changePossibilitiesTopDown(int amountLeft, int[] denominations, int currentIndex) {\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft == 0) return 1;\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) return 0;\n\n    // we're out of denominations\n    if (currentIndex == denominations.length) return 0;\n\n    System.out.println(\"checking ways to make \" + amountLeft + \" with \"\n        + Arrays.toString(Arrays.copyOfRange(denominations, currentIndex, denominations.length)));\n\n    // choose a current coin\n    int currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    int numPossibilities = 0;\n    while (amountLeft >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft,\n            denominations, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    return numPossibilities;\n}", "tests": "for (int i = 0; i < amounts.length; i++) {\n    assertEqual(t.changePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "cpp": {"code": "size_t changePossibilitiesTopDown(int amountLeft,\n        const vector&lt;int>& denominations,\n        size_t currentIndex = 0)\n{\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft == 0) {\n        return 1;\n    }\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) {\n        return 0;\n    }\n\n    // we're out of denominations\n    if (currentIndex == denominations.size()) {\n        return 0;\n    }\n\n    cout &lt;&lt; \"checking ways to make \" &lt;&lt; amountLeft &lt;&lt; \" with [\";\n    for (size_t i = currentIndex; i &lt; denominations.size(); ++i) {\n        if (i > currentIndex) {\n            cout &lt;&lt; \", \";\n        }\n        cout &lt;&lt; denominations[i];\n    }\n    cout &lt;&lt; \"]\" &lt;&lt; endl;\n\n    // choose a current coin\n    int currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    size_t numPossibilities = 0;\n    while (amountLeft >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft,\n            denominations, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    return numPossibilities;\n}", "tests": "for (size_t i = 0; i < amounts.size(); ++i) {\n    assertEqual(changePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "c": {"code": "size_t changePossibilitiesTopDown(int amountLeft, const int *denominations,\n                                  size_t denominationsLength, size_t currentIndex)\n{\n    size_t i;\n    size_t numPossibilities = 0;\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft == 0) {\n        return 1;\n    }\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) {\n        return 0;\n    }\n\n    // we're out of denominations\n    if (currentIndex == denominationsLength) {\n        return 0;\n    }\n\n    printf(\"checking ways to make %d with [\", amountLeft);\n    for (i = currentIndex; i &lt; denominationsLength; i++) {\n        if (i > currentIndex) {\n            printf(\", \");\n        }\n        printf(\"%d\", denominations[i]);\n    }\n    printf(\"]\\n\");\n\n    // choose a current coin\n    int currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    while (amountLeft >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft, denominations,\n                                                       denominationsLength, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    return numPossibilities;\n}", "tests": "{\n    size_t i;\n\n    for (i = 0; i < amountsLength; i++) {\n        size_t currentIndex = 0;\n        int numPossibilities = changePossibilitiesTopDown(amounts[i], denominations[i],\n                                                          denominationsLength[i], currentIndex);\n        ASSERT(numPossibilities == outputs[i]);\n    }\n}"}, "javascript": {"code": "function changePossibilitiesTopDown(amountLeft, denominations, currentIndex) {\n    currentIndex = currentIndex || 0;\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft === 0) return 1;\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) return 0;\n\n    // we're out of denominations\n    if (currentIndex === denominations.length) return 0;\n\n    console.log('checking ways to make ' + amountLeft + ' with ' + denominations.slice(currentIndex));\n\n    // choose a current coin\n    var currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    var numPossibilities = 0;\n    while (amountLeft >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft,\n            denominations, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    return numPossibilities;\n}", "tests": "testInputAndOutputLists(changePossibilitiesTopDown, tests, true);"}, "swift": {"code": "func changePossibilitiesTopDown(amountLeft: Int, denominations: [Int]) -> Int {\n    return changePossibilitiesTopDown(amountLeft: amountLeft, denominations: denominations, currentIndex: 0)\n}\n\nfunc changePossibilitiesTopDown(amountLeft: Int, denominations: [Int], currentIndex: Int) -> Int {\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if amountLeft == 0 {\n        return 1\n    }\n\n    // we overshot the amount left (used too many coins)\n    if amountLeft &lt; 0 {\n        return 0\n    }\n\n    // we're out of denominations\n    if currentIndex == denominations.count {\n        return 0\n    }\n\n    print(\"checking ways to make \\(amountLeft) with \\(denominations[currentIndex..&lt;denominations.count])\")\n\n    // choose a current coin\n    let currentCoin = denominations[currentIndex]\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    var numPossibilities = 0\n    var amountLeftInner = amountLeft\n    while (amountLeftInner >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft: amountLeftInner, denominations: denominations, \n                                                       currentIndex: currentIndex + 1)\n        amountLeftInner -= currentCoin\n    }\n\n    return numPossibilities\n}", "tests": "for (i, amount) in amounts.enumerated() {\n    try assertEqual(changePossibilitiesTopDown(amountLeft: amount, denominations: denominations[i]), outputs[i])\n}"}, "ruby": {"code": "def change_possibilities_top_down(amount_left, denominations, current_index=0)\n\n    # base cases:\n    # we hit the amount spot on. yes!\n    return 1 if amount_left == 0\n\n    # we overshot the amount left (used too many coins)\n    return 0 if amount_left &lt; 0\n\n    # we're out of denominations\n    return 0 if current_index == denominations.length\n\n    puts \"checking ways to make #{amount_left} with #{denominations[current_index..-1]}\"\n\n    # choose a current coin\n    current_coin = denominations[current_index]\n\n    # see how many possibilities we can get\n    # for each number of times to use current_coin\n    num_possibilities = 0\n    while amount_left >= 0\n        num_possibilities += change_possibilities_top_down(amount_left, denominations, current_index + 1)\n        amount_left -= current_coin\n    end\n\n    return num_possibilities\nend", "tests": "testInputAndOutputLists(method(:change_possibilities_top_down), tests, true)"}, "csharp": {"code": "using System.Linq;\n\npublic int ChangePossibilitiesTopDown(int amountLeft, int[] denominations, int currentIndex = 0)\n{\n    // Base cases:\n    // We hit the amount spot on. Yes!\n    if (amountLeft == 0) {\n        return 1;\n    }\n\n    // We overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0)\n    {\n        return 0;\n    }\n\n    // We're out of denominations\n    if (currentIndex == denominations.Length)\n    {\n        return 0;\n    }\n\n    // Print out actual part of array\n    Console.Write($\"checking ways to make {amountLeft} with \"); \n    Console.WriteLine($\"[{string.Join(\", \", denominations.Skip(currentIndex).Take(denominations.Length - currentIndex))}]\");\n\n    // Choose a current coin\n    int currentCoin = denominations[currentIndex];\n\n    // See how many possibilities we can get\n    // for each number of times to use currentCoin\n    int numPossibilities = 0;\n    while (amountLeft >= 0)\n    {\n        numPossibilities += ChangePossibilitiesTopDown(amountLeft, denominations, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    return numPossibilities;\n}", "tests": "for (int i = 0; i < amounts.Length; i++)\n{\n    AssertEqual(ChangePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "python": {"code": "def change_possibilities_top_down(amount_left, denominations, current_index=0):\n\n    # base cases:\n    # we hit the amount spot on. yes!\n    if amount_left == 0: return 1\n\n    # we overshot the amount left (used too many coins)\n    if amount_left &lt; 0: return 0\n\n    # we're out of denominations\n    if current_index == len(denominations): return 0\n\n    print \"checking ways to make %i with %s\" % (amount_left, denominations[current_index:])\n\n    # choose a current coin\n    current_coin = denominations[current_index]\n\n    # see how many possibilities we can get\n    # for each number of times to use current_coin\n    num_possibilities = 0\n    while amount_left >= 0:\n        num_possibilities += change_possibilities_top_down(amount_left, denominations, current_index + 1)\n        amount_left -= current_coin\n\n    return num_possibilities", "tests": "testInputAndOutputLists(change_possibilities_top_down, tests, True)"}}, "question__coin__ways-of-doing-n-cents-two": {"java": "int[] waysOfDoingNCents1And2 = new int[]{\n    1,    // 0c:  no change\n    1,    // 1c:  no change\n    1+1,  // 2c:  new [(2)]\n    1+1,  // 3c:  new [(2,1)]\n    1+2,  // 4c:  new [(2,1,1), (2,2)]\n    1+2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n};", "cpp": "vector&lt;int> waysOfDoingNCents1And2 {\n    1,    // 0c:  no change\n    1,    // 1c:  no change\n    1+1,  // 2c:  new [(2)]\n    1+1,  // 3c:  new [(2,1)]\n    1+2,  // 4c:  new [(2,1,1), (2,2)]\n    1+2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n};", "c": "int waysOfDoingNCents1And2[amount + 1] = {\n    1,      // 0c:  no change\n    1,      // 1c:  no change\n    1 + 1,  // 2c:  new [(2)]\n    1 + 1,  // 3c:  new [(2,1)]\n    1 + 2,  // 4c:  new [(2,1,1), (2,2)]\n    1 + 2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n};", "javascript": "var waysOfDoingNCents1And2 = [\n    1,    // 0c:  no change\n    1,    // 1c:  no change\n    1+1,  // 2c:  new [(2)]\n    1+1,  // 3c:  new [(2,1)]\n    1+2,  // 4c:  new [(2,1,1), (2,2)]\n    1+2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n];", "swift": "let waysOfDoingNCents1And2 = [\n    1,      // 0c:  no change\n    1,      // 1c:  no change\n    1 + 1,  // 2c:  new [(2)]\n    1 + 1,  // 3c:  new [(2,1)]\n    1 + 2,  // 4c:  new [(2,1,1), (2,2)]\n    1 + 2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n]", "ruby": "ways_of_doing_n_cents_1_2 = [\n    1,    # 0c:  no change\n    1,    # 1c:  no change\n    1+1,  # 2c:  new [(2)]\n    1+1,  # 3c:  new [(2,1)]\n    1+2,  # 4c:  new [(2,1,1), (2,2)]\n    1+2,  # 5c:  new [(2,1,1,1), (2,2,1)]\n]", "csharp": "int[] waysOfDoingNCents1And2 = new[]\n{\n    1,    // 0c:  no change\n    1,    // 1c:  no change\n    1+1,  // 2c:  new [(2)]\n    1+1,  // 3c:  new [(2,1)]\n    1+2,  // 4c:  new [(2,1,1), (2,2)]\n    1+2,  // 5c:  new [(2,1,1,1), (2,2,1)]\n};", "python": "ways_of_doing_n_cents_1_2 = [\n    1,    # 0c:  no change\n    1,    # 1c:  no change\n    1+1,  # 2c:  new [(2)]\n    1+1,  # 3c:  new [(2,1)]\n    1+2,  # 4c:  new [(2,1,1), (2,2)]\n    1+2,  # 5c:  new [(2,1,1,1), (2,2,1)]\n]"}, "question__coin__change-possibilities-top-down-memo": {"java": {"code": "class Change {\n\n    Map&lt;String, Integer> memo = new HashMap&lt;String, Integer>();\n    int[] denominations;\n\n    public int changePossibilitiesTopDown(int amountLeft, int[] denominations) {\n        return changePossibilitiesTopDown(amountLeft, denominations, 0);\n    }\n\n    public int changePossibilitiesTopDown(int amountLeft, int[] denominations, int currentIndex) {\n\n        // check our memo and short-circuit if we've already solved this one\n        String memoKey = amountLeft + \" \" + currentIndex;\n        if (memo.containsKey(memoKey)) {\n            System.out.println(\"grabbing memo[\" + memoKey + \"]\");\n            return memo.get(memoKey);\n        }\n\n        // base cases:\n        // we hit the amount spot on. yes!\n        if (amountLeft == 0) return 1;\n\n        // we overshot the amount left (used too many coins)\n        if (amountLeft &lt; 0) return 0;\n\n        // we're out of denominations\n        if (currentIndex == denominations.length) return 0;\n\n        System.out.println(\"checking ways to make \" + amountLeft + \" with \"\n            + Arrays.toString(Arrays.copyOfRange(denominations, currentIndex, denominations.length)));\n\n        // choose a current coin\n        int currentCoin = denominations[currentIndex];\n\n        // see how many possibilities we can get\n        // for each number of times to use currentCoin\n        int numPossibilities = 0;\n        while (amountLeft >= 0) {\n            numPossibilities += changePossibilitiesTopDown(amountLeft,\n                denominations, currentIndex + 1);\n            amountLeft -= currentCoin;\n        }\n\n        // save the answer in our memo so we don't compute it again\n        memo.put(memoKey, numPossibilities);\n        return numPossibilities;\n    }\n}", "tests": "for (int i = 0; i < amounts.length; i++) {\n    assertEqual(t.new Change().changePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "cpp": {"code": "class Change\n{\nprivate:\n    unordered_map&lt;string, size_t> memo_;\n\npublic:\n\n    size_t changePossibilitiesTopDown(int amountLeft,\n            const vector&lt;int>& denominations,\n            size_t currentIndex = 0)\n    {\n        // check our memo and short-circuit if we've already solved this one\n        ostringstream oss;\n        oss &lt;&lt; amountLeft &lt;&lt; \", \" &lt;&lt; currentIndex;\n        string memoKey = oss.str();\n        auto it = memo_.find(memoKey);\n        if (it != memo_.end()) {\n            cout &lt;&lt; \"grabbing memo[\" &lt;&lt; amountLeft &lt;&lt; \", \" \n                &lt;&lt; currentIndex &lt;&lt; \"]\" &lt;&lt; endl;\n            return it->second;\n        }\n\n        // base cases:\n        // we hit the amount spot on. yes!\n        if (amountLeft == 0) {\n            return 1;\n        }\n\n        // we overshot the amount left (used too many coins)\n        if (amountLeft &lt; 0) {\n            return 0;\n        }\n\n        // we're out of denominations\n        if (currentIndex == denominations.size()) {\n            return 0;\n        }\n\n        cout &lt;&lt; \"checking ways to make \" &lt;&lt; amountLeft &lt;&lt; \" with [\";\n        for (size_t i = currentIndex; i &lt; denominations.size(); ++i) {\n            if (i > currentIndex) {\n                cout &lt;&lt; \", \";\n            }\n            cout &lt;&lt; denominations[i];\n        }\n        cout &lt;&lt; \"]\" &lt;&lt; endl;\n\n        // choose a current coin\n        int currentCoin = denominations[currentIndex];\n\n        // see how many possibilities we can get\n        // for each number of times to use currentCoin\n        size_t numPossibilities = 0;\n        while (amountLeft >= 0) {\n            numPossibilities += changePossibilitiesTopDown(amountLeft,\n                denominations, currentIndex + 1);\n            amountLeft -= currentCoin;\n        }\n\n        // save the answer in our memo so we don't compute it again\n        memo_.insert(make_pair(memoKey, numPossibilities));\n        return numPossibilities;\n    }\n\n};", "tests": "for (size_t i = 0; i < amounts.size(); ++i) {\n    Change change;\n    assertEqual(change.changePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "c": {"code": "// Assume we've already implemented a hash table\n// that maps string keys to values\ntypedef struct HashTable HashTable;\nHashTable * hashTableInsert(HashTable *hashTable, const char *key,\n                            void *value, size_t valueSize);\nvoid * hashTableFind(HashTable *hashTable, const char *key);\nvoid hashTableFree(HashTable *hashTable);\n\nsize_t changePossibilitiesTopDown(int amountLeft, const int *denominations,\n                                  size_t denominationsLength, size_t currentIndex,\n                                  HashTable **memo)\n{\n    char memoKey[128];\n    int *value;\n    int numPossibilities;\n    size_t i;\n\n    // check our memo and short-circuit if we've already solved this one\n    snprintf(memoKey, sizeof(memoKey), \"%d %lu\", amountLeft, currentIndex);\n    value = (int*) hashTableFind(*memo, memoKey);\n    if (value != NULL) {\n        printf(\"grabbing memo[%s]\\n\", memoKey);\n        return *value;\n    }\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft == 0) {\n        return 1;\n    }\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) {\n        return 0;\n    }\n\n    // we're out of denominations\n    if (currentIndex == denominationsLength) {\n        return 0;\n    }\n\n    printf(\"checking ways to make %d with [\", amountLeft);\n    for (i = currentIndex; i &lt; denominationsLength; i++) {\n        if (i > currentIndex) {\n            printf(\", \");\n        }\n        printf(\"%d\", denominations[i]);\n    }\n    printf(\"]\\n\");\n\n    // choose a current coin\n    int currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    numPossibilities = 0;\n    while (amountLeft >= 0) {\n        numPossibilities += changePossibilitiesTopDown(amountLeft, denominations,\n                                                       denominationsLength, currentIndex + 1, memo);\n        amountLeft -= currentCoin;\n    }\n\n    // save the answer in our memo so we don't compute it again\n    *memo = hashTableInsert(*memo, memoKey, &numPossibilities, sizeof(int));\n\n    return numPossibilities;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < amountsLength; i++) {\n        HashTable *memo = NULL;\n        size_t currentIndex = 0;\n        int numPossibilities = changePossibilitiesTopDown(amounts[i], denominations[i],\n                                                          denominationsLength[i], currentIndex, &memo);\n        hashTableFree(memo);\n        ASSERT(numPossibilities == outputs[i]);\n    }\n}"}, "javascript": {"code": "function Change() {\n    this.memo = {};\n}\n\nChange.prototype.changePossibilitiesTopDown = function(amountLeft, denominations, currentIndex) {\n    currentIndex = currentIndex || 0;\n\n    // check our memo and short-circuit if we've already solved this one\n    var memoKey = String([amountLeft, currentIndex]);\n    if (this.memo.hasOwnProperty(memoKey)) {\n        console.log('grabbing memo[' + memoKey + ']');\n        return this.memo[memoKey];\n    }\n\n    // base cases:\n    // we hit the amount spot on. yes!\n    if (amountLeft === 0) return 1;\n\n    // we overshot the amount left (used too many coins)\n    if (amountLeft &lt; 0) return 0;\n\n    // we're out of denominations\n    if (currentIndex === denominations.length) return 0;\n\n    console.log('checking ways to make ' + amountLeft + ' with ' + denominations.slice(currentIndex));\n\n    // choose a current coin\n    var currentCoin = denominations[currentIndex];\n\n    // see how many possibilities we can get\n    // for each number of times to use currentCoin\n    var numPossibilities = 0;\n    while (amountLeft >= 0) {\n        numPossibilities += this.changePossibilitiesTopDown(amountLeft, denominations, currentIndex + 1);\n        amountLeft -= currentCoin;\n    }\n\n    // save the answer in our memo so we don't compute it again\n    this.memo[memoKey] = numPossibilities;\n    return numPossibilities;\n};", "tests": "// manually testing (not using testInputAndOutputLists) because\n// we need `this` to be the class not the window, and so the\n// same memo isn't used for different denominations\n\ntests.forEach(function(test) {\n    assertEqual(new Change().changePossibilitiesTopDown(test[0][0], test[0][1]), test[1]);\n});"}, "swift": {"code": "class Change {\n    \n    private var memo: [String: Int] = [:]\n    private var denominations: [Int] = []\n    \n    func changePossibilitiesTopDown(amountLeft: Int, denominations: [Int]) -> Int {\n        return changePossibilitiesTopDown(amountLeft: amountLeft, denominations: denominations, currentIndex: 0)\n    }\n    \n    func changePossibilitiesTopDown(amountLeft: Int, denominations: [Int], currentIndex: Int) -> Int {\n        \n        // check our memo and short-circuit if we've already solved this one\n        let memoKey = \"\\(amountLeft, currentIndex)\"\n        if let memoValue = memo[memoKey] {\n            print(\"grabbing memo \\(memoKey)\")\n            return memoValue\n        }\n        \n        // base cases:\n        // we hit the amount spot on. yes!\n        if amountLeft == 0 {\n            return 1\n        }\n        \n        // we overshot the amount left (used too many coins)\n        if amountLeft &lt; 0 {\n            return 0\n        }\n        \n        // we're out of denominations\n        if currentIndex == denominations.count {\n            return 0\n        }\n        \n        print(\"checking ways to make \\(amountLeft) with \\(denominations[currentIndex..&lt;denominations.count])\")\n        \n        // choose a current coin\n        let currentCoin = denominations[currentIndex]\n        \n        // see how many possibilities we can get\n        // for each number of times to use currentCoin\n        var numPossibilities = 0\n        var amountLeftInner = amountLeft\n        while (amountLeftInner >= 0) {\n            numPossibilities += changePossibilitiesTopDown(amountLeft: amountLeftInner, denominations: denominations, \n                                                           currentIndex: currentIndex + 1)\n            amountLeftInner -= currentCoin\n        }\n        \n        // save the answer in our memo so we don't compute it again\n        memo[memoKey] = numPossibilities\n        \n        return numPossibilities\n    }\n}", "tests": "for (i, amount) in amounts.enumerated() {\n    try assertEqual(Change().changePossibilitiesTopDown(amountLeft: amount, denominations: denominations[i]), outputs[i])\n}"}, "ruby": {"code": "class Change\n    def initialize\n        @memo = {}\n    end\n\n    def change_possibilities_top_down(amount_left, denominations, current_index=0)\n\n        # check our memo and short-circuit if we've already solved this one\n        memo_key = [amount_left, current_index].to_s\n        if @memo.include? memo_key\n            puts \"grabbing memo[#{memo_key}]\"\n            return @memo[memo_key]\n        end\n\n        # base cases:\n        # we hit the amount spot on. yes!\n        return 1 if amount_left == 0\n\n        # we overshot the amount left (used too many coins)\n        return 0 if amount_left &lt; 0\n\n        # we're out of denominations\n        return 0 if current_index == denominations.length\n\n        puts \"checking ways to make #{amount_left} with #{denominations[current_index..-1]}\"\n\n        # choose a current coin\n        current_coin = denominations[current_index]\n\n        # see how many possibilities we can get\n        # for each number of times to use current_coin\n        num_possibilities = 0\n        while amount_left >= 0\n            num_possibilities += change_possibilities_top_down(amount_left, denominations, current_index + 1)\n            amount_left -= current_coin\n        end\n\n        # save the answer in our memo so we don't compute it again\n        @memo[memo_key] = num_possibilities\n        return num_possibilities\n    end\nend", "tests": "# test individually so the same memo isn't used for different denominations\n\ntests.each do |test|\n    change_possibilities_top_down_method = Change.new().method(:change_possibilities_top_down)\n    testInputAndOutputLists(change_possibilities_top_down_method, [test], true)\nend"}, "csharp": {"code": "using System.Collections.Generic;\nusing System.Linq;\n\nclass Change \n{\n    private Dictionary&lt;string, int> _memo = new Dictionary&lt;string, int>();\n\n    public int ChangePossibilitiesTopDown(int amountLeft, int[] denominations, int currentIndex = 0)\n    {\n        // Check our memo and short-circuit if we've already solved this one\n        string memoKey = $\"{amountLeft} {currentIndex}\";\n        if (_memo.ContainsKey(memoKey)) \n        {\n            Console.WriteLine($\"grabbing memo[{memoKey}]\");\n            return _memo[memoKey];\n        }\n\n        // Base cases:\n        // We hit the amount spot on. Yes!\n        if (amountLeft == 0)\n        {\n            return 1;\n        }\n\n        // We overshot the amount left (used too many coins)\n        if (amountLeft &lt; 0)\n        {\n            return 0;\n        }\n\n        // We're out of denominations\n        if (currentIndex == denominations.Length)\n        {\n            return 0;\n        }\n\n        // Print out actual part of array\n        Console.Write($\"checking ways to make {amountLeft} with \"); \n        Console.WriteLine($\"[{string.Join(\", \", denominations.Skip(currentIndex).Take(denominations.Length - currentIndex))}]\");\n\n        // Choose a current coin\n        int currentCoin = denominations[currentIndex];\n\n        // See how many possibilities we can get\n        // for each number of times to use currentCoin\n        int numPossibilities = 0;\n        while (amountLeft >= 0) \n        {\n            numPossibilities += ChangePossibilitiesTopDown(amountLeft, denominations, currentIndex + 1);\n            amountLeft -= currentCoin;\n        }\n\n        // Save the answer in our memo, so we don't compute it again\n        _memo.Add(memoKey, numPossibilities);\n        return numPossibilities;\n    }\n}", "tests": "for (int i = 0; i < amounts.Length; i++)\n{\n    var change = new Change();\n    AssertEqual(change.ChangePossibilitiesTopDown(amounts[i], denominations[i]), outputs[i]);\n}"}, "python": {"code": "class Change:\n    def __init__(self):\n        self.memo = {}\n\n    def change_possibilities_top_down(self, amount_left, denominations, current_index=0):\n\n        # check our memo and short-circuit if we've already solved this one\n        memo_key = str((amount_left, current_index))\n        if memo_key in self.memo:\n            print \"grabbing memo[%s]\" % memo_key\n            return self.memo[memo_key]\n\n        # base cases:\n        # we hit the amount spot on. yes!\n        if amount_left == 0: return 1\n\n        # we overshot the amount left (used too many coins)\n        if amount_left &lt; 0: return 0\n\n        # we're out of denominations\n        if current_index == len(denominations): return 0\n\n        print \"checking ways to make %i with %s\" % (amount_left, denominations[current_index:])\n\n        # choose a current coin\n        current_coin = denominations[current_index]\n\n        # see how many possibilities we can get\n        # for each number of times to use current_coin\n        num_possibilities = 0\n        while amount_left >= 0:\n            num_possibilities += self.change_possibilities_top_down(amount_left, denominations, current_index + 1)\n            amount_left -= current_coin\n\n        # save the answer in our memo so we don't compute it again\n        self.memo[memo_key] = num_possibilities\n        return num_possibilities", "tests": "# test individually so the same memo isn't used for different denominations\n\nfor test in tests:\n    testInputAndOutputLists(Change().change_possibilities_top_down, [test], True)"}}, "question__coin__num-ways-pseudocode": {"java": "public numberOfWays(amount, denominations) {\n    answer = 0;\n    for ( denomination : denominations ) {\n        for ( numTimesToUseDenomination : possibleNumTimesToUseDenominationWithoutOvershootingAmount ) {\n            answer += numberOfWays(amountRemaining, otherDenominations);\n        }\n    }\n    return answer;\n}", "cpp": "int numberOfWays(amount, denominations) {\n    answer = 0;\n    for ( denomination : denominations ) {\n        for ( numTimesToUseDenomination : possibleNumTimesToUseDenominationWithoutOvershootingAmount ) {\n            answer += numberOfWays(amountRemaining, otherDenominations);\n        }\n    }\n    return answer;\n}", "c": "int numberOfWays(amount, denominations) {\n    answer = 0;\n    for (i = 0; i &lt; denominationsLength; i++) {\n        for (j = 0; j &lt; possibleNumTimesToUseDenominationWithoutOvershootingAmountLength; j++) {\n            otherDenominations = possibleNumTimesToUseDenominationWithoutOvershootingAmount[j];\n            answer += numberOfWays(amountRemaining, otherDenominations);\n        }\n    }\n    return answer;\n}", "javascript": "function numberOfWays(amount, denominations) {\n    answer = 0;\n    denominations.forEach(denomination) {\n        possibleNumTimesToUseDenominationWithoutOvershootingAmount.forEach(numTimesToUseDenomination) {\n            answer += numberOfWays(amountRemaining, otherDenominations);\n        }\n    }\n    return answer;\n}", "swift": "func numberOfWays(amount: Int, denominations: [Int]) {\n    var answer = 0\n    \n    for  denomination in denominations  {\n        for numTimesToUseDenomination in possibleNumTimesToUseDenominationWithoutOvershootingAmount {\n            answer += numberOfWays(amountRemaining, otherDenominations)\n        }\n    }\n    return answer\n}", "ruby": "def number_of_ways(amount, denominations)\n    answer = 0\n    for each denomination in denominations\n        for each num_times_to_use_denomination in possible_num_times_to_use_denomination_without_overshooting_amount\n            answer += number_of_ways(amount_remaining, other_denominations)\n        end\n    end\n    return answer\nend", "csharp": "public NumberOfWays(amount, denominations)\n{\n    answer = 0;\n    foreach (denomination in denominations)\n    {\n        foreach (numTimesToUseDenomination in possibleNumTimesToUseDenominationWithoutOvershootingAmount)\n        {\n            answer += numberOfWays(amountRemaining, otherDenominations);\n        }\n    }\n    return answer;\n}", "python": "def number_of_ways(amount, denominations):\n    answer = 0\n    for each denomination in denominations:\n        for each num_times_to_use_denomination in possible_num_times_to_use_denomination_without_overshooting_amount:\n            answer += number_of_ways(amount_remaining, other_denominations)\n    return answer"}, "question__coin__change-possibilities-top-down-recursive-print": {"java": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4", "cpp": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4", "c": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4", "javascript": "\u276f changePossibilitiesTopDown(4, [1, 2, 3]);\n  checking ways to make 4 with 1,2,3\n  checking ways to make 4 with 2,3\n  checking ways to make 4 with 3\n  checking ways to make 2 with 3\n  checking ways to make 3 with 2,3\n  checking ways to make 3 with 3\n  checking ways to make 1 with 3\n  checking ways to make 2 with 2,3\n  checking ways to make 2 with 3\n  checking ways to make 1 with 2,3\n  checking ways to make 1 with 3\n\u276e 4", "swift": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4", "ruby": "001:0> change_possibilities_top_down(4, [1, 2, 3])\nchecking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n=> 4", "csharp": "checking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4", "python": ">>> change_possibilities_top_down(4, [1, 2, 3])\nchecking ways to make 4 with [1, 2, 3]\nchecking ways to make 4 with [2, 3]\nchecking ways to make 4 with [3]\nchecking ways to make 2 with [3]\nchecking ways to make 3 with [2, 3]\nchecking ways to make 3 with [3]\nchecking ways to make 1 with [3]\nchecking ways to make 2 with [2, 3]\nchecking ways to make 2 with [3]\nchecking ways to make 1 with [2, 3]\nchecking ways to make 1 with [3]\n4"}}, "code-inlines": {"question__coin__ways-of-doing-n-cents-one-two-of-three": {"snake": "ways_of_doing_n_cents_1_2[3]", "camel": "waysOfDoingNCents1And2[3]"}, "question__coin__self-memo": {"java": "memo", "cpp": "memo_", "c": "memo", "javascript": "this.memo", "ruby": "@memo", "csharp": "_memo", "python": "self.memo"}, "question__coin__ways-of-doing-n-cents-one-two-of-five-minus-two-minus-two": {"snake": "ways_of_doing_n_cents_1_2[5 - 2 - 2]", "camel": "waysOfDoingNCents1And2[5 - 2 - 2]"}, "question__coin__ways-of-doing-n-cents-of-higher-amount-minus-coin": {"snake": "ways_of_doing_n_cents[higher_amount - coin]", "camel": "waysOfDoingNCents[higherAmount - coin]"}, "question__coin__ways-of-doing-n-cents-one-two-of-one": {"snake": "ways_of_doing_n_cents_1_2[1]", "camel": "waysOfDoingNCents1And2[1]"}, "question__coin__three-in-array": {"default": "[3]"}, "question__coin__ways-of-doing-n-cents-one-two-of-k": {"snake": "ways_of_doing_n_cents_1_2[k]", "camel": "waysOfDoingNCents1And2[k]"}, "question__coin__ways-of-doing-n-cents-one-two-of-five": {"snake": "ways_of_doing_n_cents_1_2[5]", "camel": "waysOfDoingNCents1And2[5]"}, "question__coin__two": {"default": "2"}, "question__coin__ways-of-doing-n-cents-k": {"snake": "ways_of_doing_n_cents[k]", "camel": "waysOfDoingNCents[k]"}, "question__coin__ways-of-doing-n-cents-one-of-five": {"snake": "ways_of_doing_n_cents_1[5]", "camel": "waysOfDoingNCents1[5]"}}, "words": {"question__coin__print": {"java": "print", "cpp": "print", "c": "print", "javascript": "log", "ruby": "print", "python": "print", "default": "print"}, "question__coin__array-slicing-takes-space": {"java": "(Except we'd need to remove the line where we <span words=\"print\">print</span> \"checking ways to make...\" because making all those sub<span words=\"standard-list\">array</span>s will take <span complexity=\"m^2\"/> space!)", "cpp": "(Except we'd need to remove the line where we <span words=\"print\">print</span> \"checking ways to make...\" because printing all those sub<span words=\"standard-list\">vector</span>s will take <span complexity=\"m^2\"/> time!)", "c": "(Except we'd need to remove the line where we <span words=\"print\">print</span> \"checking ways to make...\" because printing all those sub<span words=\"standard-list\">array</span>s will take <span complexity=\"m^2\"/> time!)", "javascript": "(Except we'd need to remove the line where we <span words=\"print\">log</span> \"checking ways to make...\" because making all those sub<span words=\"standard-list\">array</span>s will take <span complexity=\"m^2\"/> space!)", "ruby": "(Except we'd need to remove the line where we <span words=\"print\">print</span> \"checking ways to make...\" because making all those sub<span words=\"standard-list\">array</span>s will take <span complexity=\"m^2\"/> space!)", "python": "(Except we'd need to remove the line where we <span words=\"print\">print</span> \"checking ways to make...\" because making all those sub<span words=\"standard-list\">list</span>s will take <span complexity=\"m^2\"/> space!)", "default": "(Except we'd need to remove the line where we <span words=\"print\"/> \"checking ways to make...\" because making all those sub<span words=\"standard-list\"/>s will take <span complexity=\"m^2\"/> space!)"}, "question__coin__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__coin__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/coin" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/coin" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/coin&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/coin" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/coin" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/coin&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./05.Making Change _ Interview Cake_files/jquery.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./05.Making Change _ Interview Cake_files/underscore-min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/angular-seo.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./05.Making Change _ Interview Cake_files/base.js"></script>

    
    <script src="./05.Making Change _ Interview Cake_files/prism.min.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/codemirror.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/python.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/ruby.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/javascript.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/clike.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/php.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/haskell.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./05.Making Change _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./05.Making Change _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./05.Making Change _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./05.Making Change _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="KT5yqHzXSg0z5V3LZ5eGIvBgeQxjv6JnhsuUIMKRoPigU0fRnAtZfeZYzFNMJkXC">
<div id="loading">
. . .
</div>


<link href="./05.Making Change _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default71574_provider" id="stripeXDM_default71574_provider" src="./05.Making Change _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./05.Making Change _ Interview Cake_files/saved_resource(1).html"></iframe></body></html>