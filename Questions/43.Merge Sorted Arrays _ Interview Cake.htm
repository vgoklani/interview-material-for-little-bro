<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0065)https://www.interviewcake.com/question/python/merge-sorted-arrays -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./43.Merge Sorted Arrays _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./43.Merge Sorted Arrays _ Interview Cake_files/visits"></script><script type="text/javascript" src="./43.Merge Sorted Arrays _ Interview Cake_files/track"></script><script type="text/javascript" src="./43.Merge Sorted Arrays _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./43.Merge Sorted Arrays _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./43.Merge Sorted Arrays _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":260}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/merge-sorted-arrays">
        <meta name="description" content="Write a function for consolidating cookie orders and taking over the world.">

        

        <meta property="og:title" content="Merge Sorted Arrays | Interview Cake">
        <meta property="og:description" content="Write a function for consolidating cookie orders and taking over the world.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/merge-sorted-arrays">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Merge Sorted Arrays | Interview Cake">
        <meta name="twitter:description" content="Write a function for consolidating cookie orders and taking over the world.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Merge Sorted Arrays | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./43.Merge Sorted Arrays _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./43.Merge Sorted Arrays _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./43.Merge Sorted Arrays _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./43.Merge Sorted Arrays _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./43.Merge Sorted Arrays _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./43.Merge Sorted Arrays _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./43.Merge Sorted Arrays _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./43.Merge Sorted Arrays _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./43.Merge Sorted Arrays _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="https://static.olark.com/jsclient/styles/artsy-albatross/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./43.Merge Sorted Arrays _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./43.Merge Sorted Arrays _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/merge-sorted-arrays" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/merge-sorted-arrays" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener" aria-describedby="tooltip827375">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip827375" style="top: 92px; left: 1353px; display: block;"><div class="tooltip-arrow" style="left: 68.2471%;"></div><div class="tooltip-inner">URL Shortener</div></div>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;merge-sorted-arrays&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Merge Sorted Arrays" data-meta_desc="Write a function for consolidating cookie orders and taking over the world." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="10" data-num-hints="13" data-num-gotchas="2" ng-init="setNumHints(13); setNumGotchas(2); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
In order to win the prize for most cookies sold, my friend Alice and I are going to merge our Girl Scout Cookies orders and enter as one unit.
</strong>
</p>
<p class="ng-scope">
Each order is represented by an "order id" (an integer).
</p>
<p class="ng-scope">
We have our lists of orders sorted numerically already, in <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s. Write a function to merge our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s of orders into one sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>.
</p>

<p class="ng-scope">
For example:
</p>
<div code-block="question__merge-sorted-arrays__example-input-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">my_list     <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>
alices_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> merge_lists<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> alices_list<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and space.
</p>
<p class="ng-scope">
If you're running a built-in sorting function, your algorithm probably takes <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time for that sort.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<strong>Think about edge cases!</strong> What happens when we've merged in all of the elements from one of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s but we still have elements to merge in from our other <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>?
</p>
</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We could simply concatenate (join together) the two <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s into one, then sort the result:
</p>

<div code-block="question__merge-sorted-arrays__concatenate-and-sort" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_sorted_lists</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>arr1 <span class="token operator">+</span> arr2<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
What would the time cost be?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span>, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the total length of our output <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span> (the sum of the lengths of our inputs).
</p>
<p class="ng-scope">
We can do better. With this algorithm, we're not really taking advantage of the fact that the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s are themselves <em>already sorted</em>. How can we save time by using this fact?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
A good general strategy for thinking about an algorithm is to try writing out a sample input and performing the operation by hand. If you're stuck, try that!
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Since our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s are sorted, we know they each have their smallest item in the 0th index. <strong>So the smallest item overall is in the 0th index of one of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s!</strong>
</p>

<p class="ng-scope">
<em>Which</em> 0th element is it? Whichever is smaller!
</p>

<p class="ng-scope">
To start, let's just write a function that chooses the <em>0th</em> element for our sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>.
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">

<div code-block="question__merge-sorted-arrays__choose-zeroeth-element" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_lists</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> alices_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># make a list big enough to fit the elements from both lists</span>
    merged_list_size <span class="token operator">=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span>
    merged_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> merged_list_size

    head_of_my_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    head_of_alices_list <span class="token operator">=</span> alices_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># case: 0th comes from my list</span>
    <span class="token keyword">if</span> head_of_my_list <span class="token operator">&lt;</span> head_of_alices_list<span class="token punctuation">:</span>
        merged_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_of_my_list

    <span class="token comment" spellcheck="true"># case: 0th comes from alices list</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        merged_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_of_alices_list

    <span class="token comment" spellcheck="true"># eventually we'll want to return the merged list</span>
    <span class="token keyword">return</span> merged_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Okay, good start! That works for finding the 0th element. Now how do we choose the next element?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's look at a sample input:
</p>

<div code-block="question__merge-sorted-arrays__sample-input" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># my_list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># alices_list</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
To start we took the 0th element from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span> and put it in the 0th slot in the output <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>:
</p>

<div code-block="question__merge-sorted-arrays__zeroeth-element-in-merged-array" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># my_list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># alices_list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># merged_list</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
We need to make sure we don't try to put that 1 in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span> again. We should mark it as "already merged" somehow. For now, we can just cross it out:
</p>

<div code-block="question__merge-sorted-arrays__zeroeth-index-crossed-out-in-alices-array" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># my_list</span>
<span class="token punctuation">[</span>x<span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># alices_list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># merged_list</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Or we could even imagine it's removed from the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>:
</p>

<div code-block="question__merge-sorted-arrays__zeroeth-element-removed-from-alices-array" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># my_list</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># alices_list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">,</span>  x<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># merged_list</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Now to get our next element we can use the same approach we used to get the 0th element—it's the smallest of the <em>earliest unmerged elements</em> in either <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>! In other words, it's the smaller of the leftmost elements in either <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>, assuming we've removed the elements we've already merged in.
</p>

<p class="ng-scope">
So in general we could say something like:
</p>

<ol class="ng-scope">
<li>
We'll start at the beginnings of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s, since the smallest elements will be there.
</li>
<li>
As we put items in our final <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span>, we'll keep track of the fact that they're "already merged."
</li>
<li>
At each step, each <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span> has a <em>first</em> "not-yet-merged" item.
</li>
<li>
At each step, the next item to put in the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span> is the smaller of those two "not-yet-merged" items!
</li>
</ol>

<p class="ng-scope">
Can you implement this in code?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">

<div code-block="question__merge-sorted-arrays__solution-before-edge-cases" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_lists</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> alices_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    merged_list_size <span class="token operator">=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span>
    merged_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> merged_list_size

    current_index_alices <span class="token operator">=</span> <span class="token number">0</span>
    current_index_mine <span class="token operator">=</span> <span class="token number">0</span>
    current_index_merged <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span> current_index_merged <span class="token operator">&lt;</span> merged_list_size<span class="token punctuation">:</span>
        first_unmerged_alices <span class="token operator">=</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span>
        first_unmerged_mine <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># case: next comes from my list</span>
        <span class="token keyword">if</span> first_unmerged_mine <span class="token operator">&lt;</span> first_unmerged_alices<span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> first_unmerged_mine
            current_index_mine <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># case: next comes from alice's list</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> first_unmerged_alices
            current_index_alices <span class="token operator">+=</span> <span class="token number">1</span>

        current_index_merged <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> merged_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Okay, this algorithm makes sense. To wrap up, we should think about edge cases and check for bugs. What edge cases should we worry about?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Here are some edge cases:
</p>

<ol class="ng-scope">
<li>
One or both of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s is 0 elements or 1 element
</li>
<li>
One of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s is longer than the other.
</li>
<li>
One of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s runs out of elements before we're done merging.
</li>
</ol>

<p class="ng-scope">
Actually, 3 will <em>always</em> happen. In the process of merging our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s, we'll certainly exhaust one before we exhaust the other.
</p>

<p class="ng-scope">
Does our function handle these cases correctly?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__edge-case-handling"><span class="ng-scope">We'll get </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merge-sorted-arrays__an-index-error"><span class="ng-scope">an IndexError</span></span><span class="ng-scope"> in all three cases!</span></span>
</p>

<p class="ng-scope">
How can we fix this?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
We can probably solve these cases at the same time. They're not so different—they just have to do with handling empty <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s.
</p>

<p class="ng-scope">
To start, we could treat each of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s being out of elements as a separate case to handle, in addition to the 2 cases we already have. So we have 4 cases total. Can you code that up?
</p>

<p class="ng-scope">
Be sure you check the cases in the right order!
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">

<div code-block="question__merge-sorted-arrays__solution-repetitive" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_lists</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> alices_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    merged_list_size <span class="token operator">=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span>
    merged_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> merged_list_size

    current_index_alices <span class="token operator">=</span> <span class="token number">0</span>
    current_index_mine <span class="token operator">=</span> <span class="token number">0</span>
    current_index_merged <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span> current_index_merged <span class="token operator">&lt;</span> merged_list_size<span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># case: my list is exhausted</span>
        <span class="token keyword">if</span> current_index_mine <span class="token operator">&gt;=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span>
            current_index_alices <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># case: alices list is exhausted</span>
        <span class="token keyword">elif</span> current_index_alices <span class="token operator">&gt;=</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>
            current_index_mine <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># case: my item is next</span>
        <span class="token keyword">elif</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>
            current_index_mine <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># case: alices item is next</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span>
            current_index_alices <span class="token operator">+=</span> <span class="token number">1</span>

        current_index_merged <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> merged_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Cool. This'll work, but it's a bit repetitive. We have these two lines twice:
</p>

<div code-block="question__merge-sorted-arrays__my-array-twice" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>
current_index_mine <span class="token operator">+=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Same for these two lines:
</p>

<div code-block="question__merge-sorted-arrays__alices-array-twice" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span>
current_index_alices <span class="token operator">+=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
That's not <span concept="dry" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">DRY</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>Don't Repeat Yourself (DRY)</strong> is a philosophy that you should avoid reptition in your code.
</p>

<p>
Making code more DRY could involve taking repeated lines of code and factoring them out into a utility function.
</p>

<p>
Code that isn't DRY is sometimes called <strong>WET</strong>, which could stand for "Write Everything Twice" or "We Enjoy Typing."
</p>

<p>
Or "Wild Elderberry Tart."
</p>
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>. Maybe we can avoid repeating ourselves by bringing our code back down to just 2 cases.
</p>

<p class="ng-scope">
See if you can do this in just one "if else" by combining the conditionals.
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
You might try to simply squish the middle cases together:
</p>

<div code-block="question__merge-sorted-arrays__squished-middle-cases" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">if</span> is_alices_list_exhausted <span class="token operator">or</span> \
        my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>
    current_index_mine <span class="token operator">+=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
But what happens when <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span> is exhausted?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="13" type="hint">
    <div class="note-content" ng-transclude="">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__what-happens-with-squish"><p class="ng-scope">
    We'll get <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merge-sorted-arrays__an-index-error"><span class="ng-scope">an IndexError</span></span> when we try to access <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merge-sorted-arrays__my-array-current-index-mine"><span class="ng-scope">my_list[current_index_mine]</span></span>!
</p>
<p class="ng-scope">
    How can we fix this?
</p></span>
</div>
</div>

</div>

    
</div>

<!--
<div note>

<p>
We'll <em>first</em> check whether or not the arrays are exhausted, before indexing into them (which is where we risk throwing <span code-inline="an-index-error"></span>). We're leaning on Python's <span concept="lazy">lazy evaluation</span> to ensure that we don't index into our arrays if one is already exhausted.
</p>

<p>
The ordering is important here!
</p>

<div code-block>
def merge_arrays(my_array, alices_array):

    # set up our merged_array
    merged_array_size = len(my_array) + len(alices_array)
    merged_array = [None] * merged_array_size

    current_index_alices = 0
    current_index_mine = 0
    current_index_merged = 0

    while(current_index_merged &lt; merged_array_size):

        is_my_array_exhausted = current_index_mine &gt;= len(my_array)
        is_alices_array_exhausted = current_index_alices &gt;= len(alices_array)

        # case: next comes from my array
        # my array must not be exhausted, and EITHER:
        # 1) alice's array IS exhausted, or
        # 2) the current element in my array is less
        #    than the current element in alice's array
        if not is_my_array_exhausted and (is_alices_array_exhausted or \
            my_array[current_index_mine] &lt; alices_array[current_index_alices]):

            merged_array[current_index_merged] = my_array[current_index_mine]
            current_index_mine += 1

        # case: next comes from alice's array
        else:
            merged_array[current_index_merged] = alices_array[current_index_alices]
            current_index_alices += 1

        current_index_merged += 1

    return merged_array
</div>

<p>
Is this approach cleaner? You could argue either way. It's certaily more <span concept="dry">DRY</span>, but it might be a little harder to read.
</p>
-->

<!--
TODO: we could also try to keep our conditional simple AND keep it to just one if-else, by setting vars like current_item_alices and current_item_mine to be EITHER the current item if there is one, OR something arbitrarily large if there isn't one, so that it'll never be "next". Like this:

current_item_mine = my_array[current_index_mine] mine if len(my_array) >= current_index_mine else float('inf')
-->

<!--
</div>
-->









<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
First, we allocate our answer <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>, getting its size by adding the size of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span>.
</p>

<p class="ng-scope">
We keep track of a current index in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span>, a current index in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span>, and a current index in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span>. So at each step, there's a "current item" in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span> and in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span>. The smaller of those is the next one we add to the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span>!
</p>

<p class="ng-scope">
<strong>But careful: we also need to account for the case where we exhaust one of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s and there are still elements in the other</strong>. To handle this, we say that the current item in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span> is the next item to add to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span> only if <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span> is <em>not</em> exhausted AND, either:
</p>

<ol class="ng-scope">
<li>
<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span> is exhausted, or
</li>
<li>
the current item in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__my-standard-list"><span class="ng-scope">my_list</span></span> is less than the current item in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__alices-standard-list"><span class="ng-scope">alices_list</span></span>
</li>
</ol>

<div code-block="question__merge-sorted-arrays__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_lists</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> alices_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># set up our merged_list</span>
    merged_list_size <span class="token operator">=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span>
    merged_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> merged_list_size

    current_index_alices <span class="token operator">=</span> <span class="token number">0</span>
    current_index_mine <span class="token operator">=</span> <span class="token number">0</span>
    current_index_merged <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span> current_index_merged <span class="token operator">&lt;</span> merged_list_size<span class="token punctuation">:</span>

        is_my_list_exhausted <span class="token operator">=</span> current_index_mine <span class="token operator">&gt;=</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>
        is_alices_list_exhausted <span class="token operator">=</span> current_index_alices <span class="token operator">&gt;=</span> len<span class="token punctuation">(</span>alices_list<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># case: next comes from my list</span>
        <span class="token comment" spellcheck="true"># my list must not be exhausted, and EITHER:</span>
        <span class="token comment" spellcheck="true"># 1) alice's list IS exhausted, or</span>
        <span class="token comment" spellcheck="true"># 2) the current element in my list is less</span>
        <span class="token comment" spellcheck="true">#    than the current element in alice's list</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> is_my_list_exhausted <span class="token operator">and</span> <span class="token punctuation">(</span>is_alices_list_exhausted <span class="token operator">or</span> \
                <span class="token punctuation">(</span>my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span>current_index_mine<span class="token punctuation">]</span>
            current_index_mine <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># case: next comes from alice's list</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged_list<span class="token punctuation">[</span>current_index_merged<span class="token punctuation">]</span> <span class="token operator">=</span> alices_list<span class="token punctuation">[</span>current_index_alices<span class="token punctuation">]</span>
            current_index_alices <span class="token operator">+=</span> <span class="token number">1</span>

        current_index_merged <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> merged_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>


<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__if-statement-avoiding-errors"><span class="ng-scope">The if statement is carefully constructed to avoid </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merge-sorted-arrays__an-index-error"><span class="ng-scope">an IndexError</span></span><span class="ng-scope"> from indexing into an empty array. We take advantage of </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span><span class="ng-scope">'s </span><span concept="lazy" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">lazy evaluation</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>
Lazy evaluation
</strong>
is a strategy some programming languages use to save work for the last minute or avoid unnecessary work altogether. For example, suppose we had a conditional like this:
</p>

<div code-block="concept__lazy__two-booleans" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> it_is_friday <span class="token operator">and</span> it_is_raining<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"board games at my place!"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-friday"><span class="ng-scope">it_is_friday</span></span> was false. <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__c18n-language-lazy-evaluation-strategy"><span class="ng-scope">Because of the </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span><span class="ng-scope"> interpreter's lazy evaluation strategy</span></span>,
it wouldn't bother checking the value of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-raining"><span class="ng-scope">it_is_raining</span></span>—it knows that either way the result of our <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__and"><span class="ng-scope">and</span></span> will be false, so we won't print the invitation to board game night.
</p>

<p>
We can use this to our advantage. For example, suppose we have a check like this:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition-key-error" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
What happens if 'Becky' isn't in our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__hash-table"><span class="ng-scope">dictionary</span></span>? <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-bad"><span class="ng-scope">In Python, we'll get a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope"> (Java would similarly raise a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__null-pointer-exception"><span class="ng-scope">NullPointerException</span></span><span class="ng-scope">, but Ruby and JavaScript would just give us a null object).</span></span>
</p>

<p>
Instead, we could first confirm that 'Becky' and I are still on good terms:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> <span class="token string">'Becky'</span> <span class="token keyword">in</span> friends <span class="token operator">and</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This way, if 'Becky' <em>isn't</em> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span>, <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-good"><span class="ng-scope">Python will lazily ignore the rest of the conditional and avoid throwing the </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope">!</span></span>
</p>

<p class="aside">
This is all hypothetical, of course. It's not like things with Becky are weird or anything. We're totally cool. She's still in my friends dictionary for sure and I hope I'm still in hers and Becky if you're reading this I just want you to know you're still in my friends dicitionary.
</p>

<p>
Python's <strong>generators</strong> are also an example of lazy evaluation. For example, the function <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python generates a list <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__list-explanation"></span> of numbers in a specific range:
</p>

<div code-block="concept__lazy__range-print" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">print</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># prints [1,2,3,4,5,6,7,8,9,10]</span>

<span class="token comment" spellcheck="true"># (the first argument to range()</span>
<span class="token comment" spellcheck="true"># is inclusive, and the second is exclusive)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This is commonly used for looping. For example, if we wanted to count to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>, we could do this:
</p>

<div code-block="concept__lazy__range-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
But this will generate a list in memory whose size is order of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>! That could be a lot of space.
</p>

<p>
So instead, we could use a generator. It behaves like a list in that we can loop through it, but instead of building up all of its contents at once, it simply generates the <em>next</em> element right when it's needed (lazily)!
</p>

<p>
There's a generator version of <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python: <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>:
</p>

<div code-block="concept__lazy__xrange-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token comment" spellcheck="true"># much more memory efficient!</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
In Python 3 they went ahead and made <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> a generator, so there is no <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>.
</p>

<p>
We can also take a <strong>lazy approach</strong> in system design. For example, suppose we had a class for tracking temperatures:
</p>

<div code-block="concept__lazy__temp-tracker-class" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose we wanted to add a feature for getting the the highest temperature we've seen so far. We could "eagerly" keep the max up to date whenever we insert a new temperature:
</p>

<div code-block="concept__lazy__get-max-eager" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerEager</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temp

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Or we could lazily (or "just in time") calculate the max whenever it's requested:
</p>

<div code-block="concept__lazy__get-max-lazy" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerLazy</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
The best choice depends on how often you expect to run <span class="ic-function ng-isolate-scope" func="concept__lazy__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>!
</p>

<p class="aside">
Becky, I haven't hosted another board game night since the incident. I know we both said things we didn't really mean and anyway Becky just if you're reading this please know that I've been cake free for 3 whole days now and it's hard but I'm doing it for you PLEASE Becky. Please.
</p>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__lazy__friends": {"default": "friends"}, "concept__lazy__some-high-number": {"default": "some_high_number"}, "concept__lazy__it-is-raining": {"snake": "it_is_raining", "camel": "itIsRaining"}, "concept__lazy__it-is-friday": {"snake": "it_is_friday", "camel": "itIsFriday"}}, "code-blocks": {"setup": {"python": "def test(Tracker):\n    tracker = Tracker()\n    tracker.record(2)\n    tracker.record(3)\n    assertEqual(tracker.get_max(), 3)\n    tracker.record(4)\n    assertEqual(tracker.get_max(), 4)"}, "concept__lazy__two-booleans": {"java": "if (itIsFriday && itIsRaining) {\n    System.out.println(\"board games at my place!\");\n}", "python": "if it_is_friday and it_is_raining:\n    print \"board games at my place!\"", "ruby": "if it_is_friday && it_is_raining\n    puts \"board games at my place!\"\nend", "c": "if (itIsFriday && itIsRaining) {\n    printf(\"board games at my place!\\n\");\n}", "javascript": "if (itIsFriday && itIsRaining) {\n    console.log('board games at my place!');\n}", "cpp": "if (itIsFriday && itIsRaining) {\n    cout &lt;&lt; \"board games at my place!\" &lt;&lt; endl;\n}"}, "concept__lazy__xrange-for-loop": {"default": "# much more memory efficient!\nfor i in xrange(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__get-max-lazy": {"default": {"code": "class TempTrackerLazy:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n\n    def get_max(self):\n        return max(self.recorded_temps)", "tests": "test(TempTrackerLazy)"}}, "concept__lazy__in-hash-and-meets-condition": {"java": "if (friends.containsKey(\"Becky\") && friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if 'Becky' in friends and friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends.include? 'Becky' && friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (friend != NULL && isFreeThisFriday(friend)) {\n    inviteToBoardGame(friend);\n}", "javascript": "if (friends.hasOwnProperty('Becky') && friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second != friends.end() && it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-for-loop": {"default": "for i in range(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__temp-tracker-class": {"default": "class TempTracker:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)"}, "concept__lazy__get-max-eager": {"default": {"code": "class TempTrackerEager:\n\n    recorded_temps = []\n    max_temp = None\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n        if temp > self.max_temp:\n            self.max_temp = temp\n\n    def get_max(self):\n        return self.max_temp", "tests": "test(TempTrackerEager)"}}, "concept__lazy__in-hash-and-meets-condition-key-error": {"java": "if (friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (isFreeThisFriday(friend)) {\n    inviteToBoardGameNight(friend);\n}", "javascript": "if (friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-print": {"default": "print range(1,11)\n# prints [1,2,3,4,5,6,7,8,9,10]\n\n# (the first argument to range()\n# is inclusive, and the second is exclusive)"}}, "funcs": {"concept__lazy__is-free-this-friday": {"snake": "is_free_this_friday", "camel": "isFreeThisFriday"}, "concept__lazy__range": {"default": "range"}, "concept__lazy__xrange": {"default": "xrange"}, "concept__lazy__get-max": {"default": "get_max"}}, "code-inlines": {"concept__lazy__and": {"python": "and", "default": "&&"}, "concept__lazy__undefined": {"default": "undefined"}, "concept__lazy__nil": {"default": "nil"}, "concept__lazy__null-pointer-exception": {"default": "NullPointerException"}, "concept__lazy__type-error": {"default": "TypeError"}, "concept__lazy__no-method-error": {"default": "NoMethodError"}, "concept__lazy__key-error": {"default": "KeyError"}, "concept__lazy__null": {"default": "null"}}, "words": {"concept__lazy__c18n-language": {"java": "Java", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "javascript": "JavaScript", "cpp": "C++ (beta)"}, "concept__lazy__list-explanation": {"java": "", "python": "", "ruby": "(Python's term for an array)", "c": "", "default": "", "javascript": "", "cpp": ""}, "concept__lazy__c18n-language-lazy-evaluation-strategy": {"java": "Because <span words=\"c18n-language\">Java</span> short-circuits evaluation", "ruby": "Because of the <span words=\"c18n-language\">Ruby</span> interpreter's lazy evaluation strategy", "c": "Because <span words=\"c18n-language\">C (beta)</span> short-circuits evaluation", "default": "Because of the <span words=\"c18n-language\"></span> interpreter's lazy evaluation strategy", "javascript": "Because of the <span words=\"c18n-language\">JavaScript</span> interpreter's lazy evaluation strategy", "cpp": "Because <span words=\"c18n-language\">C++ (beta)</span> short-circuits evaluation", "python": "Because of the <span words=\"c18n-language\">Python</span> interpreter's lazy evaluation strategy"}, "concept__lazy__if-becky-isnt-in-friends-good": {"java": "Java will skip the second check about Becky being free and avoid throwing the <span code-inline=\"null-pointer-exception\">NullPointerException</span>!", "python": "Python will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"key-error\">KeyError</span>!", "ruby": "Ruby will lazily ignore the rest of the conditional and avoid trying to call <span func=\"is-free-this-friday\">is_free_this_friday</span> on <span code-inline=\"nil\">nil</span>!", "c": "C will skip the second check about Becky being free, preventing possible memory corruption or crashing!", "javascript": "JavaScript will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"type-error\">TypeError</span>!", "cpp": "C++ will skip the second check about Becky being free, preventing possible memory corruption or crashing!"}, "concept__lazy__if-becky-isnt-in-friends-bad": {"java": "In Java, we'll get a <span code-inline=\"null-pointer-exception\">NullPointerException</span> (Python would similarly raise a <span code-inline=\"key-error\">KeyError</span>, but Ruby and JavaScript would just give us a null object).", "python": "In Python, we'll get a <span code-inline=\"key-error\">KeyError</span> (Java would similarly raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>, but Ruby and JavaScript would just give us a null object).", "ruby": "In Ruby, we'd get <span code-inline=\"nil\">nil</span>, so when we try calling <span func=\"is-free-this-friday\">is_free_this_friday</span> we'll get a <span code-inline=\"no-method-error\">NoMethodError</span>. (In JavaScript, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "c": "In C, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object.", "javascript": "In JavaScript, we'd get <span code-inline=\"undefined\">undefined</span>, so when we try calling <span func=\"is-free-this-friday\">isFreeThisFriday</span> we'll get a <span code-inline=\"type-error\">TypeError</span>. (In Ruby, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "cpp": "In C++, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object."}, "concept__lazy__hash-table": {"php": "array", "java": "hash map", "ruby": "hash", "swift": "dictionary", "c": "hash table", "javascript": "object", "python": "dictionary", "csharp": "dictionary", "cpp": "unordered map", "objectivec": "dictionary"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span><span class="ng-scope"> and check </span><em class="ng-scope">first</em><span class="ng-scope"> if the </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span><span class="ng-scope">s are exhausted.</span></span>
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> additional space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of items in the merged <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>.
</p>

<p class="ng-scope">
The added space comes from allocating the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__merged-standard-list"><span class="ng-scope">merged_list</span></span>. There's no way to do this "<span concept="in-place" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">in-place</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
An <strong>in-place</strong> algorithm operates <em>directly</em> on its input and <em>changes</em> it, instead of creating and returning a <em>new</em> object. This is sometimes called <strong>destructive</strong>, since the original input is "destroyed" when it's edited to create the new output.
</p>

<p>
<strong>Careful: "In-place" does <em>not</em> mean "without creating any additional variables"!</strong> Rather, it means "without creating a new copy of the input." In general, an in-place function will only create additional variables that are <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>

<p>
Here are two functions that do the same operation, except one is in-place and the other is out-of-place:
</p>

<div code-block="concept__in-place__in-place-and-out-of-place" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">square_list_in_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># enumerate() lets us get the index and element</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        int_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*=</span> element

    <span class="token comment" spellcheck="true"># NOTE: we don't /need/ to return anything</span>
    <span class="token comment" spellcheck="true"># this is just a convenience</span>
    <span class="token keyword">return</span> int_list

<span class="token keyword">def</span> <span class="token function">square_list_out_of_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we allocate a new list with the length of the input list</span>
    squared_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        squared_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token keyword">return</span> squared_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Working in-place is a good way to save space.</strong> An in-place algorithm will generally have <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space cost.
</p>

<p>
<strong>
But be careful: an in-place algorithm can cause side effects.
</strong>
Your input is "destroyed" or "altered," which can affect code <em>outside</em> of your function. For example:
</p>

<div code-block="concept__in-place__side-effect" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
squared_list  <span class="token operator">=</span> square_list_in_place<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">"squared: %s"</span> <span class="token operator">%</span> squared_list
<span class="token comment" spellcheck="true"># prints: squared: [4, 9, 16, 25]</span>

<span class="token keyword">print</span> <span class="token string">"original list: %s"</span> <span class="token operator">%</span> original_list
<span class="token comment" spellcheck="true"># prints: original list: [4, 9, 16, 25], confusingly!</span>

<span class="token comment" spellcheck="true"># and if square_list_in_place() didn't return anything,</span>
<span class="token comment" spellcheck="true"># which it could reasonably do, squared_list would be None!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Generally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you're very space constrained or you're <em>positive</em> you don't need the original input anymore, even for debugging.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__in-place__in-place-and-out-of-place": {"java": {"tests": "int[] inPlaceArray = new int[]{1, 2, 3};\nt.squareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, new int[]{1, 4, 9});\n\nint[] outOfPlaceArray = new int[]{2, 3, 4};\nint[] squaredArrayResult = t.squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, new int[]{4, 9, 16});\nassertEqual(outOfPlaceArray, new int[]{2, 3, 4});", "code": "public int[] squareArrayInPlace(int[] intArray) {\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        intArray[i] *= intArray[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\npublic int[] squareArrayOutOfPlace(int[] intArray) {\n\n    // we allocate a new array with the length of the input array\n    int[] squaredArray = new int[intArray.length];\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        squaredArray[i] = (int) Math.pow(intArray[i], 2);\n    }\n\n    return squaredArray;\n}"}, "python": {"tests": "in_place_list = [1, 2, 3]\nsquare_list_in_place(in_place_list)\nassert in_place_list == [1, 4, 9]\n\nout_of_place_list = [2, 3, 4]\nsquared_array_result = square_list_out_of_place(out_of_place_list)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_list == [2, 3, 4]", "code": "def square_list_in_place(int_list):\n\n    # enumerate() lets us get the index and element\n    for index, element in enumerate(int_list):\n        int_list[index] *= element\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_list\n\ndef square_list_out_of_place(int_list):\n\n    # we allocate a new list with the length of the input list\n    squared_list = [None] * len(int_list)\n\n    for index, element in enumerate(int_list):\n        squared_list[index] = element ** 2\n\n    return squared_list"}, "c": {"tests": "{\n    char msg[256];\n    int inPlaceArray[3] = {1, 2, 3};\n    int inPlaceArrayExpectedResult[3] = {1, 4, 9};\n\n    squareArrayInPlace(inPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'inPlaceArray == inPlaceArrayExpectedResult'\");\n    ASSERT_EQUAL(inPlaceArray, inPlaceArrayExpectedResult, sizeof(inPlaceArray), msg);\n\n    int outOfPlaceArray[3] = {2, 3, 4};\n    int squaredArrayExpectedResult[3] = {4, 9, 16};\n    int *squaredArrayResult;\n    int tempArray[3];\n\n    memcpy(tempArray, outOfPlaceArray, sizeof(outOfPlaceArray));\n    squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'squaredArrayResult == squaredArrayExpectedResult'\");\n    ASSERT_EQUAL(squaredArrayResult, squaredArrayExpectedResult, sizeof(squaredArrayResult), msg);\n    free(squaredArrayResult);\n\n    snprintf(msg, sizeof(msg), \"%s\", \"'outOfPlaceArray == tempArray'\");\n    ASSERT_EQUAL(outOfPlaceArray, tempArray, sizeof(outOfPlaceArray), msg);\n}", "code": "int *squareArrayInPlace(int *intArray, size_t length) {\n    size_t i;\n\n    for (i = 0; i &lt; length; i++) {\n        intArray[i] *= intArray[i];\n    }\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nint *squareArrayOutOfPlace(int *intArray, size_t length) {\n    size_t i;\n    // we allocate a new array with the length of the input array\n    int *squaredArray = malloc(length * sizeof(int));\n\n    assert(squaredArray != NULL);\n    for (i = 0; i &lt; length; i++) {\n        squaredArray[i] = intArray[i] * intArray[i];\n    }\n\n    return squaredArray;\n}"}, "ruby": {"tests": "in_place_array = [1, 2, 3]\nsquare_array_in_place(in_place_array)\nassert in_place_array == [1, 4, 9]\n\nout_of_place_array = [2, 3, 4]\nsquared_array_result = square_array_out_of_place(out_of_place_array)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_array == [2, 3, 4]", "code": "def square_array_in_place(int_array)\n\n    int_array.each_with_index do |element, index|\n        int_array[index] *= element\n    end\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_array\nend\n\ndef square_array_out_of_place(int_array)\n\n    # we allocate a new array with the length of the input array\n    squared_array = [nil] * int_array.length\n\n    int_array.each_with_index do |element, index|\n        squared_array[index] = element ** 2\n    end\n\n    return squared_array\nend"}, "javascript": {"tests": "var inPlaceArray = [1, 2, 3];\nsquareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, [1, 4, 9]);\n\nvar outOfPlaceArray = [2, 3, 4];\nvar squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, [4, 9, 16]);\nassertEqual(outOfPlaceArray, [2, 3, 4]);", "code": "function squareArrayInPlace(intArray) {\n\n    intArray.forEach(function(int, index) {\n        intArray[index] *= int;\n    });\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nfunction squareArrayOutOfPlace(intArray) {\n\n    // we allocate a new array with the length of the input array\n    var squaredArray = [];\n\n    intArray.forEach(function(int, index) {\n        squaredArray[index] = Math.pow(int, 2);\n    });\n\n    return squaredArray;\n}"}, "cpp": {"tests": "vector<int> inPlaceVector {1, 2, 3};\nsquareVectorInPlace(inPlaceVector);\nconst vector<int> test1Result {1, 4, 9};\nassertEqual(inPlaceVector, test1Result);\n\nconst vector<int> outOfPlaceVector {2, 3, 4};\nvector<int> squaredVectorResult = squareVectorOutOfPlace(outOfPlaceVector);\nconst vector<int> test2aResult {4, 9, 16};\nconst vector<int> test2bResult {2, 3, 4};\nassertEqual(squaredVectorResult, test2aResult);\nassertEqual(outOfPlaceVector, test2bResult);", "code": "vector&lt;int>& squareVectorInPlace(vector&lt;int>& intVector)\n{\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        intVector[i] *= intVector[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intVector;\n}\n\nvector&lt;int> squareVectorOutOfPlace(const vector&lt;int>& intVector)\n{\n    // we create a new vector with the size of the input vector\n    vector&lt;int> squaredVector(intVector.size());\n\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        int item = intVector[i];\n        squaredVector[i] =  item * item;\n    }\n\n    return squaredVector;\n}"}}, "concept__in-place__side-effect": {"java": "int[] originalArray = new int[]{2, 3, 4, 5};\nint[] squaredArray  = squareArrayInPlace(originalArray);\n\nSystem.out.println(\"squared: \" + Arrays.toString(squaredArray));\n// prints: squared: [4, 9, 16, 25]\n\nSystem.out.println(\"original array: \" + Arrays.toString(originalArray));\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be null!", "python": "original_list = [2, 3, 4, 5]\nsquared_list  = square_list_in_place(original_list)\n\nprint \"squared: %s\" % squared_list\n# prints: squared: [4, 9, 16, 25]\n\nprint \"original list: %s\" % original_list\n# prints: original list: [4, 9, 16, 25], confusingly!\n\n# and if square_list_in_place() didn't return anything,\n# which it could reasonably do, squared_list would be None!", "c": "size_t i;\nconst size_t originalArrayLength = 4;\nint originalArray[4] = {2, 3, 4, 5};\nint *squaredArray = squareArrayInPlace(originalArray, originalArrayLength);\n\nprintf(\"squared array: [\");\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", squaredArray[i]);\n}\nprintf(\"]\\n\");\n// prints: squared array: [4, 9, 16, 25]\n\nprintf(\"original array: [\";\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", originalArray[i]);\n}\nprintf(\"]\\n\");\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredArray!", "ruby": "original_array = [2, 3, 4, 5]\nsquared_array  = square_array_in_place(original_array)\n\nputs \"squared: #{squared_array}\"\n# prints: squared: [4, 9, 16, 25]\n\nputs \"original array: #{original_array}\"\n# prints: original array: [4, 9, 16, 25], confusingly!\n\n# and if square_array_in_place() didn't return anything,\n# which it could reasonably do, squared_array would be nil!", "javascript": "var originalArray = [2, 3, 4, 5];\nvar squaredArray  = squareArrayInPlace(originalArray);\n\nconsole.log('squared: ' + squaredArray);\n// logs: squared: 4,9,16,25\n\nSystem.out.println(\"original array: \" + originalArray);\n// logs: original array: 4,9,16,25 - confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be undefined!", "cpp": "vector&lt;int> originalVector = {2, 3, 4, 5};\nvector&lt;int>& squaredVector  = squareVectorInPlace(originalArray);\n\ncout &lt;&lt; \"squared vector: [\";\nfor (size_t i = 0; i &lt; squaredVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; squaredVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: squared vector: [4, 9, 16, 25]\n\ncout &lt;&lt; \"original vector: [\";\nfor (size_t i = 0; i &lt; originalVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; originalVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: original vector: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredVector!"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>" because neither of our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s are necessarily big enough to hold the merged <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>.
</p>

<p class="ng-scope">
But if our inputs were linked lists, we could avoid allocating a new structure and do the merge by simply adjusting the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__next"><span class="ng-scope">next</span></span> pointers in the list nodes!
</p>

<p class="ng-scope">
In our implementation above, we could avoid tracking <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__current-index-merged"><span class="ng-scope">current_index_merged</span></span> and just compute it on the fly by adding <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__current-index-mine"><span class="ng-scope">current_index_mine</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merge-sorted-arrays__current-index-alices"><span class="ng-scope">current_index_alices</span></span>. This would only save us one integer of space though, which is hardly anything. It's probably not worth the added code complexity.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__sorting-trivia"><p class="ng-scope">
    <strong>Trivia!</strong> Python's native sorting algorithm is called <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merge-sorted-arrays__timsort"><span class="ng-scope">Timsort</span></span>. It's actually <em>optimized</em> for sorting lists where subsections of the lists are already sorted. For this reason, a more naive algorithm:
</p>
<div code-block="question__merge-sorted-arrays__python-native-sorted" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_sorted_lists</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>arr1 <span class="token operator">+</span> arr2<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
    is actually <em>faster</em> until <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> gets <em>pretty</em> big. Like 1,000,000.
</p>
<p class="ng-scope">
    Also, in Python 2.6+, there's a built-in function for merging sorted lists into one sorted list: <span class="ic-function ng-isolate-scope" func="question__merge-sorted-arrays__heapq-merge"><span class="name" ng-transclude=""><span class="ng-scope">heapq.merge</span></span>()</span>.
</p></span>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
What if we wanted to merge <em>several</em> sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>s? Write a function that takes as an input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__a-standard-list-of-sorted-standard-lists-em"><em class="ng-scope"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span> of sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span>s</em></span> and outputs a single sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span> with all the items from each <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merge-sorted-arrays__standard-list"><span class="ng-scope">list</span></span>.
</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We spent a lot of time figuring out how to cleanly handle edge cases.
</p>

<p class="ng-scope">
Sometimes it's easy to lose steam at the end of a coding interview when you're debugging. But keep sprinting through to the finish! Think about edge cases. Look for off-by-one errors.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"question__merge-sorted-arrays__my-array-current-index-mine": {"cpp": "myVector[currentIndexMine]", "snake": "my_array[current_index_mine]", "python": "my_list[current_index_mine]", "camel": "myArray[currentIndexMine]"}, "question__merge-sorted-arrays__no-method-error": {"default": "NoMethodError"}, "question__merge-sorted-arrays__less-than-as-function": {"default": "9.&lt;(1)"}, "question__merge-sorted-arrays__timsort": {"default": "Timsort"}, "question__merge-sorted-arrays__argument-error": {"default": "ArgumentError"}, "question__merge-sorted-arrays__an-index-error": {"javascript": "", "python": "an IndexError", "ruby": "", "c": "a segfault", "java": "an ArrayIndexOutOfBoundsException", "cpp": "a segfault"}, "question__merge-sorted-arrays__less-than-shorthand": {"default": "9 &lt; 1"}, "question__merge-sorted-arrays__false": {"default": "false"}, "question__merge-sorted-arrays__undefined": {"default": "undefined"}, "question__merge-sorted-arrays__nil": {"default": "nil"}}, "code-blocks": {"question__merge-sorted-arrays__alices-array-twice": {"default": "mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\ncurrentIndexAlices++;", "cpp": "mergedVector[currentIndexMerged] = alicesVector[currentIndexAlices];\n++currentIndexAlices;", "c": "mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\ncurrentIndexAlices++;", "ruby": "merged_array[current_index_merged] = alices_array[current_index_alices]\ncurrent_index_alices += 1", "python": "merged_list[current_index_merged] = alices_list[current_index_alices]\ncurrent_index_alices += 1"}, "question__merge-sorted-arrays__sample-input": {"default": "[3,  4,  6, 10, 11, 15] // myArray\n[1,  5,  8, 12, 14, 19] // alicesArray", "cpp": "[3,  4,  6, 10, 11, 15] // myVector\n[1,  5,  8, 12, 14, 19] // alicesVector", "c": "[3,  4,  6, 10, 11, 15] // myArray\n[1,  5,  8, 12, 14, 19] // alicesArray", "ruby": "[3,  4,  6, 10, 11, 15] # my_array\n[1,  5,  8, 12, 14, 19] # alices_array", "python": "[3,  4,  6, 10, 11, 15] # my_list\n[1,  5,  8, 12, 14, 19] # alices_list"}, "question__merge-sorted-arrays__concatenate-and-sort": {"javascript": {"code": "function mergeSortedArrays(myArray, alicesArray) {\n    var mergedArray = myArray.concat(alicesArray);\n    return mergedArray.sort(function(a, b) {return a - b});\n}", "tests": "testInputAndOutputLists(mergeSortedArrays, tests, true);"}, "python": {"code": "def merge_sorted_lists(arr1, arr2):\n    return sorted(arr1 + arr2)", "tests": "testInputAndOutputLists(merge_sorted_lists, tests, True)"}, "ruby": {"code": "def merge_sorted_arrays(arr1, arr2)\n    return (arr1 + arr2).sort\nend", "tests": "testInputAndOutputLists(method(:merge_sorted_arrays), tests, true)"}, "c": {"code": "int compareInts(const void *x, const void *y) {\n    return *(int*)x - *(int*)y;\n}\n\nint* mergeSortedArrays(const int *myArray, const int *alicesArray,\n                        size_t myLength, size_t alicesLength) {\n    int mergedLength = myLength + alicesLength;\n    int *mergedArray = malloc(sizeof(int) * mergedLength);\n    assert(mergedArray != 0);\n    memcpy(mergedArray, myArray, sizeof(int) * myLength);\n    memcpy(mergedArray + myLength, alicesArray, sizeof(int) * alicesLength);\n    qsort(mergedArray, mergedLength, sizeof(int), compareInts);\n    return mergedArray;\n}", "tests": "for (size_t t = 0; t < sizeof(tests); t++) {\n    int *actual = mergeSortedArrays(tests[t][0], tests[t][1], sizes[t][0], sizes[t][1]);\n    ASSERT_EQUAL(actual, tests[t][2], (sizes[t][0] + sizes[t][1]) * sizeof(int), \"assertion failed\");\n    free(actual);\n}"}, "java": {"code": "public int[] mergeSortedArrays(int[] myArray, int[] alicesArray) {\n    int[] mergedArray = Arrays.copyOf(myArray, myArray.length + alicesArray.length);\n    System.arraycopy(alicesArray, 0, mergedArray, myArray.length, alicesArray.length);\n    Arrays.sort(mergedArray);\n    return mergedArray;\n}", "tests": "for (int[][] test : tests) {\n    assertEqual(t.mergeSortedArrays(test[0], test[1]), test[2]);\n}"}, "cpp": {"code": "vector&lt;int> mergeSortedVectors(const vector&lt;int>& myVector, const vector&lt;int>& alicesVector) \n{\n    vector&lt;int> mergedVector;\n    mergedVector.insert(mergedVector.end(), myVector.cbegin(), myVector.cend());\n    mergedVector.insert(mergedVector.end(), alicesVector.cbegin(), alicesVector.cend());\n    sort(mergedVector.begin(), mergedVector.end());\n    return mergedVector;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(mergeSortedVectors(test[0], test[1]), test[2]);\n}"}}, "question__merge-sorted-arrays__zeroeth-element-in-merged-array": {"default": "[3,  4,  6, 10, 11, 15] // myArray\n[1,  5,  8, 12, 14, 19] // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "cpp": "[3,  4,  6, 10, 11, 15] // myVector\n[1,  5,  8, 12, 14, 19] // alicesVector\n[1,  x,  x,  x,  x,  x] // mergedVector", "c": "[3,  4,  6, 10, 11, 15] // myArray\n[1,  5,  8, 12, 14, 19] // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "ruby": "[3,  4,  6, 10, 11, 15] # my_array\n[1,  5,  8, 12, 14, 19] # alices_array\n[1,  x,  x,  x,  x,  x] # merged_array", "python": "[3,  4,  6, 10, 11, 15] # my_list\n[1,  5,  8, 12, 14, 19] # alices_list\n[1,  x,  x,  x,  x,  x] # merged_list"}, "question__merge-sorted-arrays__solution-repetitive": {"javascript": {"code": "function mergeArrays(myArray, alicesArray) {\n\n    var mergedArray = [];\n\n    var currentIndexAlices = 0;\n    var currentIndexMine   = 0;\n    var currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; (myArray.length + alicesArray.length)) {\n\n        // case: my array is exhausted\n        if (currentIndexMine >= myArray.length) {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n\n        // case: alices array is exhausted\n        } else if (currentIndexAlices >= alicesArray.length) {\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: my item is next\n        } else if (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices]) {\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: alices item is next\n        } else {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "testInputAndOutputLists(mergeArrays, tests, true)"}, "python": {"code": "def merge_lists(my_list, alices_list):\n    merged_list_size = len(my_list) + len(alices_list)\n    merged_list = [None] * merged_list_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_list_size:\n\n        # case: my list is exhausted\n        if current_index_mine >= len(my_list):\n            merged_list[current_index_merged] = alices_list[current_index_alices]\n            current_index_alices += 1\n\n        # case: alices list is exhausted\n        elif current_index_alices >= len(alices_list):\n            merged_list[current_index_merged] = my_list[current_index_mine]\n            current_index_mine += 1\n\n        # case: my item is next\n        elif my_list[current_index_mine] &lt; alices_list[current_index_alices]:\n            merged_list[current_index_merged] = my_list[current_index_mine]\n            current_index_mine += 1\n\n        # case: alices item is next\n        else:\n            merged_list[current_index_merged] = alices_list[current_index_alices]\n            current_index_alices += 1\n\n        current_index_merged += 1\n\n    return merged_list", "tests": "testInputAndOutputLists(merge_lists, tests, True)"}, "ruby": {"code": "def merge_arrays(my_array, alices_array)\n    merged_array_size = my_array.length + alices_array.length\n    merged_array = [nil] * merged_array_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_array_size\n\n        # case: my array is exhausted\n        if current_index_mine >= my_array.length\n            merged_array[current_index_merged] = alices_array[current_index_alices]\n            current_index_alices += 1\n\n        # case: alices array is exhausted\n        elsif current_index_alices >= alices_array.length\n            merged_array[current_index_merged] = my_array[current_index_mine]\n            current_index_mine += 1\n\n        # case: my item is next\n        elsif my_array[current_index_mine] &lt; alices_array[current_index_alices]\n            merged_array[current_index_merged] = my_array[current_index_mine]\n            current_index_mine += 1\n\n        # case: alices item is next\n        else\n            merged_array[current_index_merged] = alices_array[current_index_alices]\n            current_index_alices += 1\n        end\n\n        current_index_merged += 1\n    end\n\n    return merged_array\nend", "tests": "testInputAndOutputLists(method(:merge_arrays), tests, true)"}, "c": {"code": "int* mergeArrays(const int *myArray, const int *alicesArray,\n                 size_t myLength, size_t alicesLength) {\n    int mergedLength = myLength + alicesLength;\n    int *mergedArray = malloc(sizeof(int) * mergedLength);\n    assert(mergedArray != 0);\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedLength) {\n        int firstUnmergedAlices = alicesArray[currentIndexAlices];\n        int firstUnmergedMine = myArray[currentIndexMine];\n\n      // case: my array is exhausted\n        if (currentIndexMine >= myLength) {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n\n        // case: alices array is exhausted\n        } else if (currentIndexAlices >= alicesLength) {\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: next comes from my array\n        } else if (firstUnmergedMine &lt; firstUnmergedAlices) {\n            mergedArray[currentIndexMerged] = firstUnmergedMine;\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = firstUnmergedAlices;\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "for (size_t t = 0; t < sizeof(tests); t++) {\n    int *actual = mergeArrays(tests[t][0], tests[t][1], sizes[t][0], sizes[t][1]);\n    ASSERT_EQUAL(actual, tests[t][2], (sizes[t][0] + sizes[t][1]) * sizeof(int), \"assertion failed\");\n    free(actual);\n}"}, "java": {"code": "public int[] mergeArrays(int[] myArray, int[] alicesArray) {\n\n    int[] mergedArray = new int[myArray.length + alicesArray.length];\n\n    int currentIndexAlices = 0;\n    int currentIndexMine   = 0;\n    int currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedArray.length) {\n\n        // case: my array is exhausted\n        if (currentIndexMine >= myArray.length) {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n\n        // case: alices array is exhausted\n        } else if (currentIndexAlices >= alicesArray.length) {\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: my item is next\n        } else if (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices]) {\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: alices item is next\n        } else {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "for (int[][] test : tests) {\n    assertEqual(t.mergeArrays(test[0], test[1]), test[2]);\n}"}, "cpp": {"code": "vector&lt;int> mergeVectors(const vector&lt;int>& myVector, const vector&lt;int>& alicesVector) \n{\n    vector&lt;int> mergedVector(myVector.size() + alicesVector.size());\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedVector.size()) {\n\n        // case: my vector is exhausted\n        if (currentIndexMine >= myVector.size()) {\n            mergedVector[currentIndexMerged] = alicesVector[currentIndexAlices];\n            ++currentIndexAlices;\n        }\n        // case: alices vector is exhausted\n        else if (currentIndexAlices >= alicesVector.size()) {\n            mergedVector[currentIndexMerged] = myVector[currentIndexMine];\n            ++currentIndexMine;\n        }\n        // case: my item is next\n        else if (myVector[currentIndexMine] &lt; alicesVector[currentIndexAlices]) {\n            mergedVector[currentIndexMerged] = myVector[currentIndexMine];\n            ++currentIndexMine;\n        }\n        // case: alices item is next\n        else {\n            mergedVector[currentIndexMerged] = alicesVector[currentIndexAlices];\n            ++currentIndexAlices;\n        }\n\n        ++currentIndexMerged;\n    }\n\n    return mergedVector;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(mergeVectors(test[0], test[1]), test[2]);\n}"}}, "setup": {"javascript": "var tests = [\n    [[[3, 4, 6, 10, 11, 15], [1, 5, 8, 12, 14, 19]], [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]],\n    [[[], [1, 2, 3, 4]], [1, 2, 3, 4]],\n    [[[1, 2, 3, 4], []], [1, 2, 3, 4]],\n]", "python": "tests = [\n    [[[3, 4, 6, 10, 11, 15], [1, 5, 8, 12, 14, 19]], [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]],\n    [[[], [1, 2, 3, 4]], [1, 2, 3, 4]],\n    [[[1, 2, 3, 4], []], [1, 2, 3, 4]],\n]", "ruby": "tests = [\n    [[[3, 4, 6, 10, 11, 15], [1, 5, 8, 12, 14, 19]], [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]],\n    [[[], [1, 2, 3, 4]], [1, 2, 3, 4]],\n    [[[1, 2, 3, 4], []], [1, 2, 3, 4]],\n]", "c": "int tests[3][3][12] = {\n    { {3, 4, 6, 10, 11, 15}, {1, 5, 8, 12, 14, 19}, {1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19} },\n    { {}, {1, 2, 3, 4}, {1, 2, 3, 4} },\n    { {1, 2, 3, 4}, {}, {1, 2, 3, 4} } };\nint sizes[3][2] = { {6, 6}, {0, 4}, {4, 0} };", "java": "int[][][] tests = new int[][][]{\n    { {3, 4, 6, 10, 11, 15}, {1, 5, 8, 12, 14, 19}, {1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19} },\n    { {}, {1, 2, 3, 4}, {1, 2, 3, 4} },\n    { {1, 2, 3, 4}, {}, {1, 2, 3, 4} },\n};", "cpp": "const vector<vector<vector<int>>> tests {\n    vector<vector<int>> { vector<int>{3, 4, 6, 10, 11, 15}, vector<int>{1, 5, 8, 12, 14, 19}, vector<int>{1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19} },\n    vector<vector<int>> { vector<int>{}, vector<int>{1, 2, 3, 4}, vector<int>{1, 2, 3, 4} },\n    vector<vector<int>> { vector<int>{1, 2, 3, 4}, vector<int>{}, vector<int>{1, 2, 3, 4} },\n};"}, "question__merge-sorted-arrays__zeroeth-element-removed-from-alices-array": {"default": "[3,  4,  6, 10, 11, 15] // myArray\n[5,  8, 12, 14, 19]     // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "cpp": "[3,  4,  6, 10, 11, 15] // myVector\n[5,  8, 12, 14, 19]     // alicesVector\n[1,  x,  x,  x,  x,  x] // mergedVector", "c": "[3,  4,  6, 10, 11, 15] // myArray\n[5,  8, 12, 14, 19]     // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "ruby": "[3,  4,  6, 10, 11, 15] # my_array\n[5,  8, 12, 14, 19]     # alices_array\n[1,  x,  x,  x,  x,  x] # merged_array", "python": "[3,  4,  6, 10, 11, 15] # my_list\n[5,  8, 12, 14, 19]     # alices_list\n[1,  x,  x,  x,  x,  x] # merged_list"}, "question__merge-sorted-arrays__choose-zeroeth-element": {"javascript": {"code": "function mergeArrays(myArray, alicesArray) {\n\n    var mergedArray = [];\n\n    var headOfMyArray = myArray[0];\n    var headOfAlicesArray = alicesArray[0];\n\n    // case: 0th comes from my array\n    if (headOfMyArray &lt; headOfAlicesArray) {\n        mergedArray[0] = headOfMyArray;\n\n    // case: 0th comes from alices array\n    } else {\n        mergedArray[0] = headOfAlicesArray;\n    }\n\n    // eventually we'll want to return the merged array\n    return mergedArray;\n}", "tests": "assertRunsWithoutError(mergeArrays, [[1], [2]], true);\nassertRunsWithoutError(mergeArrays, [[4], [3]], true);"}, "python": {"code": "def merge_lists(my_list, alices_list):\n\n    # make a list big enough to fit the elements from both lists\n    merged_list_size = len(my_list) + len(alices_list)\n    merged_list = [None] * merged_list_size\n\n    head_of_my_list = my_list[0]\n    head_of_alices_list = alices_list[0]\n\n    # case: 0th comes from my list\n    if head_of_my_list &lt; head_of_alices_list:\n        merged_list[0] = head_of_my_list\n\n    # case: 0th comes from alices list\n    else:\n        merged_list[0] = head_of_alices_list\n\n    # eventually we'll want to return the merged list\n    return merged_list", "tests": "assertRunsWithoutError(merge_lists, [[1], [2]], True)\nassertRunsWithoutError(merge_lists, [[4], [3]], True)"}, "ruby": {"code": "def merge_arrays(my_array, alices_array)\n\n    # make an array big enough to fit the elements from both arrays\n    merged_array_size = my_array.length + alices_array.length\n    merged_array = [nil] * merged_array_size\n\n    head_of_my_array = my_array[0]\n    head_of_alices_array = alices_array[0]\n\n    # case: 0th comes from my array\n    if head_of_my_array &lt; head_of_alices_array\n        merged_array[0] = head_of_my_array\n\n    # case: 0th comes from alices array\n    else\n        merged_array[0] = head_of_alices_array\n    end\n\n    # eventually we'll want to return the merged array\n    return merged_array\nend", "tests": "assertRunsWithoutError(method(:merge_arrays), [[1], [2]], true)\nassertRunsWithoutError(method(:merge_arrays), [[4], [3]], true)"}, "c": {"code": "int* mergeArrays(const int *myArray, const int *alicesArray,\n                 size_t myLength, size_t alicesLength) {\n    // make a array big enough to fit the elements from both arrays\n    int mergedLength = myLength + alicesLength;\n    int *mergedArray = malloc(sizeof(int) * mergedLength);\n    assert(mergedArray != 0);\n\n    int headOfMyArray = myArray[0];\n    int headOfAlicesArray = alicesArray[0];\n\n    // case: 0th comes from my vetor\n    if (headOfMyArray &lt; headOfAlicesArray) {\n        mergedArray[0] = headOfMyArray;\n\n    // case: 0th comes from alices array\n    } else {\n        mergedArray[0] = headOfAlicesArray;\n    }\n\n    // eventually we'll want to return the merged array\n    return mergedArray;\n}", "tests": "int arrayA[2] = {1, 2};\nint arrayB[2] = {3, 4};\nint* mergedArray = mergeArrays(arrayA, arrayB, sizeof(arrayA), sizeof(arrayB));\nASSERT(mergedArray[0] == 1);\nfree(mergedArray);"}, "java": {"setup": "public class MergeArraysWrapper implements VoidFunctionToTest {\n    public void call() {\n        t.mergeArrays(new int[]{1}, new int[]{2});\n    }\n}", "code": "public int[] mergeArrays(int[] myArray, int[] alicesArray) {\n\n    // make an array big enough to fit the elements from both arrays\n    int[] mergedArray = new int[myArray.length + alicesArray.length];\n\n    int headOfMyArray = myArray[0];\n    int headOfAlicesArray = alicesArray[0];\n\n    // case: 0th comes from my array\n    if (headOfMyArray &lt; headOfAlicesArray) {\n        mergedArray[0] = headOfMyArray;\n\n    // case: 0th comes from alices array\n    } else {\n        mergedArray[0] = headOfAlicesArray;\n    }\n\n    // eventually we'll want to return the merged array\n    return mergedArray;\n}", "tests": "assertRunsWithoutError(t.new MergeArraysWrapper());"}, "cpp": {"code": "vector&lt;int> mergeVectors(const vector&lt;int>& myVector, const vector&lt;int>& alicesVector) \n{\n    // make a vector big enough to fit the elements from both vectors\n    vector&lt;int> mergedVector(myVector.size() + alicesVector.size());\n \n    int headOfMyVector = myVector[0];\n    int headOfAlicesVector = alicesVector[0];\n\n    // case: 0th comes from my vetor\n    if (headOfMyVector &lt; headOfAlicesVector) {\n        mergedVector[0] = headOfMyVector;\n    }\n    // case: 0th comes from alices vector\n    else {\n        mergedVector[0] = headOfAlicesVector;\n    }\n\n    // eventually we'll want to return the merged vector\n    return mergedVector;\n}", "tests": "vector<int> vectorA {1,2};\nvector<int> vectorB {3,4};\nassertRunsWithoutError(\"choose-zeroeth-element\", &mergeVectors, vectorA, vectorB);"}}, "question__merge-sorted-arrays__my-array-twice": {"default": "mergedArray[currentIndexMerged] = myArray[currentIndexMine];\ncurrentIndexMine++;", "cpp": "mergedVector[currentIndexMerged] = myVector[currentIndexMine];\n++currentIndexMine;", "c": "mergedArray[currentIndexMerged] = myArray[currentIndexMine];\ncurrentIndexMine++;", "ruby": "merged_array[current_index_merged] = my_array[current_index_mine]\ncurrent_index_mine += 1", "python": "merged_list[current_index_merged] = my_list[current_index_mine]\ncurrent_index_mine += 1"}, "question__merge-sorted-arrays__python-native-sorted": {"default": "def merge_sorted_lists(arr1, arr2):\n    return sorted(arr1 + arr2)"}, "question__merge-sorted-arrays__solution-before-edge-cases": {"javascript": {"code": "function mergeArrays(myArray, alicesArray) {\n\n    var mergedArray = [];\n\n    var currentIndexAlices = 0;\n    var currentIndexMine   = 0;\n    var currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; (myArray.length + alicesArray.length)) {\n        var firstUnmergedAlices = alicesArray[currentIndexAlices];\n        var firstUnmergedMine = myArray[currentIndexMine];\n\n        // case: next comes from my array\n        if (firstUnmergedMine &lt; firstUnmergedAlices) {\n            mergedArray[currentIndexMerged] = firstUnmergedMine;\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = firstUnmergedAlices;\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "function exhaustArray() {\n    mergeArrays([1, 2], [3, 4]);\n}\n\nassertRunsWithoutError(exhaustArray);"}, "python": {"code": "def merge_lists(my_list, alices_list):\n\n    merged_list_size = len(my_list) + len(alices_list)\n    merged_list = [None] * merged_list_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_list_size:\n        first_unmerged_alices = alices_list[current_index_alices]\n        first_unmerged_mine = my_list[current_index_mine]\n\n        # case: next comes from my list\n        if first_unmerged_mine &lt; first_unmerged_alices:\n            merged_list[current_index_merged] = first_unmerged_mine\n            current_index_mine += 1\n\n        # case: next comes from alice's list\n        else:\n            merged_list[current_index_merged] = first_unmerged_alices\n            current_index_alices += 1\n\n        current_index_merged += 1\n\n    return merged_list", "tests": "def exhaust_list():\n    merge_lists([1, 2], [3, 4])\n\nassertRaisesError(exhaust_list, 'list index out of range')"}, "ruby": {"code": "def merge_arrays(my_array, alices_array)\n\n    merged_array_size = my_array.length + alices_array.length\n    merged_array = [nil] * merged_array_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_array_size\n        first_unmerged_alices = alices_array[current_index_alices]\n        first_unmerged_mine = my_array[current_index_mine]\n\n        # case: next comes from my array\n        if first_unmerged_mine &lt; first_unmerged_alices\n            merged_array[current_index_merged] = first_unmerged_mine\n            current_index_mine += 1\n\n        # case: next comes from alice's array\n        else\n            merged_array[current_index_merged] = first_unmerged_alices\n            current_index_alices += 1\n        end\n\n        current_index_merged += 1\n    end\n\n    return merged_array\nend", "tests": "def exhaust_array\n    merge_arrays([1, 2], [3, 4])\nend\n\nassertRaisesError(method(:exhaust_array), 'for nil:NilClass')"}, "c": {"code": "int* mergeArrays(const int *myArray, const int *alicesArray,\n                 size_t myLength, size_t alicesLength) {\n    int mergedLength = myLength + alicesLength;\n    int *mergedArray = malloc(sizeof(int) * mergedLength);\n    assert(mergedArray != 0);\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedLength) {\n        int firstUnmergedAlices = alicesArray[currentIndexAlices];\n        int firstUnmergedMine = myArray[currentIndexMine];\n\n        // case: next comes from my array\n        if (firstUnmergedMine &lt; firstUnmergedAlices) {\n            mergedArray[currentIndexMerged] = firstUnmergedMine;\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = firstUnmergedAlices;\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "// Running function will cause undefined behaviour and possibly segfault"}, "java": {"setup": "public class ExhaustArray implements VoidFunctionToTest {\n    public void call() {\n        t.mergeArrays(new int[]{1, 2}, new int[]{3, 4});\n    }\n}", "code": "public int[] mergeArrays(int[] myArray, int[] alicesArray) {\n\n    int[] mergedArray = new int[myArray.length + alicesArray.length];\n\n    int currentIndexAlices = 0;\n    int currentIndexMine   = 0;\n    int currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedArray.length) {\n        int firstUnmergedAlices = alicesArray[currentIndexAlices];\n        int firstUnmergedMine = myArray[currentIndexMine];\n\n        // case: next comes from my array\n        if (firstUnmergedMine &lt; firstUnmergedAlices) {\n            mergedArray[currentIndexMerged] = firstUnmergedMine;\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = firstUnmergedAlices;\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "assertRaisesError(t.new ExhaustArray(), \"java.lang.ArrayIndexOutOfBoundsException\");"}, "cpp": {"code": "vector&lt;int> mergeVectors(const vector&lt;int>& myVector, const vector&lt;int>& alicesVector)\n{\n    vector&lt;int> mergedVector(myVector.size() + alicesVector.size());\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedVector.size()) {\n        int firstUnmergedAlices = alicesVector[currentIndexAlices];\n        int firstUnmergedMine = myVector[currentIndexMine];\n\n        // case: next comes from my array\n        if (firstUnmergedMine &lt; firstUnmergedAlices) {\n            mergedVector[currentIndexMerged] = firstUnmergedMine;\n            ++currentIndexMine;\n        }\n        // case: next comes from alice's array\n        else {\n            mergedVector[currentIndexMerged] = firstUnmergedAlices;\n            ++currentIndexAlices;\n        }\n\n        ++currentIndexMerged;\n    }\n\n    return mergedVector;\n}", "tests": "// intentioanlly no tests here\n// because we have decided to intentinally put the code that may crash into the example."}}, "question__merge-sorted-arrays__zeroeth-index-crossed-out-in-alices-array": {"default": "[3,  4,  6, 10, 11, 15] // myArray\n[x,  5,  8, 12, 14, 19] // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "cpp": "[3,  4,  6, 10, 11, 15] // myVector\n[x,  5,  8, 12, 14, 19] // alicesVector\n[1,  x,  x,  x,  x,  x] // mergedVector", "c": "[3,  4,  6, 10, 11, 15] // myArray\n[x,  5,  8, 12, 14, 19] // alicesArray\n[1,  x,  x,  x,  x,  x] // mergedArray", "ruby": "[3,  4,  6, 10, 11, 15] # my_array\n[x,  5,  8, 12, 14, 19] # alices_array\n[1,  x,  x,  x,  x,  x] # merged_array", "python": "[3,  4,  6, 10, 11, 15] # my_list\n[x,  5,  8, 12, 14, 19] # alices_list\n[1,  x,  x,  x,  x,  x] # merged_list"}, "question__merge-sorted-arrays__solution": {"javascript": {"code": "function mergeArrays(myArray, alicesArray) {\n\n    // set up our mergedArray\n    var mergedArray = [];\n\n    var currentIndexAlices = 0;\n    var currentIndexMine   = 0;\n    var currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; (myArray.length + alicesArray.length)) {\n\n        var isMyArrayExhausted = currentIndexMine >= myArray.length;\n        var isAlicesArrayExhausted = currentIndexAlices >= alicesArray.length;\n\n        // case: next comes from my array\n        // my array must not be exhausted, and EITHER:\n        // 1) alice's array IS exhausted, or\n        // 2) the current element in my array is less\n        //    than the current element in alice's array\n        if (!isMyArrayExhausted && (isAlicesArrayExhausted ||\n                (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices]))) {\n\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "testInputAndOutputLists(mergeArrays, tests, true);"}, "python": {"code": "def merge_lists(my_list, alices_list):\n\n    # set up our merged_list\n    merged_list_size = len(my_list) + len(alices_list)\n    merged_list = [None] * merged_list_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_list_size:\n\n        is_my_list_exhausted = current_index_mine >= len(my_list)\n        is_alices_list_exhausted = current_index_alices >= len(alices_list)\n\n        # case: next comes from my list\n        # my list must not be exhausted, and EITHER:\n        # 1) alice's list IS exhausted, or\n        # 2) the current element in my list is less\n        #    than the current element in alice's list\n        if not is_my_list_exhausted and (is_alices_list_exhausted or \\\n                (my_list[current_index_mine] &lt; alices_list[current_index_alices])):\n\n            merged_list[current_index_merged] = my_list[current_index_mine]\n            current_index_mine += 1\n\n        # case: next comes from alice's list\n        else:\n            merged_list[current_index_merged] = alices_list[current_index_alices]\n            current_index_alices += 1\n\n        current_index_merged += 1\n\n    return merged_list", "tests": "testInputAndOutputLists(merge_lists, tests, True)"}, "ruby": {"code": "def merge_arrays(my_array, alices_array)\n\n    # set up our merged_array\n    merged_array_size = my_array.length + alices_array.length\n    merged_array = [nil] * merged_array_size\n\n    current_index_alices = 0\n    current_index_mine = 0\n    current_index_merged = 0\n\n    while current_index_merged &lt; merged_array_size\n\n        is_my_array_exhausted = current_index_mine >= my_array.length\n        is_alices_array_exhausted = current_index_alices >= alices_array.length\n\n        # case: next comes from my array\n        # my array must not be exhausted, and EITHER:\n        # 1) alice's array IS exhausted, or\n        # 2) the current element in my array is less\n        #    than the current element in alice's array\n        if !is_my_array_exhausted and (is_alices_array_exhausted || \\\n                (my_array[current_index_mine] &lt; alices_array[current_index_alices]))\n\n            merged_array[current_index_merged] = my_array[current_index_mine]\n            current_index_mine += 1\n\n        # case: next comes from alice's array\n        else\n            merged_array[current_index_merged] = alices_array[current_index_alices]\n            current_index_alices += 1\n        end\n\n        current_index_merged += 1\n    end\n\n    return merged_array\nend", "tests": "testInputAndOutputLists(method(:merge_arrays), tests, true)"}, "c": {"code": "int* mergeArrays(const int *myArray, const int *alicesArray,\n                 size_t myLength, size_t alicesLength) {\n    int mergedLength = myLength + alicesLength;\n    int *mergedArray = malloc(sizeof(int) * mergedLength);\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedLength) {\n        int isMyArrayExhausted = currentIndexMine >= myLength;\n        int isAlicesArrayExhausted = currentIndexAlices >= alicesLength;\n\n        // case: next comes from my array\n        // my array must not be exhausted, and EITHER:\n        // 1) alice's array IS exhausted, or\n        // 2) the current element in my array is less\n        //    than the current element in alice's array\n        if (!isMyArrayExhausted && (isAlicesArrayExhausted\n                || (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices]))) {\n\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "for (size_t t = 0; t < sizeof(tests); t++) {\n    int *actual = mergeArrays(tests[t][0], tests[t][1], sizes[t][0], sizes[t][1]);\n    ASSERT_EQUAL(actual, tests[t][2], (sizes[t][0] + sizes[t][1]) * sizeof(int), \"assertion failed\");\n    free(actual);\n}"}, "java": {"code": "public int[] mergeArrays(int[] myArray, int[] alicesArray) {\n\n    // set up our mergedArray\n    int[] mergedArray = new int[myArray.length + alicesArray.length];\n\n    int currentIndexAlices = 0;\n    int currentIndexMine   = 0;\n    int currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedArray.length) {\n\n        boolean isMyArrayExhausted = currentIndexMine >= myArray.length;\n        boolean isAlicesArrayExhausted = currentIndexAlices >= alicesArray.length;\n\n        // case: next comes from my array\n        // my array must not be exhausted, and EITHER:\n        // 1) alice's array IS exhausted, or\n        // 2) the current element in my array is less\n        //    than the current element in alice's array\n        if (!isMyArrayExhausted && (isAlicesArrayExhausted\n                || (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices]))) {\n\n            mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n            currentIndexMine++;\n\n        // case: next comes from alice's array\n        } else {\n            mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n            currentIndexAlices++;\n        }\n\n        currentIndexMerged++;\n    }\n\n    return mergedArray;\n}", "tests": "for (int[][] test : tests) {\n    assertEqual(t.mergeArrays(test[0], test[1]), test[2]);\n}"}, "cpp": {"code": "vector&lt;int> mergeVectors(const vector&lt;int>& myVector, const vector&lt;int>& alicesVector) \n{\n    // set up our mergedVector\n    vector&lt;int> mergedVector(myVector.size() + alicesVector.size());\n\n    size_t currentIndexAlices = 0;\n    size_t currentIndexMine   = 0;\n    size_t currentIndexMerged = 0;\n\n    while (currentIndexMerged &lt; mergedVector.size()) {\n\n        bool isMyVectorExhausted = currentIndexMine >= myVector.size();\n        bool isAlicesVectorExhausted = currentIndexAlices >= alicesVector.size();\n\n        // case: next comes from my vector\n        // my vector must not be exhausted, and EITHER:\n        // 1) alice's vector IS exhausted, or\n        // 2) the current element in my vector is less\n        //    than the current element in alice's vector\n        if (!isMyVectorExhausted && (isAlicesVectorExhausted\n                || (myVector[currentIndexMine] &lt; alicesVector[currentIndexAlices]))) {\n\n            mergedVector[currentIndexMerged] = myVector[currentIndexMine];\n            ++currentIndexMine;\n\n        // case: next comes from alice's vector\n        }\n        else {\n            mergedVector[currentIndexMerged] = alicesVector[currentIndexAlices];\n            ++currentIndexAlices;\n        }\n\n        ++currentIndexMerged;\n    }\n\n    return mergedVector;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(mergeVectors(test[0], test[1]), test[2]);\n}"}}, "question__merge-sorted-arrays__squished-middle-cases": {"javascript": "if (isAlicesArrayExhausted ||\n        (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices])) {\n\n    mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n    currentIndexMine++;", "python": "if is_alices_list_exhausted or \\\n        my_list[current_index_mine] &lt; alices_list[current_index_alices]):\n\n    merged_list[current_index_merged] = my_list[current_index_mine]\n    current_index_mine += 1", "ruby": "if is_alices_array_exhausted || \\\n        my_array[current_index_mine] &lt; alices_array[current_index_alices])\n\n    merged_array[current_index_merged] = my_array[current_index_mine]\n    current_index_mine += 1", "c": "if (isAlicesArrayExhausted\n        || (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices])) {\n\n    mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n    currentIndexMine++;", "java": "if (isAlicesArrayExhausted\n        || (myArray[currentIndexMine] &lt; alicesArray[currentIndexAlices])) {\n\n    mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n    currentIndexMine++;", "cpp": "if (isAlicesVectorExhausted\n        || (myVector[currentIndexMine] &lt; alicesVector[currentIndexAlices])) {\n\n    mergedVector[currentIndexMerged] = myVector[currentIndexMine];\n    ++currentIndexMine;"}, "question__merge-sorted-arrays__example-input-output": {"javascript": "var myArray     = [3, 4, 6, 10, 11, 15];\nvar alicesArray = [1, 5, 8, 12, 14, 19];\n\nconsole.log(mergeArrays(myArray, alicesArray));\n// logs [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]", "python": "my_list     = [3, 4, 6, 10, 11, 15]\nalices_list = [1, 5, 8, 12, 14, 19]\n\nprint merge_lists(my_list, alices_list)\n# prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]", "ruby": "my_array     = [3, 4, 6, 10, 11, 15]\nalices_array = [1, 5, 8, 12, 14, 19]\n\nputs merge_arrays(my_array, alices_array)\n# prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]", "c": "size_t i;\n\nint myArray[6] = {3, 4, 6, 10, 11, 15};\nint alicesArray[6] = {1, 5, 8, 12, 14, 19};\n\nsize_t myLength = sizeof(myArray) / sizeof(myArray[0]);\nsize_t alicesLength = sizeof(alicesArray) / sizeof(alicesArray[0]);\n\nint *mergedArray = mergeArrays(myArray, alicesArray, myLength, alicesLength);\nsize_t mergedLength = myLength + alicesLength;\n\nassert(mergedArray);\n\nprintf(\"[\");\nfor(i = 0; i &lt; mergedLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", mergedArray[i]);\n}\nprintf(\"]\\n\");\n// prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]", "java": "int[] myArray     = new int[]{3, 4, 6, 10, 11, 15};\nint[] alicesArray = new int[]{1, 5, 8, 12, 14, 19};\n\nSystem.out.println(mergeArrays(myArray, alicesArray));\n// prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]", "cpp": "const vector&lt;int> myVector {3, 4, 6, 10, 11, 15};\nconst vector&lt;int> alicesVector {1, 5, 8, 12, 14, 19};\n\nvector&lt;int> mergedVector = mergeVectors(myVector, alicesVector);\ncout &lt;&lt; \"[\";\nfor(size_t i = 0; i &lt; mergedVector.size(); ++i) {\n    if (i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; mergedVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19]"}}, "funcs": {"question__merge-sorted-arrays__heapq-merge": {"default": "heapq.merge"}}, "vars": {"question__merge-sorted-arrays__current-index-mine": {"snake": "current_index_mine", "camel": "currentIndexMine"}, "question__merge-sorted-arrays__my-standard-list": {"cpp": "myVector", "snake": "my_array", "python": "my_list", "camel": "myArray"}, "question__merge-sorted-arrays__next": {"default": "next"}, "question__merge-sorted-arrays__current-index-alices": {"snake": "current_index_alices", "camel": "currentIndexAlices"}, "question__merge-sorted-arrays__alices-standard-list": {"cpp": "alicesVector", "snake": "alices_array", "python": "alices_list", "camel": "alicesArray"}, "question__merge-sorted-arrays__current-index-merged": {"snake": "current_index_merged", "camel": "currentIndexMerged"}, "question__merge-sorted-arrays__merged-standard-list": {"cpp": "mergedVector", "snake": "merged_array", "python": "merged_list", "camel": "mergedArray"}}, "words": {"question__merge-sorted-arrays__if-statement-avoiding-errors": {"javascript": "The if statement is carefully constructed to avoid indexing into an empty array, because JavaScript would give us <span code-inline=\"undefined\">undefined</span> and we don't want to compare <span code-inline=\"undefined\">undefined</span> with an integer. We take advantage of JavaScript's <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the arrays are exhausted.", "ruby": "The if statement is carefully constructed to avoid indexing into an empty array, because Ruby would give us <span code-inline=\"nil\">nil</span> and we'd get a <span code-inline=\"no-method-error\">NoMethodError</span> or an <span code-inline=\"argument-error\">ArgumentError</span> when we tried comparing <span code-inline=\"nil\">nil</span> with an integer. We take advantage of Ruby's <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the arrays are exhausted.", "python": "The if statement is carefully constructed to avoid <span code-inline=\"an-index-error\">an IndexError</span> from indexing into an empty array. We take advantage of <span words=\"c18n-language\">Python</span>'s <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the <span words=\"standard-list\">list</span>s are exhausted.", "default": "The if statement is carefully constructed to avoid <span code-inline=\"an-index-error\"/> from indexing into an empty array. We take advantage of <span words=\"c18n-language\"/>'s <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the <span words=\"standard-list\"/>s are exhausted.", "c": "The if statement is carefully constructed to avoid <span code-inline=\"an-index-error\">a segfault</span> from indexing into an empty array. We take advantage of <span words=\"c18n-language\">C (beta)</span>'s <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the <span words=\"standard-list\">array</span>s are exhausted.", "java": "The if statement is carefully constructed to avoid <span code-inline=\"an-index-error\">an ArrayIndexOutOfBoundsException</span> from indexing into an empty array. We take advantage of <span words=\"c18n-language\">Java</span>'s <span concept=\"lazy\">lazy evaluation</span> and check <em>first</em> if the <span words=\"standard-list\">array</span>s are exhausted.", "cpp": "The if statement is carefully constructed to avoid undefined behavior from indexing past the end of the vector.\nWe take advantage of C++ <span concept=\"lazy\">short circuit evaluation</span> and check <em>first</em> if the vectors are exhausted."}, "question__merge-sorted-arrays__sorting-trivia": {"javascript": "", "python": "<p>\n    <strong>Trivia!</strong> Python's native sorting algorithm is called <span code-inline=\"timsort\">Timsort</span>. It's actually <em>optimized</em> for sorting lists where subsections of the lists are already sorted. For this reason, a more naive algorithm:\n</p>\n<div code-block=\"python-native-sorted\" language=\"python\" translation-highlighting=\"static\">def merge_sorted_lists(arr1, arr2):\n    return sorted(arr1 + arr2)</div>\n<p>\n    is actually <em>faster</em> until <span math=\"\">n</span> gets <em>pretty</em> big. Like 1,000,000.\n</p>\n<p>\n    Also, in Python 2.6+, there's a built-in function for merging sorted lists into one sorted list: <span func=\"heapq-merge\">heapq.merge</span>.\n</p>", "ruby": "", "default": "", "c": "", "java": "", "cpp": ""}, "question__merge-sorted-arrays__a-standard-list-of-sorted-standard-lists-em": {"javascript": "<em><span words=\"a-standard-list\">an array</span> of sorted <span words=\"standard-list\">array</span>s</em>", "python": "<em><span words=\"a-standard-list\">a list</span> of sorted <span words=\"standard-list\">list</span>s</em>", "ruby": "<em><span words=\"a-standard-list\">an array</span> of sorted <span words=\"standard-list\">array</span>s</em>", "default": "<em><span words=\"a-standard-list\"/> of sorted <span words=\"standard-list\"/>s</em>", "c": "<em><span words=\"a-standard-list\">an array</span> of sorted <span words=\"standard-list\">array</span>s</em>", "java": "<em><span words=\"a-standard-list\">an array</span> of sorted <span words=\"standard-list\">array</span>s</em>", "cpp": "<em><span words=\"a-standard-list\">a vector</span> of sorted <span words=\"standard-list\">vector</span>s</em>"}, "question__merge-sorted-arrays__what-happens-with-squish": {"javascript": "<p>\n    <span code-inline=\"my-array-current-index-mine\">myArray[currentIndexMine]</span> will be <span code-inline=\"undefined\">undefined</span>. But our code will still work! JavaScript gives <span code-inline=\"false\">false</span> for any comparison with <span code-inline=\"undefined\">undefined</span>, and we <em>want</em> false here&#8212;we're checking if the element in <span var=\"my-standard-list\">myArray</span> comes first, and it <em>doesn't</em> if <span var=\"my-standard-list\">myArray</span> is empty. But this code wouldn't work in many other languages&#8212;we'd get an error when we tried to access an element in an empty array or compare a number with a non-numerical value like <span code-inline=\"undefined\">undefined</span>.\n</p>\n<p>\n    Even though our code <em>works</em>, it's messy to access and compare an element that doesn't exist. Let's adjust our code so we're more explicit and don't rely on JavaScript's uncommon and nonobvious behavior of giving <span code-inline=\"false\">false</span> in comparisons with <span code-inline=\"undefined\">undefined</span>.\n</p>", "ruby": "<p>\n    We'll get a <span code-inline=\"no-method-error\">NoMethodError</span> when we try calling \"less than\" on <span code-inline=\"my-array-current-index-mine\">my_array[current_index_mine]</span> because it'll be <span code-inline=\"nil\">nil</span>!\n</p>\n<p>\n    How can we fix this?\n</p>", "python": "<p>\n    We'll get <span code-inline=\"an-index-error\">an IndexError</span> when we try to access <span code-inline=\"my-array-current-index-mine\">my_list[current_index_mine]</span>!\n</p>\n<p>\n    How can we fix this?\n</p>", "default": "<p>\n    We'll get <span code-inline=\"an-index-error\"/> when we try to access <span code-inline=\"my-array-current-index-mine\"/>!\n</p>\n<p>\n    How can we fix this?\n</p>", "c": "<p>\n    We'll get <span code-inline=\"an-index-error\">a segfault</span> when we try to access <span code-inline=\"my-array-current-index-mine\">myArray[currentIndexMine]</span>!\n</p>\n<p>\n    How can we fix this?\n</p>", "java": "<p>\n    We'll get <span code-inline=\"an-index-error\">an ArrayIndexOutOfBoundsException</span> when we try to access <span code-inline=\"my-array-current-index-mine\">myArray[currentIndexMine]</span>!\n</p>\n<p>\n    How can we fix this?\n</p>", "cpp": "<p>\n    We'll get <span code-inline=\"an-index-error\">a segfault</span> when we try to access <span code-inline=\"my-array-current-index-mine\">myVector[currentIndexMine]</span>!\n</p>\n<p>\n    How can we fix this?\n</p>"}, "question__merge-sorted-arrays__a-standard-list": {"javascript": "an array", "python": "a list", "default": "a list", "php": "an array", "ruby": "an array", "swift": "an array", "cpp": "a vector", "objectivec": "an array", "csharp": "a list", "c": "an array", "java": "an array"}, "question__merge-sorted-arrays__standard-list": {"javascript": "array", "python": "list", "default": "list", "php": "array", "ruby": "array", "swift": "array", "cpp": "vector", "objectivec": "array", "csharp": "list", "c": "array", "java": "array"}, "question__merge-sorted-arrays__edge-case-handling": {"javascript": "If both arrays are empty, we're fine. But for all the other edge cases, at some point <span var=\"current-index-mine\">currentIndexMine</span> or <span var=\"current-index-alices\">currentIndexAlices</span> will be <span code-inline=\"undefined\">undefined</span> because there won't be an element at one of those indices. Then JavaScript will compare <span code-inline=\"undefined\">undefined</span> with a number, which will always be false, and <span var=\"merged-standard-list\">mergedArray</span> might be out of order or contain <span code-inline=\"undefined\">undefined</span>!", "ruby": "If both arrays are empty, we're fine. But for all the other edge cases, at some point <span var=\"current-index-mine\">current_index_mine</span> or <span var=\"current-index-alices\">current_index_alices</span> will be <span code-inline=\"nil\">nil</span> because there won't be an element at one of those indices. So we'll either get a <span code-inline=\"no-method-error\">NoMethodError</span> for calling \"less than\" on <span code-inline=\"nil\">nil</span>, or an <span code-inline=\"argument-error\">ArgumentError</span> for calling \"less than\" on an integer but passing <span code-inline=\"nil\">nil</span> as an argument! (Remember, <span code-inline=\"less-than-shorthand\">9 &lt; 1</span> is just shorthand for <span code-inline=\"less-than-as-function\">9.&lt;(1)</span>)", "python": "We'll get <span code-inline=\"an-index-error\">an IndexError</span> in all three cases!", "default": "We'll get <span code-inline=\"an-index-error\"/> in all three cases!", "c": "We'll get <span code-inline=\"an-index-error\">a segfault</span> in all three cases!", "java": "We'll get <span code-inline=\"an-index-error\">an ArrayIndexOutOfBoundsException</span> in all three cases!", "cpp": "We'll get <span code-inline=\"an-index-error\">a segfault</span> in all three cases!"}, "question__merge-sorted-arrays__c18n-language": {"javascript": "JavaScript", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "java": "Java", "cpp": "C++ (beta)"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/merge-sorted-arrays&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/jquery.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/underscore-min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/angular-seo.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/base.js"></script>

    
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/prism.min.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/codemirror.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/python.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/ruby.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/javascript.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/clike.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/php.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/haskell.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./43.Merge Sorted Arrays _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./43.Merge Sorted Arrays _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./43.Merge Sorted Arrays _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./43.Merge Sorted Arrays _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="SMQ64aPhuT1s0FWN8La9f60r9jRfnZLzplfsmf0b0sj9PK8TwgpsMPo9u87IBdZO">
<div id="loading">
. . .
</div>


<link href="./43.Merge Sorted Arrays _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default488460_provider" id="stripeXDM_default488460_provider" src="./43.Merge Sorted Arrays _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./43.Merge Sorted Arrays _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket84492" src="./43.Merge Sorted Arrays _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>