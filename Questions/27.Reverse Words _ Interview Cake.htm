<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0059)https://www.interviewcake.com/question/python/reverse-words -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./27.Reverse Words _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./27.Reverse Words _ Interview Cake_files/visits"></script><script type="text/javascript" src="./27.Reverse Words _ Interview Cake_files/9e57878e2e"></script><script src="./27.Reverse Words _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./27.Reverse Words _ Interview Cake_files/track"></script><script type="text/javascript" src="./27.Reverse Words _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./27.Reverse Words _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./27.Reverse Words _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./27.Reverse Words _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":275}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/reverse-words">
        <meta name="description" content="Write a function to reverse the word order of a string, in-place. It&#39;s to decipher a supersecret message and win the war.">

        

        <meta property="og:title" content="Reverse Words | Interview Cake">
        <meta property="og:description" content="Write a function to reverse the word order of a string, in-place. It&#39;s to decipher a supersecret message and win the war.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/reverse-words">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Reverse Words | Interview Cake">
        <meta name="twitter:description" content="Write a function to reverse the word order of a string, in-place. It&#39;s to decipher a supersecret message and win the war.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Reverse Words | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./27.Reverse Words _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./27.Reverse Words _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./27.Reverse Words _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./27.Reverse Words _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./27.Reverse Words _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./27.Reverse Words _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./27.Reverse Words _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./27.Reverse Words _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./27.Reverse Words _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./27.Reverse Words _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./27.Reverse Words _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./27.Reverse Words _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/reverse-words" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/reverse-words" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/reverse-words" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/reverse-words" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words" aria-describedby="tooltip892945">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip892945" style="top: 93px; left: 988.75px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Reverse Words</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;reverse-words&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Reverse Words" data-meta_desc="Write a function to reverse the word order of a string, in-place. It&#39;s to decipher a supersecret message and win the war." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="10" data-num-hints="12" data-num-gotchas="2" ng-init="setNumHints(12); setNumGotchas(2); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You're working on a secret team solving coded transmissions.
</strong>
</p>
<p class="ng-scope">
Your team is scrambling to decipher a recent message, worried it's a plot to break into a major European National Cake Vault. The message has been <em>mostly</em> deciphered, but all the words are backwards! Your colleagues have handed off the last step to you.
</p>
<p class="ng-scope">
Write a function <span class="ic-function ng-isolate-scope" func="question__reverse-words__reverse-words"><span class="name" ng-transclude=""><span class="ng-scope">reverse_words</span></span>()</span> that takes a string <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__reverse-words__message"><span class="ng-scope">message</span></span> and reverses the order of the words <span concept="in-place" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">in-place</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
An <strong>in-place</strong> algorithm operates <em>directly</em> on its input and <em>changes</em> it, instead of creating and returning a <em>new</em> object. This is sometimes called <strong>destructive</strong>, since the original input is "destroyed" when it's edited to create the new output.
</p>

<p>
<strong>Careful: "In-place" does <em>not</em> mean "without creating any additional variables"!</strong> Rather, it means "without creating a new copy of the input." In general, an in-place function will only create additional variables that are <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>

<p>
Here are two functions that do the same operation, except one is in-place and the other is out-of-place:
</p>

<div code-block="concept__in-place__in-place-and-out-of-place" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">square_list_in_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># enumerate() lets us get the index and element</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        int_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*=</span> element

    <span class="token comment" spellcheck="true"># NOTE: we don't /need/ to return anything</span>
    <span class="token comment" spellcheck="true"># this is just a convenience</span>
    <span class="token keyword">return</span> int_list

<span class="token keyword">def</span> <span class="token function">square_list_out_of_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we allocate a new list with the length of the input list</span>
    squared_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        squared_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token keyword">return</span> squared_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Working in-place is a good way to save space.</strong> An in-place algorithm will generally have <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space cost.
</p>

<p>
<strong>
But be careful: an in-place algorithm can cause side effects.
</strong>
Your input is "destroyed" or "altered," which can affect code <em>outside</em> of your function. For example:
</p>

<div code-block="concept__in-place__side-effect" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
squared_list  <span class="token operator">=</span> square_list_in_place<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">"squared: %s"</span> <span class="token operator">%</span> squared_list
<span class="token comment" spellcheck="true"># prints: squared: [4, 9, 16, 25]</span>

<span class="token keyword">print</span> <span class="token string">"original list: %s"</span> <span class="token operator">%</span> original_list
<span class="token comment" spellcheck="true"># prints: original list: [4, 9, 16, 25], confusingly!</span>

<span class="token comment" spellcheck="true"># and if square_list_in_place() didn't return anything,</span>
<span class="token comment" spellcheck="true"># which it could reasonably do, squared_list would be None!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Generally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you're very space constrained or you're <em>positive</em> you don't need the original input anymore, even for debugging.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__in-place__in-place-and-out-of-place": {"java": {"tests": "int[] inPlaceArray = new int[]{1, 2, 3};\nt.squareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, new int[]{1, 4, 9});\n\nint[] outOfPlaceArray = new int[]{2, 3, 4};\nint[] squaredArrayResult = t.squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, new int[]{4, 9, 16});\nassertEqual(outOfPlaceArray, new int[]{2, 3, 4});", "code": "public int[] squareArrayInPlace(int[] intArray) {\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        intArray[i] *= intArray[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\npublic int[] squareArrayOutOfPlace(int[] intArray) {\n\n    // we allocate a new array with the length of the input array\n    int[] squaredArray = new int[intArray.length];\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        squaredArray[i] = (int) Math.pow(intArray[i], 2);\n    }\n\n    return squaredArray;\n}"}, "python": {"tests": "in_place_list = [1, 2, 3]\nsquare_list_in_place(in_place_list)\nassert in_place_list == [1, 4, 9]\n\nout_of_place_list = [2, 3, 4]\nsquared_array_result = square_list_out_of_place(out_of_place_list)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_list == [2, 3, 4]", "code": "def square_list_in_place(int_list):\n\n    # enumerate() lets us get the index and element\n    for index, element in enumerate(int_list):\n        int_list[index] *= element\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_list\n\ndef square_list_out_of_place(int_list):\n\n    # we allocate a new list with the length of the input list\n    squared_list = [None] * len(int_list)\n\n    for index, element in enumerate(int_list):\n        squared_list[index] = element ** 2\n\n    return squared_list"}, "c": {"tests": "{\n    char msg[256];\n    int inPlaceArray[3] = {1, 2, 3};\n    int inPlaceArrayExpectedResult[3] = {1, 4, 9};\n\n    squareArrayInPlace(inPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'inPlaceArray == inPlaceArrayExpectedResult'\");\n    ASSERT_EQUAL(inPlaceArray, inPlaceArrayExpectedResult, sizeof(inPlaceArray), msg);\n\n    int outOfPlaceArray[3] = {2, 3, 4};\n    int squaredArrayExpectedResult[3] = {4, 9, 16};\n    int *squaredArrayResult;\n    int tempArray[3];\n\n    memcpy(tempArray, outOfPlaceArray, sizeof(outOfPlaceArray));\n    squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'squaredArrayResult == squaredArrayExpectedResult'\");\n    ASSERT_EQUAL(squaredArrayResult, squaredArrayExpectedResult, sizeof(squaredArrayResult), msg);\n    free(squaredArrayResult);\n\n    snprintf(msg, sizeof(msg), \"%s\", \"'outOfPlaceArray == tempArray'\");\n    ASSERT_EQUAL(outOfPlaceArray, tempArray, sizeof(outOfPlaceArray), msg);\n}", "code": "int *squareArrayInPlace(int *intArray, size_t length) {\n    size_t i;\n\n    for (i = 0; i &lt; length; i++) {\n        intArray[i] *= intArray[i];\n    }\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nint *squareArrayOutOfPlace(int *intArray, size_t length) {\n    size_t i;\n    // we allocate a new array with the length of the input array\n    int *squaredArray = malloc(length * sizeof(int));\n\n    assert(squaredArray != NULL);\n    for (i = 0; i &lt; length; i++) {\n        squaredArray[i] = intArray[i] * intArray[i];\n    }\n\n    return squaredArray;\n}"}, "ruby": {"tests": "in_place_array = [1, 2, 3]\nsquare_array_in_place(in_place_array)\nassert in_place_array == [1, 4, 9]\n\nout_of_place_array = [2, 3, 4]\nsquared_array_result = square_array_out_of_place(out_of_place_array)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_array == [2, 3, 4]", "code": "def square_array_in_place(int_array)\n\n    int_array.each_with_index do |element, index|\n        int_array[index] *= element\n    end\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_array\nend\n\ndef square_array_out_of_place(int_array)\n\n    # we allocate a new array with the length of the input array\n    squared_array = [nil] * int_array.length\n\n    int_array.each_with_index do |element, index|\n        squared_array[index] = element ** 2\n    end\n\n    return squared_array\nend"}, "javascript": {"tests": "var inPlaceArray = [1, 2, 3];\nsquareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, [1, 4, 9]);\n\nvar outOfPlaceArray = [2, 3, 4];\nvar squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, [4, 9, 16]);\nassertEqual(outOfPlaceArray, [2, 3, 4]);", "code": "function squareArrayInPlace(intArray) {\n\n    intArray.forEach(function(int, index) {\n        intArray[index] *= int;\n    });\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nfunction squareArrayOutOfPlace(intArray) {\n\n    // we allocate a new array with the length of the input array\n    var squaredArray = [];\n\n    intArray.forEach(function(int, index) {\n        squaredArray[index] = Math.pow(int, 2);\n    });\n\n    return squaredArray;\n}"}, "cpp": {"tests": "vector<int> inPlaceVector {1, 2, 3};\nsquareVectorInPlace(inPlaceVector);\nconst vector<int> test1Result {1, 4, 9};\nassertEqual(inPlaceVector, test1Result);\n\nconst vector<int> outOfPlaceVector {2, 3, 4};\nvector<int> squaredVectorResult = squareVectorOutOfPlace(outOfPlaceVector);\nconst vector<int> test2aResult {4, 9, 16};\nconst vector<int> test2bResult {2, 3, 4};\nassertEqual(squaredVectorResult, test2aResult);\nassertEqual(outOfPlaceVector, test2bResult);", "code": "vector&lt;int>& squareVectorInPlace(vector&lt;int>& intVector)\n{\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        intVector[i] *= intVector[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intVector;\n}\n\nvector&lt;int> squareVectorOutOfPlace(const vector&lt;int>& intVector)\n{\n    // we create a new vector with the size of the input vector\n    vector&lt;int> squaredVector(intVector.size());\n\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        int item = intVector[i];\n        squaredVector[i] =  item * item;\n    }\n\n    return squaredVector;\n}"}}, "concept__in-place__side-effect": {"java": "int[] originalArray = new int[]{2, 3, 4, 5};\nint[] squaredArray  = squareArrayInPlace(originalArray);\n\nSystem.out.println(\"squared: \" + Arrays.toString(squaredArray));\n// prints: squared: [4, 9, 16, 25]\n\nSystem.out.println(\"original array: \" + Arrays.toString(originalArray));\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be null!", "python": "original_list = [2, 3, 4, 5]\nsquared_list  = square_list_in_place(original_list)\n\nprint \"squared: %s\" % squared_list\n# prints: squared: [4, 9, 16, 25]\n\nprint \"original list: %s\" % original_list\n# prints: original list: [4, 9, 16, 25], confusingly!\n\n# and if square_list_in_place() didn't return anything,\n# which it could reasonably do, squared_list would be None!", "c": "size_t i;\nconst size_t originalArrayLength = 4;\nint originalArray[4] = {2, 3, 4, 5};\nint *squaredArray = squareArrayInPlace(originalArray, originalArrayLength);\n\nprintf(\"squared array: [\");\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", squaredArray[i]);\n}\nprintf(\"]\\n\");\n// prints: squared array: [4, 9, 16, 25]\n\nprintf(\"original array: [\";\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", originalArray[i]);\n}\nprintf(\"]\\n\");\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredArray!", "ruby": "original_array = [2, 3, 4, 5]\nsquared_array  = square_array_in_place(original_array)\n\nputs \"squared: #{squared_array}\"\n# prints: squared: [4, 9, 16, 25]\n\nputs \"original array: #{original_array}\"\n# prints: original array: [4, 9, 16, 25], confusingly!\n\n# and if square_array_in_place() didn't return anything,\n# which it could reasonably do, squared_array would be nil!", "javascript": "var originalArray = [2, 3, 4, 5];\nvar squaredArray  = squareArrayInPlace(originalArray);\n\nconsole.log('squared: ' + squaredArray);\n// logs: squared: 4,9,16,25\n\nSystem.out.println(\"original array: \" + originalArray);\n// logs: original array: 4,9,16,25 - confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be undefined!", "cpp": "vector&lt;int> originalVector = {2, 3, 4, 5};\nvector&lt;int>& squaredVector  = squareVectorInPlace(originalArray);\n\ncout &lt;&lt; \"squared vector: [\";\nfor (size_t i = 0; i &lt; squaredVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; squaredVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: squared vector: [4, 9, 16, 25]\n\ncout &lt;&lt; \"original vector: [\";\nfor (size_t i = 0; i &lt; originalVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; originalVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: original vector: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredVector!"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__immutable-strings"><p class="aside ng-scope">
    Since strings in <span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span> are <strong><span concept="mutable" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">immutable</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>mutable</strong> object can be changed after it's created, and an <strong>immutable</strong> object can't.
</p>

<p>
For example, let's look at <strong>lists</strong> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__mutable__list-explanation"></span> and <strong>tuples</strong> in Python. Lists are mutable and tuples are immutable:
</p>

<div code-block="concept__mutable__python-lists-and-tuples" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token comment" spellcheck="true"># Python</span>

int_list  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
int_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>

int_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment" spellcheck="true"># list is now [1, 9]</span>

int_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment" spellcheck="true"># raises: TypeError: 'tuple' object does not support item assignment</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Different languages have different policies on whether strings should be mutable. Ruby has mutable strings:
</p>

<div code-block="concept__mutable__ruby-strings" language="ruby" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-ruby">  <code class=" language-ruby" ng-transclude="">test_string <span class="token operator">=</span> <span class="token string">'mutable?'</span>
test_string<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span>
<span class="token comment" spellcheck="true"># string is now 'mutable!'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Ruby</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
But strings are <em>immutable</em> in Python:
</p>

<div code-block="concept__mutable__python-strings" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">test_string <span class="token operator">=</span> <span class="token string">'mutable?'</span>
test_string<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span>
<span class="token comment" spellcheck="true"># TypeError: 'str' object does not support item assignment</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
And strings are also immutable in JavaScript:
</p>

<div code-block="concept__mutable__javascript-strings" language="javascript" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-javascript">  <code class=" language-javascript" ng-transclude=""><span class="token keyword">var</span> testString <span class="token operator">=</span> <span class="token string">'mutable?'</span><span class="token punctuation">;</span>
testString<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// string is still 'mutable?'</span>
<span class="token comment" spellcheck="true">// (but no error is raised!)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">JavaScript</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
In C++ and C, strings can either be mutable or immutable, depending on whether the string is declared with the <strong>const</strong> modifier:
</p>

<div code-block="concept__mutable__cpp-strings" language="cpp" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-cpp">  <code class=" language-cpp" ng-transclude="">string <span class="token function">testString</span><span class="token punctuation">(</span><span class="token string">"mutable?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testString<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// testString is now "mutable!"</span>

<span class="token keyword">const</span> string <span class="token function">testString2</span><span class="token punctuation">(</span><span class="token string">"mutable?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testString2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// compile-time error</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">C++ (beta)</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<div code-block="concept__mutable__c-strings" language="c" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-c">  <code class=" language-c" ng-transclude=""><span class="token keyword">char</span> testString<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mutable?"</span><span class="token punctuation">;</span>
testString<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// testString is now "mutable!"</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> testString2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mutable?"</span><span class="token punctuation">;</span>
testString2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// compile-time error</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">C (beta)</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Mutable objects are nice because you can make changes "in-place," without allocating a new object. But be careful—whenever you make an in-place change to an object, <em>all</em> references to that object will now reflect the change (whether you like it or not)!
</p>

<!--
vars should not change based on the current content
language - their context is already language specific
-->
<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__mutable__cpp-strings": {"default": "string testString(\"mutable?\");\ntestString[7] = '!';\n// testString is now \"mutable!\"\n\nconst string testString2(\"mutable?\");\ntestString2[7] = '!'; // compile-time error"}, "concept__mutable__javascript-strings": {"default": "var testString = 'mutable?';\ntestString[7] = '!';\n// string is still 'mutable?'\n// (but no error is raised!)"}, "concept__mutable__ruby-strings": {"default": "test_string = 'mutable?'\ntest_string[7] = '!'\n# string is now 'mutable!'"}, "concept__mutable__python-lists-and-tuples": {"default": "# Python\n\nint_list  = [4, 9]\nint_tuple = (4, 9)\n\nint_list[0] = 1\n# list is now [1, 9]\n\nint_tuple[0] = 1\n# raises: TypeError: 'tuple' object does not support item assignment"}, "concept__mutable__c-strings": {"default": "char testString[16] = \"mutable?\";\ntestString[7] = '!';\n// testString is now \"mutable!\"\n\nconst char testString2[16] = \"mutable?\";\ntestString2[7] = '!'; // compile-time error"}, "concept__mutable__python-strings": {"default": "test_string = 'mutable?'\ntest_string[7] = '!'\n# TypeError: 'str' object does not support item assignment"}}, "words": {"concept__mutable__list-explanation": {"java": "", "cpp": "", "c": "", "javascript": "", "ruby": "(dynamic arrays)", "python": "", "default": ""}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span></strong>, we'll first convert the string into <span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span> of characters, do the in-place word reversal on that <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span>, and re-join that <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span> into a string before returning it. This isn't technically "in-place" and the <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span> of characters will cost <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> additional space, but it's a reasonable way to stay within the spirit of the challenge. If you're comfortable coding in a language with mutable strings, that'd be even better!
</p></span>

<p class="ng-scope">
For example:
</p>
<div code-block="question__reverse-words__example-input-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">message <span class="token operator">=</span> <span class="token string">'find you will pain only go you recordings security the into if'</span>

reverse_words<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># returns: 'if into the security recordings you go only pain will you find'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
When writing your function, assume the message contains only letters and spaces, and all words are separated by one space.
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__final-space"><span class="ng-scope">Are you sure you're operating on the </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span><span class="ng-scope"> of characters </span><em class="ng-scope"><span concept="in-place" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">in-place</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
An <strong>in-place</strong> algorithm operates <em>directly</em> on its input and <em>changes</em> it, instead of creating and returning a <em>new</em> object. This is sometimes called <strong>destructive</strong>, since the original input is "destroyed" when it's edited to create the new output.
</p>

<p>
<strong>Careful: "In-place" does <em>not</em> mean "without creating any additional variables"!</strong> Rather, it means "without creating a new copy of the input." In general, an in-place function will only create additional variables that are <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>

<p>
Here are two functions that do the same operation, except one is in-place and the other is out-of-place:
</p>

<div code-block="concept__in-place__in-place-and-out-of-place" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">square_list_in_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># enumerate() lets us get the index and element</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        int_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*=</span> element

    <span class="token comment" spellcheck="true"># NOTE: we don't /need/ to return anything</span>
    <span class="token comment" spellcheck="true"># this is just a convenience</span>
    <span class="token keyword">return</span> int_list

<span class="token keyword">def</span> <span class="token function">square_list_out_of_place</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we allocate a new list with the length of the input list</span>
    squared_list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

    <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        squared_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token keyword">return</span> squared_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Working in-place is a good way to save space.</strong> An in-place algorithm will generally have <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space cost.
</p>

<p>
<strong>
But be careful: an in-place algorithm can cause side effects.
</strong>
Your input is "destroyed" or "altered," which can affect code <em>outside</em> of your function. For example:
</p>

<div code-block="concept__in-place__side-effect" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
squared_list  <span class="token operator">=</span> square_list_in_place<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">"squared: %s"</span> <span class="token operator">%</span> squared_list
<span class="token comment" spellcheck="true"># prints: squared: [4, 9, 16, 25]</span>

<span class="token keyword">print</span> <span class="token string">"original list: %s"</span> <span class="token operator">%</span> original_list
<span class="token comment" spellcheck="true"># prints: original list: [4, 9, 16, 25], confusingly!</span>

<span class="token comment" spellcheck="true"># and if square_list_in_place() didn't return anything,</span>
<span class="token comment" spellcheck="true"># which it could reasonably do, squared_list would be None!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Generally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you're very space constrained or you're <em>positive</em> you don't need the original input anymore, even for debugging.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__in-place__in-place-and-out-of-place": {"java": {"tests": "int[] inPlaceArray = new int[]{1, 2, 3};\nt.squareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, new int[]{1, 4, 9});\n\nint[] outOfPlaceArray = new int[]{2, 3, 4};\nint[] squaredArrayResult = t.squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, new int[]{4, 9, 16});\nassertEqual(outOfPlaceArray, new int[]{2, 3, 4});", "code": "public int[] squareArrayInPlace(int[] intArray) {\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        intArray[i] *= intArray[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\npublic int[] squareArrayOutOfPlace(int[] intArray) {\n\n    // we allocate a new array with the length of the input array\n    int[] squaredArray = new int[intArray.length];\n\n    for (int i = 0; i &lt; intArray.length; i++) {\n        squaredArray[i] = (int) Math.pow(intArray[i], 2);\n    }\n\n    return squaredArray;\n}"}, "python": {"tests": "in_place_list = [1, 2, 3]\nsquare_list_in_place(in_place_list)\nassert in_place_list == [1, 4, 9]\n\nout_of_place_list = [2, 3, 4]\nsquared_array_result = square_list_out_of_place(out_of_place_list)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_list == [2, 3, 4]", "code": "def square_list_in_place(int_list):\n\n    # enumerate() lets us get the index and element\n    for index, element in enumerate(int_list):\n        int_list[index] *= element\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_list\n\ndef square_list_out_of_place(int_list):\n\n    # we allocate a new list with the length of the input list\n    squared_list = [None] * len(int_list)\n\n    for index, element in enumerate(int_list):\n        squared_list[index] = element ** 2\n\n    return squared_list"}, "c": {"tests": "{\n    char msg[256];\n    int inPlaceArray[3] = {1, 2, 3};\n    int inPlaceArrayExpectedResult[3] = {1, 4, 9};\n\n    squareArrayInPlace(inPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'inPlaceArray == inPlaceArrayExpectedResult'\");\n    ASSERT_EQUAL(inPlaceArray, inPlaceArrayExpectedResult, sizeof(inPlaceArray), msg);\n\n    int outOfPlaceArray[3] = {2, 3, 4};\n    int squaredArrayExpectedResult[3] = {4, 9, 16};\n    int *squaredArrayResult;\n    int tempArray[3];\n\n    memcpy(tempArray, outOfPlaceArray, sizeof(outOfPlaceArray));\n    squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray, 3);\n    snprintf(msg, sizeof(msg), \"%s\", \"'squaredArrayResult == squaredArrayExpectedResult'\");\n    ASSERT_EQUAL(squaredArrayResult, squaredArrayExpectedResult, sizeof(squaredArrayResult), msg);\n    free(squaredArrayResult);\n\n    snprintf(msg, sizeof(msg), \"%s\", \"'outOfPlaceArray == tempArray'\");\n    ASSERT_EQUAL(outOfPlaceArray, tempArray, sizeof(outOfPlaceArray), msg);\n}", "code": "int *squareArrayInPlace(int *intArray, size_t length) {\n    size_t i;\n\n    for (i = 0; i &lt; length; i++) {\n        intArray[i] *= intArray[i];\n    }\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nint *squareArrayOutOfPlace(int *intArray, size_t length) {\n    size_t i;\n    // we allocate a new array with the length of the input array\n    int *squaredArray = malloc(length * sizeof(int));\n\n    assert(squaredArray != NULL);\n    for (i = 0; i &lt; length; i++) {\n        squaredArray[i] = intArray[i] * intArray[i];\n    }\n\n    return squaredArray;\n}"}, "ruby": {"tests": "in_place_array = [1, 2, 3]\nsquare_array_in_place(in_place_array)\nassert in_place_array == [1, 4, 9]\n\nout_of_place_array = [2, 3, 4]\nsquared_array_result = square_array_out_of_place(out_of_place_array)\nassert squared_array_result == [4, 9, 16]\nassert out_of_place_array == [2, 3, 4]", "code": "def square_array_in_place(int_array)\n\n    int_array.each_with_index do |element, index|\n        int_array[index] *= element\n    end\n\n    # NOTE: we don't /need/ to return anything\n    # this is just a convenience\n    return int_array\nend\n\ndef square_array_out_of_place(int_array)\n\n    # we allocate a new array with the length of the input array\n    squared_array = [nil] * int_array.length\n\n    int_array.each_with_index do |element, index|\n        squared_array[index] = element ** 2\n    end\n\n    return squared_array\nend"}, "javascript": {"tests": "var inPlaceArray = [1, 2, 3];\nsquareArrayInPlace(inPlaceArray);\nassertEqual(inPlaceArray, [1, 4, 9]);\n\nvar outOfPlaceArray = [2, 3, 4];\nvar squaredArrayResult = squareArrayOutOfPlace(outOfPlaceArray);\nassertEqual(squaredArrayResult, [4, 9, 16]);\nassertEqual(outOfPlaceArray, [2, 3, 4]);", "code": "function squareArrayInPlace(intArray) {\n\n    intArray.forEach(function(int, index) {\n        intArray[index] *= int;\n    });\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intArray;\n}\n\nfunction squareArrayOutOfPlace(intArray) {\n\n    // we allocate a new array with the length of the input array\n    var squaredArray = [];\n\n    intArray.forEach(function(int, index) {\n        squaredArray[index] = Math.pow(int, 2);\n    });\n\n    return squaredArray;\n}"}, "cpp": {"tests": "vector<int> inPlaceVector {1, 2, 3};\nsquareVectorInPlace(inPlaceVector);\nconst vector<int> test1Result {1, 4, 9};\nassertEqual(inPlaceVector, test1Result);\n\nconst vector<int> outOfPlaceVector {2, 3, 4};\nvector<int> squaredVectorResult = squareVectorOutOfPlace(outOfPlaceVector);\nconst vector<int> test2aResult {4, 9, 16};\nconst vector<int> test2bResult {2, 3, 4};\nassertEqual(squaredVectorResult, test2aResult);\nassertEqual(outOfPlaceVector, test2bResult);", "code": "vector&lt;int>& squareVectorInPlace(vector&lt;int>& intVector)\n{\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        intVector[i] *= intVector[i];\n    }\n\n    // NOTE: we don't /need/ to return anything\n    // this is just a convenience\n    return intVector;\n}\n\nvector&lt;int> squareVectorOutOfPlace(const vector&lt;int>& intVector)\n{\n    // we create a new vector with the size of the input vector\n    vector&lt;int> squaredVector(intVector.size());\n\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        int item = intVector[i];\n        squaredVector[i] =  item * item;\n    }\n\n    return squaredVector;\n}"}}, "concept__in-place__side-effect": {"java": "int[] originalArray = new int[]{2, 3, 4, 5};\nint[] squaredArray  = squareArrayInPlace(originalArray);\n\nSystem.out.println(\"squared: \" + Arrays.toString(squaredArray));\n// prints: squared: [4, 9, 16, 25]\n\nSystem.out.println(\"original array: \" + Arrays.toString(originalArray));\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be null!", "python": "original_list = [2, 3, 4, 5]\nsquared_list  = square_list_in_place(original_list)\n\nprint \"squared: %s\" % squared_list\n# prints: squared: [4, 9, 16, 25]\n\nprint \"original list: %s\" % original_list\n# prints: original list: [4, 9, 16, 25], confusingly!\n\n# and if square_list_in_place() didn't return anything,\n# which it could reasonably do, squared_list would be None!", "c": "size_t i;\nconst size_t originalArrayLength = 4;\nint originalArray[4] = {2, 3, 4, 5};\nint *squaredArray = squareArrayInPlace(originalArray, originalArrayLength);\n\nprintf(\"squared array: [\");\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", squaredArray[i]);\n}\nprintf(\"]\\n\");\n// prints: squared array: [4, 9, 16, 25]\n\nprintf(\"original array: [\";\nfor (i = 0; i &lt; originalArrayLength; i++) {\n    if (i > 0) {\n        printf(\", \");\n    }\n    printf(\"%d\", originalArray[i]);\n}\nprintf(\"]\\n\");\n// prints: original array: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredArray!", "ruby": "original_array = [2, 3, 4, 5]\nsquared_array  = square_array_in_place(original_array)\n\nputs \"squared: #{squared_array}\"\n# prints: squared: [4, 9, 16, 25]\n\nputs \"original array: #{original_array}\"\n# prints: original array: [4, 9, 16, 25], confusingly!\n\n# and if square_array_in_place() didn't return anything,\n# which it could reasonably do, squared_array would be nil!", "javascript": "var originalArray = [2, 3, 4, 5];\nvar squaredArray  = squareArrayInPlace(originalArray);\n\nconsole.log('squared: ' + squaredArray);\n// logs: squared: 4,9,16,25\n\nSystem.out.println(\"original array: \" + originalArray);\n// logs: original array: 4,9,16,25 - confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, squaredArray would be undefined!", "cpp": "vector&lt;int> originalVector = {2, 3, 4, 5};\nvector&lt;int>& squaredVector  = squareVectorInPlace(originalArray);\n\ncout &lt;&lt; \"squared vector: [\";\nfor (size_t i = 0; i &lt; squaredVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; squaredVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: squared vector: [4, 9, 16, 25]\n\ncout &lt;&lt; \"original vector: [\";\nfor (size_t i = 0; i &lt; originalVector.size(); ++i) {\n    if(i > 0) {\n        cout &lt;&lt; \", \";\n    }\n    cout &lt;&lt; originalVector[i];\n}\ncout &lt;&lt; \"]\" &lt;&lt; endl;\n// prints: original vector: [4, 9, 16, 25], confusingly!\n\n// and if squareArrayInPlace() didn't return anything,\n// which it could reasonably do, we just could not initialize and use squaredVector!"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span></em><span class="ng-scope">?</span></span>
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>

<p class="ng-scope">
If you're swapping individual words one at a time, consider what happens when the words are different lengths. Isn't <em>each swap</em> <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case?
</p>
</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__start-rearranging-message"><p class="ng-scope">
    We'll start by converting the message string into <span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span> of characters.
</p>
<div code-block="question__reverse-words__convert-message-to-list" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">reverse_words</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    message_list <span class="token operator">=</span> list<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
    Now, how can we move things around?
</p></span>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let’s start with a simpler problem. What if we wanted to <strong>reverse all the characters</strong> in the message?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, we could swap the first character with the last character, then the second character with the second to last character, and so on, moving towards the middle. Can you implement this in code?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<div code-block="question__reverse-words__reverse-characters" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">reverse_characters</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    message_list <span class="token operator">=</span> list<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># walk towards the middle, from both sides</span>
    <span class="token keyword">for</span> front_index <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        back_index <span class="token operator">=</span> <span class="token operator">-</span>front_index <span class="token operator">-</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># swap the front char and back char</span>
        message_list<span class="token punctuation">[</span>front_index<span class="token punctuation">]</span><span class="token punctuation">,</span> message_list<span class="token punctuation">[</span>back_index<span class="token punctuation">]</span> <span class="token operator">=</span> \
            message_list<span class="token punctuation">[</span>back_index<span class="token punctuation">]</span><span class="token punctuation">,</span> message_list<span class="token punctuation">[</span>front_index<span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<!--
TODO: confirm this code sample works
-->

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__swap-two-elements"><p class="ng-scope">
    We're using a cute one-liner to do the swap. In other
    languages you might need to do the swap by hand,
    recording one of the values in
    a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__reverse-words__temp"><span class="ng-scope">temp</span></span> variable.
</p></span>

<p class="ng-scope">
Ok, looks good. <strong>Does this help us?</strong>
</p>

<p class="ng-scope">
Can we use the same concept but apply it to <em>words</em> instead of <em>characters</em>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Probably. We'll have to figure out a couple things:
</p>

<ol class="ng-scope">
<li>
How do we figure out where words begin and end? <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__no-split-allowed"></span>
</li>
<li>
Once we know the start and end indices of two words, how do we <em>swap</em> those two words?
</li>
</ol>

<p class="ng-scope">
We could attack either of those first, but I'm already seeing a potential problem in terms of runtime. Can you guess what it is?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What happens when you swap two words that <em>aren't</em> the same length?
</p>

<div code-block="question__reverse-words__the-eagle-has-landed" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">"the eagle has landed"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Supposing we already knew the start and end indices of 'the' and 'landed', how long would it take to swap them?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the total length of the string!
</p>

<p class="ng-scope">
Why? Notice that in addition to moving 'the' to the back and moving 'landed' to the front, we have to "scoot over" <em>everything in between</em>, since 'landed' is longer than 'eagle'.
</p>

<p class="ng-scope">
So what'll be the <em>total</em> time cost with this approach? Assume we'll be able to learn the start and end indices of all of our words in just one pass (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time).
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> total time. Why? In the worst case we have almost as many words as we have characters, and we're always swapping words of different lengths. For example:
</p>

<div code-block="question__reverse-words__letters-alternating-word-size" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">"a bb c dd e ff g hh"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
We take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time to swap the first and last words (we have to move all <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> characters):
</p>

<div code-block="question__reverse-words__letters-first-swap" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">'a bb c dd e ff g hh'</span> <span class="token comment" spellcheck="true"># input</span>
<span class="token string">'hh bb c dd e ff g a'</span> <span class="token comment" spellcheck="true"># first swap</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Then for the second swap:
</p>

<div code-block="question__reverse-words__letters-second-swap" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">'a bb c dd e ff g hh'</span> <span class="token comment" spellcheck="true"># input</span>
<span class="token string">'hh bb c dd e ff g a'</span> <span class="token comment" spellcheck="true"># first swap</span>
<span class="token string">'hh g c dd e ff bb a'</span> <span class="token comment" spellcheck="true"># second swap</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
We have to move all <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> characters <em>except</em> the first and last words, and a couple spaces. So we move <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n-5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">5</span></span></span></span></span> characters in total.
</p>

<p class="ng-scope">
For the third swap, we have another <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">5</span></span></span></span></span> characters we don't have to move. So we move <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">n-10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mord">0</span></span></span></span></span> in total. We'll end up with a series like this:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>5</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mn>0</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mn>5</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mn>6</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n + (n-5) + (n-10) + (n-15) + ... + 6 + 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">5</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mord">5</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mbin">+</span><span class="mord">6</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>

<p class="ng-scope">
This is a subsection of the common <span concept="triangular-series" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">triangular series</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>A <strong>triangular series</strong> is a series of numbers where each number could be the row of an equilateral triangle.</p>

<p>So 1, 2, 3, 4, 5 is a triangular series, because you could stack the numbers like this:</p>

<div class="diagram">
    <img src="./27.Reverse Words _ Interview Cake_files/triangular_series__triangle_of_stacked_circles.svg" height="102" width="120" alt="Rows of 1, 2, 3, 4, and 5 circles to show how numbers in a triangular series can be stacked to form a triangle.">


    
</div>


<p>Their sum is 15, which makes 15 a <strong>triangular number</strong>.</p>

<p>A triangular series <em>always</em> starts with 1 and increases by 1 with each number.</p>

<p>Since the only thing that changes in triangular series is the value of the highest number, it’s helpful to give that a name. Let’s call it <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__triangular-series__n"><span class="ng-scope">n</span></span>.</p>

<div code-block="concept__triangular-series__show-n" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token comment" spellcheck="true"># n is 8</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>Triangular series are nice because no matter how large <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__triangular-series__n"><span class="ng-scope">n</span></span> is, it’s always easy to find the total sum of all the numbers.</p>

<p>Take the example above. Notice that if we add the first and last numbers together, and then add the second and second-to-last numbers together, they have the same sum! This happens with <em>every</em> pair of numbers until we reach the middle. If we add up all the pairs of numbers, we get:</p>

<div code-block="concept__triangular-series__pairs-have-same-sum" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">9</span>
<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">9</span>
<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">9</span>
<span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">9</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>This is true for <em>every triangular series</em>:</p>
<ol>
<li>
<strong>Pairs of numbers</strong> on each side will always <strong>add up to the same value</strong>
</li>
<li>That value will always be <strong>1 more than the series’ <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__triangular-series__n"><span class="ng-scope">n</span></span></strong>
</li>
</ol>

<p>This gives us a pattern. Each pair's sum is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>, and there are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.695392em;"></span><span class="strut bottom" style="height: 1.04039em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> pairs. So our total sum is:

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>∗</mo><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">(n + 1) * \frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1.095em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>

</p>
<p>
Or:
</p>

<span class="only-fraction ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n^2 + n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.97032em;"></span><span class="strut bottom" style="height: 1.31532em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>

<p>
Ok, but does this work with triangular series with an <em>odd</em> number of elements? Yes. Let's say <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__triangular-series__n"><span class="ng-scope">n</span></span> is 5. So if we calculate the sum by hand:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>5</mn><mo>=</mo><mn>1</mn><mn>5</mn></mrow><annotation encoding="application/x-tex">1+2+3+4+5=15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">3</span><span class="mbin">+</span><span class="mord">4</span><span class="mbin">+</span><span class="mord">5</span><span class="mrel">=</span><span class="mord">1</span><span class="mord">5</span></span></span></span></span>

<p>
And if we use the formula, we get the same answer:
</p>

<!--
<span math block class="only-fraction">\frac{5^2 + 5}{2}=15</span>
-->
<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mn>5</mn><mn>2</mn></msup><mo>+</mo><mn>5</mn></mrow><mrow><mn>2</mn></mrow></mfrac><mo>=</mo><mn>1</mn><mn>5</mn></mrow><annotation encoding="application/x-tex">\frac{5^2 + 5}{2}=15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.97032em;"></span><span class="strut bottom" style="height: 1.31532em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord">5</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">1</span><span class="mord">5</span></span></span></span></span>

<!--
<p>
It works! Each pairing is still n+1, and we now have
</p>

<div code-block>
1 + 5 = 6
2 + 4 = 6
  3

# sum of pairs and remaining middle number 3 is 15
</div>
-->

<p>One more thing:
</p>
<p>
<strong>
What if we know <em>the total sum</em>, but we <em>don't</em> know the value of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__triangular-series__n"><span class="ng-scope">n</span></span>?
</strong>
</p>

<p>Let’s say we have:</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo separator="true">…</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>n</mi><mo>=</mo><mn>7</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">1 + 2 + 3 + \ldots + (n - 2) + (n - 1) + n = 78</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">3</span><span class="mbin">+</span><span class="mpunct">…</span><span class="mord">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">2</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord">7</span><span class="mord">8</span></span></span></span></span>

<p>No problem. We just use our formula and set it equal to the sum!</p>

<!--
<span math block class="only-fraction">\frac{n^2 + n}{2}=78</span>
-->
<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>=</mo><mn>7</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">\frac{n^2 + n}{2}=78</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.97032em;"></span><span class="strut bottom" style="height: 1.31532em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mrel">=</span><span class="mord">7</span><span class="mord">8</span></span></span></span></span>

<p>Now, we can rearrange our equation to get a <em>quadratic equation</em> (remember those?)</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>=</mo><mn>1</mn><mn>5</mn><mn>6</mn></mrow><annotation encoding="application/x-tex">n^2 + n = 156</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.897438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span></span></span></span></span>
<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mn>5</mn><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n^2 + n - 156 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.897438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span><span class="mrel">=</span><span class="mord">0</span></span></span></span></span>

<p>Here's the quadatic formula:</p>

<span class="only-fraction ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{-b\pm\sqrt{b^2-4ac}}{2a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 1.35em;"></span><span class="strut bottom" style="height: 1.695em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span><span class="mord mathit">a</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.531906em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">−</span><span class="mord mathit">b</span><span class="mbin">±</span><span class="sqrt mord"><span class="sqrt-sign" style="top: 0.0312936em;"><span class="style-wrap reset-scriptstyle textstyle uncramped">√</span></span><span class="vlist"><span class="" style="top: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1.42857em;">​</span></span><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span class="" style="top: -0.289em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord">4</span><span class="mord mathit">a</span><span class="mord mathit">c</span></span></span><span class="" style="top: -1.05442em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1.42857em;">​</span></span><span class="reset-scriptstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1.42857em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 1em;">​</span></span>​</span></span></span></span></span></span></span></span>

<p>
If you don't really remember how to use it, that's cool. You can just use an online calculator. We don't judge.
</p>

<p>Taking the positive solution, we get <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mn>2</mn></mrow><annotation encoding="application/x-tex">n = 12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord">1</span><span class="mord">2</span></span></span></span></span>.</p>

<p>So for a triangular series, remember—the total sum is:</p>

<span class="only-fraction ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n^2 + n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.97032em;"></span><span class="strut bottom" style="height: 1.31532em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__triangular-series__pairs-have-same-sum": {"default": "1 + 8 = 9\n2 + 7 = 9\n3 + 6 = 9\n4 + 5 = 9"}, "concept__triangular-series__show-n": {"java": "// n is 8\n1, 2, 3, 4, 5, 6, 7, 8", "default": "# n is 8\n1, 2, 3, 4, 5, 6, 7, 8", "cpp": "// n is 8\n1, 2, 3, 4, 5, 6, 7, 8", "c": "// n is 8\n1, 2, 3, 4, 5, 6, 7, 8", "javascript": "// n is 8\n1, 2, 3, 4, 5, 6, 7, 8"}}, "vars": {"concept__triangular-series__n": {"default": "n"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>. We're just skipping 4 terms between each term!
</p>

<p class="ng-scope">
So we have the sum of "every fifth number" from that triangular series. That means our sum will be about a fifth the sum of the original series! But in big O notation dividing by 5 is a constant, so we can throw it out. The original triangular series is <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, and so is our series with every fifth element!
</p>

<p class="ng-scope">
Okay, so <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time. That's pretty bad. It's <em>possible</em> that's the best we can do...but maybe we can do better?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's try manipulating a sample input by hand.
</p>

<p class="ng-scope">
And remember what we did for our character-level reversal...
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Look what happens when we do a character-level reversal:
</p>

<div code-block="question__reverse-words__eagle-character-reversal" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">'the eagle has landed'</span> <span class="token comment" spellcheck="true"># input</span>
<span class="token string">'dednal sah elgae eht'</span> <span class="token comment" spellcheck="true"># character-reversed</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Notice anything?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
What if we put it up against the desired output:
</p>

<div code-block="question__reverse-words__eagle-compare-character-and-word-reversal" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token string">'the eagle has landed'</span> <span class="token comment" spellcheck="true"># input</span>
<span class="token string">'dednal sah elgae eht'</span> <span class="token comment" spellcheck="true"># character-reversed</span>
<span class="token string">'landed has eagle the'</span> <span class="token comment" spellcheck="true"># word-reversed (desired output)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
The character reversal reverses the words! It's a great first step. From there, we just have to "unscramble" each word.
</p>
<p class="ng-scope">
More precisely, we just have to re-reverse each word!
</p>
</div>
</div>

</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We'll write a helper function <span class="ic-function ng-isolate-scope" func="question__reverse-words__reverse-characters"><span class="name" ng-transclude=""><span class="ng-scope">reverse_characters</span></span>()</span> that reverses all the characters in a string between a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__reverse-words__front-index"><span class="ng-scope">front_index</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__reverse-words__back-index"><span class="ng-scope">back_index</span></span>. We use it to:
</p>
<ol class="ng-scope">
<li>Reverse <strong>all the characters in the entire message</strong>, giving us the correct <em>word order</em> but with <em>each word backwards</em>.</li>
<li>Reverse <strong>the characters in each individual word</strong>.</li>
</ol>
<div code-block="question__reverse-words__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">reverse_words</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>

    message_list <span class="token operator">=</span> list<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># first we reverse all the characters in the entire message_list</span>
    reverse_characters<span class="token punctuation">(</span>message_list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># this gives us the right word order</span>
    <span class="token comment" spellcheck="true"># but with each word backwards</span>

    <span class="token comment" spellcheck="true"># now we'll make the words forward again</span>
    <span class="token comment" spellcheck="true"># by reversing each word's characters</span>

    <span class="token comment" spellcheck="true"># we hold the index of the /start/ of the current word</span>
    <span class="token comment" spellcheck="true"># as we look for the /end/ of the current word</span>
    current_word_start_index <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># found the end of the current word!</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>message_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

            reverse_characters<span class="token punctuation">(</span>message_list<span class="token punctuation">,</span> current_word_start_index<span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if we haven't exhausted the string our</span>
            <span class="token comment" spellcheck="true"># next word's start is one character ahead</span>
            current_word_start_index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>message_list<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">reverse_characters</span><span class="token punctuation">(</span>message_list<span class="token punctuation">,</span> front_index<span class="token punctuation">,</span> back_index<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># walk towards the middle, from both sides</span>
    <span class="token keyword">while</span> front_index <span class="token operator">&lt;</span> back_index<span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># swap the front char and back char</span>
        message_list<span class="token punctuation">[</span>front_index<span class="token punctuation">]</span><span class="token punctuation">,</span> message_list<span class="token punctuation">[</span>back_index<span class="token punctuation">]</span> <span class="token operator">=</span> \
            message_list<span class="token punctuation">[</span>back_index<span class="token punctuation">]</span><span class="token punctuation">,</span> message_list<span class="token punctuation">[</span>front_index<span class="token punctuation">]</span>

        front_index <span class="token operator">+=</span> <span class="token number">1</span>
        back_index  <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> message_list</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__reverse-words__final-complexity"><span complexity="n" class="ng-scope ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span><span class="ng-scope"> time and </span><span complexity="n" class="ng-scope ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span><span class="ng-scope"> space. Our space cost comes from converting the message string to </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span><span class="ng-scope">. If our input was </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span><span class="ng-scope">, our space cost would be </span><span complexity="1" class="ng-scope ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span><span class="ng-scope"> because we'd be using a constant amount of additional space beyond the input.</span></span>
</p>

<p class="ng-scope">
Hmm, the team used your function to finish deciphering the message. There definitely seems to be a plot brewing, but no specifics on where. The sender seemed to really like Eccles cakes. Any ideas?
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
How would you handle punctuation?
</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
The naive solution of reversing the words one at a time had a worst-case <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> runtime. That's because swapping words with <em>different lengths</em> required "scooting over" all the other characters to make room.
</p>

<p class="ng-scope">
To get around this "scooting over" issue, we reversed all the <em>characters</em> in the string first. This put all the words in the correct spots, but with the characters in each word backwards. So to get the final answer, we reversed the characters in each word. This all takes two passes through the string, so <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time total.
</p>

<p class="ng-scope">
This might seem like a blind insight, but we derived it by using a clear strategy:
</p>

<p class="ng-scope">
<strong>
Solve a <em>simpler</em> version of the problem (in this case, reversing the characters instead of the words), and see if that gets us closer to a solution for the original problem.
</strong>
</p>

<p class="ng-scope">
We talk about this strategy in the "get unstuck" section of <a href="https://www.interviewcake.com/article/coding-interview-tips#unstuck">our coding interview tips</a>.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"question__reverse-words__eagle-character-reversal": {"javascript": "'the eagle has landed' // input\n'dednal sah elgae eht' // character-reversed", "csharp": "\"the eagle has landed\" // Input\n\"dednal sah elgae eht\" // Character-reversed", "default": "'the eagle has landed' # input\n'dednal sah elgae eht' # character-reversed", "c": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed", "java": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed", "cpp": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed"}, "question__reverse-words__convert-message-to-list": {"default": "", "javascript": "function reverseWords(message) {\n    var messageArray = message.split('');\n    ...\n}", "java": "public String reverseWords(String message) {\n    char[] messageChars = message.toCharArray();\n    ...\n}", "python": "def reverse_words(message):\n    message_list = list(message)\n    ...", "csharp": "public string ReverseWords(string message)\n{\n    char[] messageChars = message.ToCharArray();\n    ...\n}"}, "question__reverse-words__eagle-compare-character-and-word-reversal": {"javascript": "'the eagle has landed' // input\n'dednal sah elgae eht' // character-reversed\n'landed has eagle the' // word-reversed (desired output)", "csharp": "\"the eagle has landed\" // Input\n\"dednal sah elgae eht\" // Character-reversed\n\"landed has eagle the\" // Word-reversed (desired output)", "default": "'the eagle has landed' # input\n'dednal sah elgae eht' # character-reversed\n'landed has eagle the' # word-reversed (desired output)", "c": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed\n\"landed has eagle the\" // word-reversed (desired output)", "java": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed\n\"landed has eagle the\" // word-reversed (desired output)", "cpp": "\"the eagle has landed\" // input\n\"dednal sah elgae eht\" // character-reversed\n\"landed has eagle the\" // word-reversed (desired output)"}, "question__reverse-words__letters-first-swap": {"javascript": "'a bb c dd e ff g hh' // input\n'hh bb c dd e ff g a' // first swap", "csharp": "\"a bb c dd e ff g hh\" // Input\n\"hh bb c dd e ff g a\" // First swap", "default": "'a bb c dd e ff g hh' # input\n'hh bb c dd e ff g a' # first swap", "c": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap", "java": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap", "cpp": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap"}, "setup": {"javascript": "var charTests = [\n    ['ab c', 'c ba'],\n    ['d', 'd'],\n];\n\nvar wordTests = [\n    ['a bb c dd e ff g hh', 'hh g ff e dd c bb a'],\n    ['the eagle has landed', 'landed has eagle the'],\n    ['hello', 'hello'],\n];", "python": "char_tests = [\n    ['ab c', 'c ba'],\n    ['d', 'd'],\n]\n\nword_tests = [\n    ['a bb c dd e ff g hh', 'hh g ff e dd c bb a'],\n    ['the eagle has landed', 'landed has eagle the'],\n    ['hello', 'hello'],\n]", "ruby": "char_tests = [\n    ['ab c', 'c ba'],\n    ['d', 'd'],\n]\n\nword_tests = [\n    ['a bb c dd e ff g hh', 'hh g ff e dd c bb a'],\n    ['the eagle has landed', 'landed has eagle the'],\n    ['hello', 'hello'],\n]", "c": "char charTests[2][2][5] = {\n    {\"ab c\\0\", \"c ba\\0\"},\n    {\"d\\0\", \"d\\0\"},\n};\n\nchar wordTests[3][2][21] = {\n    {\"a bb c dd e ff g hh\\0\", \"hh g ff e dd c bb a\\0\"},\n    {\"the eagle has landed\\0\", \"landed has eagle the\\0\"},\n    {\"hello\\0\", \"hello\\0\"},\n};", "java": "String[][] charTests = new String[][]{\n    {\"ab c\", \"c ba\"},\n    {\"d\", \"d\"},\n};\n\nString[][] wordTests = new String[][]{\n    {\"a bb c dd e ff g hh\", \"hh g ff e dd c bb a\"},\n    {\"the eagle has landed\", \"landed has eagle the\"},\n    {\"hello\", \"hello\"},\n};", "cpp": "const vector<vector<string>> charTests {\n    vector<string> {\"ab c\", \"c ba\"},\n    vector<string> {\"d\", \"d\"},\n};\n\nconst vector<vector<string>> wordTests {\n    vector<string> {\"a bb c dd e ff g hh\", \"hh g ff e dd c bb a\"},\n    vector<string> {\"the eagle has landed\", \"landed has eagle the\"},\n    vector<string> {\"hello\", \"hello\"},\n};", "csharp": "string[][] charTests = new string[][]\n{\n    new[] {\"ab c\", \"c ba\"},\n    new[] {\"d\", \"d\"},\n};\n\nstring[][] wordTests = new string[][]\n{\n    new[] {\"a bb c dd e ff g hh\", \"hh g ff e dd c bb a\"},\n    new[] {\"the eagle has landed\", \"landed has eagle the\"},\n    new[] {\"hello\", \"hello\"},\n};"}, "question__reverse-words__the-eagle-has-landed": {"default": "\"the eagle has landed\""}, "question__reverse-words__letters-alternating-word-size": {"default": "\"a bb c dd e ff g hh\""}, "question__reverse-words__example-input-output": {"javascript": "var message = 'find you will pain only go you recordings security the into if';\n\nreverseWords(message);\n// returns: 'if into the security recordings you go only pain will you find'", "csharp": "var message = \"find you will pain only go you recordings security the into if\";\n\n// Returns: \"if into the security recordings you go only pain will you find\"\nvar result = ReverseWords(message);", "default": "message = 'find you will pain only go you recordings security the into if'\n\nreverse_words(message)\n# returns: 'if into the security recordings you go only pain will you find'", "c": "message[] = \"find you will pain only go you recordings security the into if\";\n\nreverseWords(message);\n// message buffer now contains:\n// \"if into the security recordings you go only pain will you find\"", "java": "String message = \"find you will pain only go you recordings security the into if\";\n\nreverseWords(message);\n// returns: \"if into the security recordings you go only pain will you find\"", "cpp": "string message = \"find you will pain only go you recordings security the into if\";\n\nreverseWords(message);\n// returns: \"if into the security recordings you go only pain will you find\""}, "question__reverse-words__reverse-characters": {"javascript": {"code": "function reverseCharacters(message) {\n\n    var messageArray = message.split('');\n\n    // walk towards the middle, from both sides\n    for (var frontIndex = 0; frontIndex &lt; messageArray.length / 2; frontIndex++) {\n        var backIndex = messageArray.length - frontIndex - 1;\n\n        // swap the front char and back char\n        var tempChar = messageArray[frontIndex];\n        messageArray[frontIndex] = messageArray[backIndex];\n        messageArray[backIndex]  = tempChar;\n    }\n\n    return messageArray.join('');\n}", "tests": "testInputAndOutputLists(reverseCharacters, charTests);"}, "python": {"code": "def reverse_characters(message):\n    message_list = list(message)\n\n    # walk towards the middle, from both sides\n    for front_index in xrange(len(message_list) / 2):\n        back_index = -front_index - 1\n\n        # swap the front char and back char\n        message_list[front_index], message_list[back_index] = \\\n            message_list[back_index], message_list[front_index]\n\n    return ''.join(message_list)", "tests": "testInputAndOutputLists(reverse_characters, char_tests)"}, "ruby": {"code": "def reverse_characters(message)\n\n    # walk towards the middle, from both sides\n    for front_index in 0...(message.length / 2)\n        back_index = -front_index - 1\n\n        # swap the front char and back char\n        message[front_index], message[back_index] = \\\n            message[back_index], message[front_index]\n\n    end\n\n    return message\nend", "tests": "testInputAndOutputLists(method(:reverse_characters), char_tests)"}, "c": {"code": "void reverseCharacters(char *message) {\n    size_t frontIndex, messageLength = strlen(message);\n\n    // walk towards the middle, from both sides\n    for (frontIndex = 0; frontIndex &lt; messageLength / 2; ++frontIndex) {\n        char charAtFrontIndex;\n        size_t backIndex = messageLength - frontIndex - 1;\n\n        // swap the front char and back char\n        charAtFrontIndex = message[frontIndex];\n        message[frontIndex] = message[backIndex];\n        message[backIndex] = charAtFrontIndex;\n    }\n}", "tests": "for (size_t i = 0; i < sizeof(charTests) / sizeof(charTests[0]); ++i) {\n    size_t size = strlen(charTests[i][0]) + 1;\n    char *s = malloc(size);\n    assert(s != NULL);\n    strncpy(s, charTests[i][0], size);\n    s[size - 1] = '\\0';\n    reverseCharacters(s);\n    ASSERT_EQUAL(s, charTests[i][1], size, \"reverse characters\");\n    free(s);\n}"}, "java": {"code": "public String reverseCharacters(String message) {\n\n    char[] messageChars = message.toCharArray();\n\n    // walk towards the middle, from both sides\n    for (int frontIndex = 0; frontIndex &lt; messageChars.length / 2; frontIndex++) {\n        int backIndex = messageChars.length - frontIndex - 1;\n\n        // swap the front char and back char\n        char tempChar = messageChars[frontIndex];\n        messageChars[frontIndex] = messageChars[backIndex];\n        messageChars[backIndex]  = tempChar;\n    }\n\n    return new String(messageChars);\n}", "tests": "for (String[] test : charTests) {\n    assertEqual(t.reverseCharacters(test[0]), test[1]);\n}"}, "cpp": {"code": "void reverseCharacters(string& message) \n{\n    // walk towards the middle, from both sides\n    for (size_t frontIndex = 0; frontIndex &lt; message.length() / 2; ++frontIndex) {\n        size_t backIndex = message.length() - frontIndex - 1;\n\n        // swap the front char and back char\n        swap(message[frontIndex], message[backIndex]);\n    }\n}", "tests": "for (const auto& test : charTests) {\n    string s = test[0];\n    reverseCharacters(s);\n    assertEqual(s, test[1]);\n}"}, "csharp": {"code": "public string ReverseCharacters(string message)\n{\n    char[] messageChars = message.ToCharArray();\n\n    // Walk towards the middle, from both sides\n    for (int frontIndex = 0; frontIndex &lt; messageChars.Length / 2; frontIndex++)\n    {\n        int backIndex = messageChars.Length - frontIndex - 1;\n\n        // Swap the front char and back char\n        char tempChar = messageChars[frontIndex];\n        messageChars[frontIndex] = messageChars[backIndex];\n        messageChars[backIndex] = tempChar;\n    }\n\n    return new string(messageChars);\n}", "tests": "foreach (var test in charTests)\n{\n    AssertEqual(ReverseCharacters(test[0]), test[1]);\n}"}}, "question__reverse-words__letters-second-swap": {"javascript": "'a bb c dd e ff g hh' // input\n'hh bb c dd e ff g a' // first swap\n'hh g c dd e ff bb a' // second swap", "csharp": "\"a bb c dd e ff g hh\" // Input\n\"hh bb c dd e ff g a\" // First swap\n\"hh g c dd e ff bb a\" // Second swap", "default": "'a bb c dd e ff g hh' # input\n'hh bb c dd e ff g a' # first swap\n'hh g c dd e ff bb a' # second swap", "c": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap\n\"hh g c dd e ff bb a\" // second swap", "java": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap\n\"hh g c dd e ff bb a\" // second swap", "cpp": "\"a bb c dd e ff g hh\" // input\n\"hh bb c dd e ff g a\" // first swap\n\"hh g c dd e ff bb a\" // second swap"}, "question__reverse-words__solution": {"javascript": {"code": "function reverseWords(message) {\n\n    var messageArray = message.split('');\n\n    // first we reverse all the characters in the entire messageArray\n    reverseCharacters(messageArray, 0, messageArray.length - 1);\n    // this gives us the right word order\n    // but with each word backwards\n\n    // now we'll make the words forward again\n    // by reversing each word's characters\n\n    // we hold the index of the /start/ of the current word\n    // as we look for the /end/ of the current word\n    var currentWordStartIndex = 0;\n    for (var i = 0; i &lt;= messageArray.length; i++) {\n\n        // found the end of the current word!\n        if (i === messageArray.length || messageArray[i] === ' ') {\n\n            // if we haven't exhausted the string our\n            // next word's start is one character ahead\n            reverseCharacters(messageArray, currentWordStartIndex, i - 1);\n            currentWordStartIndex = i + 1;\n        }\n    }\n\n    return messageArray.join('');\n}\n\nfunction reverseCharacters(messageArray, startIndex, endIndex) {\n\n    // walk towards the middle, from both sides\n    while (startIndex &lt; endIndex) {\n\n        // swap the front char and back char\n        var temp = messageArray[startIndex];\n        messageArray[startIndex] = messageArray[endIndex];\n        messageArray[endIndex] = temp;\n        startIndex++;\n        endIndex--;\n    }\n}", "tests": "testInputAndOutputLists(reverseWords, wordTests)"}, "python": {"code": "def reverse_words(message):\n\n    message_list = list(message)\n\n    # first we reverse all the characters in the entire message_list\n    reverse_characters(message_list, 0, len(message_list)-1)\n    # this gives us the right word order\n    # but with each word backwards\n\n    # now we'll make the words forward again\n    # by reversing each word's characters\n\n    # we hold the index of the /start/ of the current word\n    # as we look for the /end/ of the current word\n    current_word_start_index = 0\n\n    for i in xrange(len(message_list) + 1):\n\n        # found the end of the current word!\n        if (i == len(message_list)) or (message_list[i] == ' '):\n\n            reverse_characters(message_list, current_word_start_index, i-1)\n\n            # if we haven't exhausted the string our\n            # next word's start is one character ahead\n            current_word_start_index = i + 1\n\n    return ''.join(message_list)\n\ndef reverse_characters(message_list, front_index, back_index):\n\n    # walk towards the middle, from both sides\n    while front_index &lt; back_index:\n\n        # swap the front char and back char\n        message_list[front_index], message_list[back_index] = \\\n            message_list[back_index], message_list[front_index]\n\n        front_index += 1\n        back_index  -= 1\n\n    return message_list", "tests": "testInputAndOutputLists(reverse_words, word_tests)"}, "ruby": {"code": "def reverse_words(message)\n\n    # first we reverse all the characters in the entire message\n    reverse_characters(message, 0, message.length-1)\n    # this gives us the right word order\n    # but with each word backwards\n\n    # now we'll make the words forward again\n    # by reversing each word's characters\n\n    # we hold the index of the /start/ of the current word\n    # as we look for the /end/ of the current word\n    current_word_start_index = 0\n\n    for i in 0..message.length\n\n        # found the end of the current word!\n        if (message[i] == ' ') || (i == message.length)\n\n            reverse_characters(message, current_word_start_index, i-1)\n\n            # if we haven't exhausted the string our\n            # next word's start is one character ahead\n            current_word_start_index = i + 1\n        end\n    end\n\n    return message\nend\n\ndef reverse_characters(message, front_index, back_index)\n\n    # walk towards the middle, from both sides\n    while front_index &lt; back_index\n\n        # swap the front char and back char\n        message[front_index], message[back_index] = \\\n            message[back_index], message[front_index]\n\n        front_index += 1\n        back_index  -= 1\n\n    end\n\n    return message\nend", "tests": "testInputAndOutputLists(method(:reverse_words), word_tests)"}, "c": {"code": "void reverseCharacters(char *str, size_t startIndex, size_t endIndex) {\n    // walk towards the middle, from both sides\n    while (startIndex &lt; endIndex) {\n        char charAtStartIndex;\n\n        // swap the front char and back char\n        charAtStartIndex = str[startIndex];\n        str[startIndex] = str[endIndex];\n        str[endIndex] = charAtStartIndex;\n        ++startIndex;\n        --endIndex;\n    }\n}\n\nvoid reverseWords(char *message) {\n    size_t i, currentWordStartIndex = 0, messageLength = strlen(message);\n\n    // first we reverse all the characters in the entire messageChars array\n    reverseCharacters(message, 0, messageLength - 1);\n    // this gives us the right word order\n    // but with each word backwards\n\n    // now we'll make the words forward again\n    // by reversing each word's characters\n\n    // we hold the index of the /start/ of the current word\n    // as we look for the /end/ of the current word\n    for (size_t i = 0; i &lt;= messageLength; ++i) {\n\n        // found the end of the current word!\n        if (i == messageLength || message[i] == ' ') {\n\n            // if we haven't exhausted the string our\n            // next word's start is one character ahead\n            reverseCharacters(message, currentWordStartIndex, i - 1);\n            currentWordStartIndex = i + 1;\n        }\n    }\n}", "tests": "for (size_t i = 0; i < sizeof(wordTests) / sizeof(wordTests[0]); ++i) {\n    size_t size = strlen(wordTests[i][0]) + 1;\n    char *s = malloc(size);\n    assert(s != NULL);\n    strncpy(s, wordTests[i][0], size);\n    s[size - 1] = '\\0';\n    reverseWords(s);\n    ASSERT_EQUAL(s, wordTests[i][1], size, \"reverse words\");\n    free(s);\n}"}, "java": {"code": "public String reverseWords(String message) {\n\n    char[] messageChars = message.toCharArray();\n\n    // first we reverse all the characters in the entire messageChars array\n    reverseCharacters(messageChars, 0, messageChars.length - 1);\n    // this gives us the right word order\n    // but with each word backwards\n\n    // now we'll make the words forward again\n    // by reversing each word's characters\n\n    // we hold the index of the /start/ of the current word\n    // as we look for the /end/ of the current word\n    int currentWordStartIndex = 0;\n    for (int i = 0; i &lt;= messageChars.length; i++) {\n\n        // found the end of the current word!\n        if (i == messageChars.length || messageChars[i] == ' ') {\n\n            // if we haven't exhausted the string our\n            // next word's start is one character ahead\n            reverseCharacters(messageChars, currentWordStartIndex, i - 1);\n            currentWordStartIndex = i + 1;\n        }\n    }\n\n    return new String(messageChars);\n}\n\npublic void reverseCharacters(char[] messageChars, int startIndex, int endIndex) {\n\n    // walk towards the middle, from both sides\n    while (startIndex &lt; endIndex) {\n\n        // swap the front char and back char\n        char temp = messageChars[startIndex];\n        messageChars[startIndex] = messageChars[endIndex];\n        messageChars[endIndex] = temp;\n        startIndex++;\n        endIndex--;\n    }\n}", "tests": "for (String[] test : wordTests) {\n    assertEqual(t.reverseWords(test[0]), test[1]);\n}"}, "cpp": {"code": "void reverseCharacters(string& str, size_t startIndex, size_t endIndex)\n{\n    // walk towards the middle, from both sides\n    while (startIndex &lt; endIndex) {\n\n        // swap the front char and back char\n        swap(str[startIndex], str[endIndex]);\n        ++startIndex;\n        --endIndex;\n    }\n}\n\nvoid reverseWords(string& message) \n{\n    // first we reverse all the characters in the entire messageChars array\n    reverseCharacters(message, 0, message.length() - 1);\n    // this gives us the right word order\n    // but with each word backwards\n\n    // now we'll make the words forward again\n    // by reversing each word's characters\n\n    // we hold the index of the /start/ of the current word\n    // as we look for the /end/ of the current word\n    size_t currentWordStartIndex = 0;\n    for (size_t i = 0; i &lt;= message.length(); ++i) {\n\n        // found the end of the current word!\n        if (i == message.length() || message[i] == ' ') {\n\n            // if we haven't exhausted the string our\n            // next word's start is one character ahead\n            reverseCharacters(message, currentWordStartIndex, i - 1);\n            currentWordStartIndex = i + 1;\n        }\n    }\n}", "tests": "for (const auto& test : wordTests) {\n    string s = test[0];\n    reverseWords(s);\n    assertEqual(s, test[1]);\n}"}, "csharp": {"code": "public string ReverseWords(string message)\n{\n    char[] messageChars = message.ToCharArray();\n\n    // First we reverse all the characters in the entire messageChars array\n    ReverseCharacters(messageChars, 0, messageChars.Length - 1);\n\n    // This gives us the right word order,\n    // but with each word backwards.\n    // Now we'll make the words forward again\n    // by reversing each word's characters\n\n    // We hold the index of the /start/ of the current word\n    // as we look for the /end/ of the current word\n    int currentWordStartIndex = 0;\n    for (int i = 0; i &lt;= messageChars.Length; i++)\n    {\n        // Found the end of the current word!\n        if (i == messageChars.Length || messageChars[i] == ' ')\n        {\n            // If we haven't exhausted the string our\n            // next word's start is one character ahead\n            ReverseCharacters(messageChars, currentWordStartIndex, i - 1);\n            currentWordStartIndex = i + 1;\n        }\n    }\n\n    return new string(messageChars);\n}\n\npublic void ReverseCharacters(char[] messageChars, int startIndex, int endIndex)\n{\n    // Walk towards the middle, from both sides\n    while (startIndex &lt; endIndex)\n    {\n        // Swap the front char and back char\n        char temp = messageChars[startIndex];\n        messageChars[startIndex] = messageChars[endIndex];\n        messageChars[endIndex] = temp;\n        startIndex++;\n        endIndex--;\n    }\n}", "tests": "foreach (var test in wordTests)\n{\n    AssertEqual(ReverseWords(test[0]), test[1]);\n}"}}}, "funcs": {"question__reverse-words__reverse-words": {"snake": "reverse_words", "csharp": "ReverseWords", "camel": "reverseWords"}, "question__reverse-words__reverse-characters": {"snake": "reverse_characters", "csharp": "ReverseCharacters", "camel": "reverseCharacters"}, "question__reverse-words__split": {"default": "split"}}, "vars": {"question__reverse-words__temp": {"default": "temp"}, "question__reverse-words__front-index": {"snake": "front_index", "camel": "frontIndex"}, "question__reverse-words__back-index": {"snake": "back_index", "camel": "backIndex"}, "question__reverse-words__message": {"default": "message"}}, "words": {"question__reverse-words__no-split-allowed": {"javascript": "", "ruby": "(No <span func=\"split\">split</span> allowed!)", "python": "", "default": "", "c": "", "java": "", "cpp": ""}, "question__reverse-words__final-space": {"javascript": "Are you sure you're operating on the <span words=\"standard-list\">array</span> of characters <em><span concept=\"in-place\">in-place</span></em>?", "ruby": "We can do this in <span complexity=\"1\"/> space. Remember, <em><span concept=\"in-place\">in-place</span></em>.", "python": "Are you sure you're operating on the <span words=\"standard-list\">list</span> of characters <em><span concept=\"in-place\">in-place</span></em>?", "default": "Are you sure you're operating on the <span words=\"standard-list\"/> of characters <em><span concept=\"in-place\">in-place</span></em>?", "c": "Are you sure you're operating on the <span words=\"standard-list\">array</span> of characters <em><span concept=\"in-place\">in-place</span></em>?", "java": "Are you sure you're operating on the <span words=\"standard-list\">array</span> of characters <em><span concept=\"in-place\">in-place</span></em>?", "cpp": "We can do this in <span complexity=\"1\"/> space. Remember, <em><span concept=\"in-place\">in-place</span></em>."}, "question__reverse-words__start-rearranging-message": {"javascript": "<p>\n    We'll start by converting the message string into <span words=\"a-standard-list\">an array</span> of characters.\n</p>\n<div code-block=\"convert-message-to-list\" language=\"javascript\" translation-highlighting=\"static\">function reverseWords(message) {\n    var messageArray = message.split('');\n    ...\n}</div>\n<p>\n    Now, how can we move things around?\n</p>", "ruby": "<p>\n    It might be tempting to think about using a <span func=\"split\">split</span> function to separate our words, but we have to do this <em>in-place</em> and splitting will create a new array of words.\n</p>\n<p>\n    Can we just move things around inside the message?\n</p>", "python": "<p>\n    We'll start by converting the message string into <span words=\"a-standard-list\">a list</span> of characters.\n</p>\n<div code-block=\"convert-message-to-list\" language=\"python\" translation-highlighting=\"static\">def reverse_words(message):\n    message_list = list(message)\n    ...</div>\n<p>\n    Now, how can we move things around?\n</p>", "default": "<p>\n    We'll start by converting the message string into <span words=\"a-standard-list\"/> of characters.\n</p>\n<div code-block=\"convert-message-to-list\">\n</div>\n<p>\n    Now, how can we move things around?\n</p>", "c": "", "java": "<p>\n    We'll start by converting the message string into <span words=\"a-standard-list\">an array</span> of characters.\n</p>\n<div code-block=\"convert-message-to-list\" language=\"java\" translation-highlighting=\"static\">public String reverseWords(String message) {\n    char[] messageChars = message.toCharArray();\n    ...\n}</div>\n<p>\n    Now, how can we move things around?\n</p>", "cpp": ""}, "question__reverse-words__c18n-language": {"javascript": "JavaScript", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "java": "Java", "cpp": "C++ (beta)"}, "question__reverse-words__a-standard-list": {"javascript": "an array", "python": "a list", "default": "a list", "php": "an array", "ruby": "an array", "swift": "an array", "cpp": "a vector", "objectivec": "an array", "csharp": "a list", "c": "an array", "java": "an array"}, "question__reverse-words__standard-list": {"javascript": "array", "python": "list", "default": "list", "php": "array", "ruby": "array", "swift": "array", "cpp": "vector", "objectivec": "array", "csharp": "list", "c": "array", "java": "array"}, "question__reverse-words__immutable-strings": {"javascript": "<p class=\"aside\">\n    Since strings in <span words=\"c18n-language\">JavaScript</span> are <strong><span concept=\"mutable\">immutable</span></strong>, we'll first convert the string into <span words=\"a-standard-list\">an array</span> of characters, do the in-place word reversal on that <span words=\"standard-list\">array</span>, and re-join that <span words=\"standard-list\">array</span> into a string before returning it. This isn't technically \"in-place\" and the <span words=\"standard-list\">array</span> of characters will cost <span complexity=\"n\"/> additional space, but it's a reasonable way to stay within the spirit of the challenge. If you're comfortable coding in a language with mutable strings, that'd be even better!\n</p>", "ruby": "", "python": "<p class=\"aside\">\n    Since strings in <span words=\"c18n-language\">Python</span> are <strong><span concept=\"mutable\">immutable</span></strong>, we'll first convert the string into <span words=\"a-standard-list\">a list</span> of characters, do the in-place word reversal on that <span words=\"standard-list\">list</span>, and re-join that <span words=\"standard-list\">list</span> into a string before returning it. This isn't technically \"in-place\" and the <span words=\"standard-list\">list</span> of characters will cost <span complexity=\"n\"/> additional space, but it's a reasonable way to stay within the spirit of the challenge. If you're comfortable coding in a language with mutable strings, that'd be even better!\n</p>", "default": "<p class=\"aside\">\n    Since strings in <span words=\"c18n-language\"/> are <strong><span concept=\"mutable\">immutable</span></strong>, we'll first convert the string into <span words=\"a-standard-list\"/> of characters, do the in-place word reversal on that <span words=\"standard-list\"/>, and re-join that <span words=\"standard-list\"/> into a string before returning it. This isn't technically \"in-place\" and the <span words=\"standard-list\"/> of characters will cost <span complexity=\"n\"/> additional space, but it's a reasonable way to stay within the spirit of the challenge. If you're comfortable coding in a language with mutable strings, that'd be even better!\n</p>", "c": "", "java": "<p class=\"aside\">\n    Since strings in <span words=\"c18n-language\">Java</span> are <strong><span concept=\"mutable\">immutable</span></strong>, we'll first convert the string into <span words=\"a-standard-list\">an array</span> of characters, do the in-place word reversal on that <span words=\"standard-list\">array</span>, and re-join that <span words=\"standard-list\">array</span> into a string before returning it. This isn't technically \"in-place\" and the <span words=\"standard-list\">array</span> of characters will cost <span complexity=\"n\"/> additional space, but it's a reasonable way to stay within the spirit of the challenge. If you're comfortable coding in a language with mutable strings, that'd be even better!\n</p>", "cpp": ""}, "question__reverse-words__swap-two-elements": {"javascript": "", "ruby": "<p>\n    We're using a cute one-liner to do the swap. In other\n    languages you might need to do the swap by hand,\n    recording one of the values in\n    a <span var=\"temp\">temp</span> variable.\n</p>", "python": "<p>\n    We're using a cute one-liner to do the swap. In other\n    languages you might need to do the swap by hand,\n    recording one of the values in\n    a <span var=\"temp\">temp</span> variable.\n</p>", "default": "", "c": "", "java": "", "cpp": "<p>\n    We're using a cute one-liner to do the swap. In other\n    languages you might need to do the swap by hand,\n    recording one of the values in\n    a <span var=\"temp\">temp</span> variable.\n</p>"}, "question__reverse-words__final-complexity": {"javascript": "<span complexity=\"n\"/> time and <span complexity=\"n\"/> space. Our space cost comes from converting the message string to <span words=\"a-standard-list\">an array</span>. If our input was <span words=\"a-standard-list\">an array</span>, our space cost would be <span complexity=\"1\"/> because we'd be using a constant amount of additional space beyond the input.", "ruby": "<span complexity=\"n\"/> time and <span complexity=\"1\"/> space!", "python": "<span complexity=\"n\"/> time and <span complexity=\"n\"/> space. Our space cost comes from converting the message string to <span words=\"a-standard-list\">a list</span>. If our input was <span words=\"a-standard-list\">a list</span>, our space cost would be <span complexity=\"1\"/> because we'd be using a constant amount of additional space beyond the input.", "default": "<span complexity=\"n\"/> time and <span complexity=\"n\"/> space. Our space cost comes from converting the message string to <span words=\"a-standard-list\"/>. If our input was <span words=\"a-standard-list\"/>, our space cost would be <span complexity=\"1\"/> because we'd be using a constant amount of additional space beyond the input.", "c": "<span complexity=\"n\"/> time and <span complexity=\"1\"/> space!", "java": "<span complexity=\"n\"/> time and <span complexity=\"n\"/> space. Our space cost comes from converting the message string to <span words=\"a-standard-list\">an array</span>. If our input was <span words=\"a-standard-list\">an array</span>, our space cost would be <span complexity=\"1\"/> because we'd be using a constant amount of additional space beyond the input.", "cpp": "<span complexity=\"n\"/> time and <span complexity=\"1\"/> space!"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/reverse-words" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/reverse-words" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/reverse-words&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/reverse-words" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/reverse-words" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/reverse-words&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./27.Reverse Words _ Interview Cake_files/jquery.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./27.Reverse Words _ Interview Cake_files/underscore-min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/angular-seo.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./27.Reverse Words _ Interview Cake_files/base.js"></script>

    
    <script src="./27.Reverse Words _ Interview Cake_files/prism.min.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/codemirror.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/python.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/ruby.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/javascript.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/clike.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/php.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/haskell.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./27.Reverse Words _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./27.Reverse Words _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./27.Reverse Words _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./27.Reverse Words _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="tSmSCjWuWVt5QMHFY2mJ0uTrGcndxNmR0rLeUo7osuLMFRTLmxB2xdh911DGL1A6">
<div id="loading">
. . .
</div>


<link href="./27.Reverse Words _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default938484_provider" id="stripeXDM_default938484_provider" src="./27.Reverse Words _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./27.Reverse Words _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket61524" src="./27.Reverse Words _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>