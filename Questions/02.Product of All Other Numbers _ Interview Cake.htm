<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0070)https://www.interviewcake.com/question/python/product-of-other-numbers -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./02.Product of All Other Numbers _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./02.Product of All Other Numbers _ Interview Cake_files/visits"></script><script type="text/javascript" src="./02.Product of All Other Numbers _ Interview Cake_files/track"></script><script type="text/javascript" src="./02.Product of All Other Numbers _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./02.Product of All Other Numbers _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./02.Product of All Other Numbers _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":4,"agent":"","applicationID":"7328113","applicationTime":479,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/product-of-other-numbers">
        <meta name="description" content="For each number in an array, find the product of all the other numbers. You can do it faster than you&#39;d think!">

        

        <meta property="og:title" content="Product of All Other Numbers | Interview Cake">
        <meta property="og:description" content="For each number in an array, find the product of all the other numbers. You can do it faster than you&#39;d think!">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/product-of-other-numbers">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Product of All Other Numbers | Interview Cake">
        <meta name="twitter:description" content="For each number in an array, find the product of all the other numbers. You can do it faster than you&#39;d think!">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Product of All Other Numbers | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./02.Product of All Other Numbers _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./02.Product of All Other Numbers _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./02.Product of All Other Numbers _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./02.Product of All Other Numbers _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./02.Product of All Other Numbers _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./02.Product of All Other Numbers _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./02.Product of All Other Numbers _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./02.Product of All Other Numbers _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./02.Product of All Other Numbers _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./02.Product of All Other Numbers _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./02.Product of All Other Numbers _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./02.Product of All Other Numbers _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/product-of-other-numbers" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/product-of-other-numbers" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3" aria-describedby="tooltip539073">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip539073" style="top: 92px; left: 49.25px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Highest Product of 3</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;product-of-other-numbers&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Product of All Other Numbers" data-meta_desc="For each number in an array, find the product of all the other numbers. You can do it faster than you&#39;d think!" data-title="" data-meta_keywords="" data-weight="1" data-difficulty="4" data-num-hints="24" data-num-gotchas="3" ng-init="setNumHints(24); setNumGotchas(3); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You have <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> of integers, and for each index you want to find the product of <em>every integer except the integer at that index.</em>
</strong>
</p>
<p class="ng-scope">
Write a function <span class="ic-function ng-isolate-scope" func="question__product-of-other-numbers__get-products-of-all-ints-except-at-index"><span class="name" ng-transclude=""><span class="ng-scope">get_products_of_all_ints_except_at_index</span></span>()</span> that takes <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> of integers and returns <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> of the products.
</p>
<p class="ng-scope">
For example, given:
</p>
<div code-block="question__product-of-other-numbers__sample-input" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
your function would return:
</p>
<div code-block="question__product-of-other-numbers__sample-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
by calculating:
</p>
<div code-block="question__product-of-other-numbers__sample-calculation" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
<small><strong>Do not use division in your solution.</strong></small>
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Does your function work if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> contains zeroes? Remember—no division.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space!
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We only need to allocate <em>one</em> new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> of size <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.
</p>
</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
A brute force approach would use two loops to multiply the integer at every <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__index"><span class="ng-scope">index</span></span> by the integer at every <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__nested-index"><span class="ng-scope">nested_index</span></span>, unless <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__index-equality"><span class="ng-scope">index == nested_index</span></span>.
</p>
<p class="ng-scope">
This would give us a runtime of <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>. Can we do better?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, we’re wasting a lot of time <strong>doing the same calculations.</strong> As an example, let's take:
</p>
<div code-block="question__product-of-other-numbers__brute-force-example" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># input list</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># list of the products of all integers</span>
<span class="token comment" spellcheck="true"># except the integer at each index:</span>

<span class="token punctuation">[</span><span class="token number">540</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
We're doing some of the same multiplications <em>two or three times</em>!
</p>

<div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__same_multiplication_highlight.svg" height="33" width="330" alt="When we calculate [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5], we&#39;re calculating 5*9 three times: at indices 0, 1, and 2.">


    
</div>


<p class="ng-scope">Or look at this pattern:</p>

<div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__building_multiplication_highlight.svg" height="33" width="330" alt="When we calculate [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5], we have 1 in index 1, and we calculate 1*2 at index 2, 1*2*6 at index 3, and 1*2*6*5 at index 4.">


    
</div>


<p class="ng-scope">We’re redoing multiplications when instead we could be storing the results! This would be a great time to use a <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> approach. We could store the results of each multiplication highlighted in blue, then just multiply by <em>one new</em> integer each time.</p>

<p class="ng-scope">So in the last highlighted multiplication, for example, we wouldn’t have to multiply <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">1*2*6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mbin">∗</span><span class="mord">2</span><span class="mbin">∗</span><span class="mord">6</span></span></span></span></span> again. If we stored that value (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>2</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">2</span></span></span></span></span>) from the previous multiplication, we could just multiply <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>2</mn><mo>∗</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">12*5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">2</span><span class="mbin">∗</span><span class="mord">5</span></span></span></span></span>.</p>

<p class="ng-scope"><strong>Can we break our problem down into subproblems so we can use a greedy approach?</strong></p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's look back at the last example:
</p>

<div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__building_multiplication_highlight.svg" height="33" width="330" alt="When we calculate [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5], we have 1 in index 1, and we calculate 1*2 at index 2, 1*2*6 at index 3, and 1*2*6*5 at index 4.">


    
</div>


<p class="ng-scope">
<strong>What do all the highlighted multiplications have in common?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
They are all the integers that are <em>before each index</em> in the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>9</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[1, 2, 6, 5, 9]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mord">2</span><span class="mpunct">,</span><span class="mord">6</span><span class="mpunct">,</span><span class="mord">5</span><span class="mpunct">,</span><span class="mord">9</span><span class="mclose">]</span></span></span></span></span>). For example, the highlighted multiplication at index 3 (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">1*2*6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mbin">∗</span><span class="mord">2</span><span class="mbin">∗</span><span class="mord">6</span></span></span></span></span>) is all the integers before index 3 in the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>.
</p>

<div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__building_multiplication_highlight_with_index.svg" height="74" width="330" alt="In the pattern where we calculate 1*2 at index 2, 1*2*6 at index 3, and 1*2*6*5 at index 4, each calculation is the product of all the numbers before the number at that index. For example, 5 is at index 3, and 1*2*6 is the product of all the numbers before 5 in the input array.">


    
</div>


<p class="ng-scope">
Do all the multiplications that <em>aren't highlighted</em> have anything in common?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Yes, they're all the integers that are <em>after</em> each index in the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>!
</p>
<p class="ng-scope">
Knowing this, can we break down our original problem to use a greedy approach?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
The product of <em>all</em> the integers except the integer at each index can be broken down into:
</p>

<ol class="ng-scope">
<li>
the product of all the integers <em>before</em> each index
</li>
<li>
the product of all the integers <em>after</em> each index.
</li>
</ol>

<p class="ng-scope">
To start, let's just get the product of all the integers <strong>before each index</strong>.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
How can we do this? Let's take another example:
</p>

<div code-block="question__product-of-other-numbers__before-each-index-example" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># input list</span>
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># multiplication of all integers before each index</span>
<span class="token comment" spellcheck="true"># (we give index 0 a value of 1 since it has no integers before it)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># final list of the products of all the integers before each index</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Notice that we're always adding <em>one</em> new integer to our multiplication for each index!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
So to get the products of all the integers before each index, we could greedily store each product <em>so far</em> and multiply that by the <em>next</em> integer. Then we can store that <em>new</em> product so far and keep going.
</p>
<p class="ng-scope">
So how can we apply this to our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let’s make <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span>:
</p>
<div code-block="question__product-of-other-numbers__before-each-index-implement" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">products_of_all_ints_before_index <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># for each integer, find the product of all the integers</span>
<span class="token comment" spellcheck="true"># before it, storing the total product so far each time</span>
product_so_far <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    products_of_all_ints_before_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> product_so_far
    product_so_far <span class="token operator">*=</span> int_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
So we solved the subproblem of finding the products of all the integers <em>before</em> each index. <strong>Now, how can we find the products of all the integers <em>after</em> each index?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
It might be tempting to make a new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> of all the values in our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> in <strong>reverse</strong>, and just use the same function we used to find the products before each index.
</p>
<p class="ng-scope">
Is this the best way?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">This method will work, but:</p>
<ol class="ng-scope">
<li>
<strong>We'll need to make a whole new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span></strong> that's basically the same as our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>. That's another <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> memory cost!
</li>
<li>
To keep our indices aligned with the original input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>, <strong>we'd have to reverse the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> of products we return</strong>. That's two reversals, or two <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> operations!
</li>
</ol>
<p class="ng-scope">
Is there a cleaner way to get the products of all the integers after each index?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="13" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can just <em>walk through our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> backwards</em>! So instead of reversing the values of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>, we'll just reverse the <em>indices</em> we use to iterate!
</p>
<div code-block="question__product-of-other-numbers__after-each-index-implement" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">products_of_all_ints_after_index <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

product_so_far <span class="token operator">=</span> <span class="token number">1</span>
i <span class="token operator">=</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    products_of_all_ints_after_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> product_so_far
    product_so_far <span class="token operator">*=</span> int_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    i <span class="token operator">-=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Now we've got <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span>, but we’re starting to build a lot of new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>s. And we still need our final <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> of the <em>total</em> products. <strong>How can we save space?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="14" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let’s take a step back. Right now we’ll need three <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>s:
</p>
<ol class="ng-scope">
<li><span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span></li>
<li><span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span></li>
<li><span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-except-at-index"><span class="ng-scope">products_of_all_ints_except_at_index</span></span></li>
</ol>
<p class="ng-scope">
To get the first one, we keep track the total product so far going <em>forwards</em>, and to get the second one, we keep track of the total product so far going <em>backwards</em>. How do we get the third one?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="15" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, we want the product of all the integers <em>before</em> an index <strong>and</strong> the product of all the integers <em>after</em> an index. We just need to multiply every integer in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span> with the integer <em>at the same index</em> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span>!
</p>

<p class="ng-scope">Let's take an example. Say our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>1</mn><mn>0</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[2, 4, 10]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mord">4</span><span class="mpunct">,</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">]</span></span></span></span></span>:</p>

<p class="ng-scope">
We'll calculate <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span> as:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__svg-products-before"><div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__products_before__list.svg" height="92" width="250" alt="If the input list is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]">


    
</div>
</span>

<p class="ng-scope">
And we'll calculate <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span> as:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__svg-products-after"><div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__products_after__list.svg" height="92" width="250" alt="If the input list is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]">


    
</div>
</span>

<p class="ng-scope">
If we take these <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>s and multiply the integers at the same indices, we get:
</p>

<div class="diagram ng-scope">
    <img src="./02.Product of All Other Numbers _ Interview Cake_files/product_other_numbers__products_before_times_products_after.svg" height="173" width="315" alt="The product of all the numbers before an index times the product of all the numbers after an index is the product of the numbers at all other indices: 1*40=40, 2*10=20, 8*1=8.">


    
</div>


<p class="ng-scope">
And this gives us what we're looking for—the products of all the integers except the integer at each index.
</p>

<p class="ng-scope">
Knowing this, can we eliminate any of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>s to reduce the memory we use?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="16" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Yes, instead of building the second <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span>, we could take the product we would have stored and just multiply it by the matching integer in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span>!
</p>
<p class="ng-scope">
So in our example above, when we calculated our first (well, "0th") "product after index" (which is 40), we’d just multiply that by our first "product before index" (1) instead of storing it in a new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>.
</p>
<p class="ng-scope">
<strong>How many <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>s do we need now?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="17" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Just one! We create <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span>, populate it with the products of all the integers <em>before</em> each index, and then multiply those products with the products <em>after</em> each index to get our final result!
</p>
<p class="ng-scope">
<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span> now contains the products of all the integers <em>before and after</em> every index, so we can call it <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-except-at-index"><span class="ng-scope">products_of_all_ints_except_at_index</span></span>!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="18" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Almost done! Are there any edge cases we should test?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="19" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> contains zeroes? What if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> only has <em>one</em> integer?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="20" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We'll be fine with zeroes.
</p>
<p class="ng-scope">
But what if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> has fewer than two integers? There can't be any products to return because at any index there are no “other” integers. What should we do?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="21" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, our output always has the same length as our input, so we'll want to maintain that here. If our input is an empty <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>, let's <em>return</em> an empty <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>. If our input only has <em>one</em> integer, let's return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> with length 1. What should that one element be?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="22" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We've been setting products of "no integers" to <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span></span></span></span></span> (like the first index in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-before-index"><span class="ng-scope">products_of_all_ints_before_index</span></span> and the last index in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-after-index"><span class="ng-scope">products_of_all_ints_after_index</span></span>). So if an input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> only has one integer, let's return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__one-in-array"><span class="ng-scope">[1]</span></span>.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="23" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What does our function <em>currently</em> do if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> has length 0 or 1?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="24" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Exactly what we want it to do! Because we build <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__products-of-all-ints-except-at-index"><span class="ng-scope">products_of_all_ints_except_at_index</span></span> with the same length as the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>, and we start <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__product-so-far"><span class="ng-scope">product_so_far</span></span> as 1, we get:
</p>
<ul class="ng-scope">
<li>the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__empty-array"><span class="ng-scope">[]</span></span> if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> has length 0</li>
<li>the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__product-of-other-numbers__one-in-array"><span class="ng-scope">[1]</span></span> if the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> has length 1</li>
</ul>
<p class="ng-scope">
We don't have to change anything!
</p>
</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
To find the products of all the integers except the integer at each index, we'll go through our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedily</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> <em>twice</em>. First we get the products of all the integers <strong>before</strong> each index, and then we go <em>backwards</em> to get the products of all the integers <strong>after</strong> each index.
</p>
<p class="ng-scope">
When we multiply all the products before and after each index, we get our answer—the products of all the integers except the integer at each index!
</p>
<div code-block="question__product-of-other-numbers__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">get_products_of_all_ints_except_at_index</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we make a list with the length of the input list to</span>
    <span class="token comment" spellcheck="true"># hold our products</span>
    products_of_all_ints_except_at_index <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># for each integer, we find the product of all the integers</span>
    <span class="token comment" spellcheck="true"># before it, storing the total product so far each time</span>
    product_so_far <span class="token operator">=</span> <span class="token number">1</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        products_of_all_ints_except_at_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> product_so_far
        product_so_far <span class="token operator">*=</span> int_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># for each integer, we find the product of all the integers</span>
    <span class="token comment" spellcheck="true"># after it. since each index in products already has the</span>
    <span class="token comment" spellcheck="true"># product of all the integers before it, now we're storing</span>
    <span class="token comment" spellcheck="true"># the total product of all other integers</span>
    product_so_far <span class="token operator">=</span> <span class="token number">1</span>
    i <span class="token operator">=</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        products_of_all_ints_except_at_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> product_so_far
        product_so_far <span class="token operator">*=</span> int_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        i <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> products_of_all_ints_except_at_index</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space. We make two passes through our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__a-standard-list"><span class="ng-scope">a list</span></span>, and the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span> we build always has the same length as the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__product-of-other-numbers__standard-list"><span class="ng-scope">list</span></span>.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
What if you <em>could</em> use division? Careful—watch out for zeroes!
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Another question using a <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> approach. The tricky thing about this one: we couldn't actually solve it in <em>one</em> pass. But we could solve it in <em>two</em> passes!
</p>

<p class="ng-scope">
This approach probably wouldn't have been obvious if we had started off trying to use a greedy approach.
</p>

<p class="ng-scope">
Instead, we started off by coming up with a slow (but correct) brute force solution and trying to improve from there. We looked at <em>what our solution actually calculated</em>, step by step, and found some <em>repeat work</em>. Our final answer came from brainstorming ways to avoid doing that repeat work.
</p>

<p class="ng-scope">
So that's a pattern that can be applied to other problems:
</p>

<p class="ng-scope">
<strong>
Start with a brute force solution, look for <em>repeat work</em> in that solution, and modify it to only do that work once.
</strong>
</p>

</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__product-of-other-numbers__index-equality": {"snake": "index == nested_index", "javascript": "index === nestedIndex", "camel": "index == nestedIndex"}, "question__product-of-other-numbers__nested-index": {"snake": "nested_index", "camel": "nestedIndex"}, "question__product-of-other-numbers__products-of-all-ints-except-at-index": {"snake": "products_of_all_ints_except_at_index", "camel": "productsOfAllIntsExceptAtIndex"}, "question__product-of-other-numbers__products-of-all-ints-after-index": {"snake": "products_of_all_ints_after_index", "camel": "productsOfAllIntsAfterIndex"}, "question__product-of-other-numbers__product-so-far": {"snake": "product_so_far", "camel": "productSoFar"}, "question__product-of-other-numbers__one-in-array": {"default": "[1]"}, "question__product-of-other-numbers__products-of-all-ints-before-index": {"snake": "products_of_all_ints_before_index", "camel": "productsOfAllIntsBeforeIndex"}, "question__product-of-other-numbers__index": {"default": "index"}, "question__product-of-other-numbers__empty-array": {"default": "[]"}}, "words": {"question__product-of-other-numbers__svg-products-after": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__vector.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input vector is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__list.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input list is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_after__array.svg?bust=135\" height=\"92\" width=\"250\"  alt=\"If the input array is [2, 4, 10], the product of all the numbers after each index is [40, 10, 1]\"  />\n\n\n    \n</div>\n"}, "question__product-of-other-numbers__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__product-of-other-numbers__svg-products-before": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__vector.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input vector is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__array.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input array is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__list.svg?bust=135\" height=\"92\" width=\"250\" alt=\"If the input list is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/product_other_numbers__products_before__array.svg?bust=135\" height=\"92\" width=\"250\"  alt=\"If the input array is [2, 4, 10], the product of all the numbers before each index is [1, 2, 8]\"  />\n\n\n    \n</div>\n"}, "question__product-of-other-numbers__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}}, "code-blocks": {"question__product-of-other-numbers__sample-calculation": {"default": "[7*3*4, 1*3*4, 1*7*4, 1*7*3]"}, "question__product-of-other-numbers__sample-output": {"default": "[84, 12, 28, 21]"}, "question__product-of-other-numbers__before-each-index-example": {"ruby": "# input array\n[3, 1, 2, 5, 6, 4]\n\n# multiplication of all integers before each index\n# (we give index 0 a value of 1 since it has no integers before it)\n[1, 3, 3*1, 3*1*2, 3*1*2*5, 3*1*2*5*6]\n\n# final array of the products of all the integers before each index\n[1, 3, 3, 6, 30, 180]", "default": "// input array\n[3, 1, 2, 5, 6, 4]\n\n// multiplication of all integers before each index\n// (we give index 0 a value of 1 since it has no integers before it)\n[1, 3, 3*1, 3*1*2, 3*1*2*5, 3*1*2*5*6]\n\n// final array of the products of all the integers before each index\n[1, 3, 3, 6, 30, 180]", "python": "# input list\n[3, 1, 2, 5, 6, 4]\n\n# multiplication of all integers before each index\n# (we give index 0 a value of 1 since it has no integers before it)\n[1, 3, 3*1, 3*1*2, 3*1*2*5, 3*1*2*5*6]\n\n# final list of the products of all the integers before each index\n[1, 3, 3, 6, 30, 180]"}, "question__product-of-other-numbers__brute-force-example": {"ruby": "# input array\n[1, 2, 6, 5, 9]\n\n# array of the products of all integers\n# except the integer at each index:\n\n[540, 270, 90, 108, 60] # [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5]", "default": "// input array\n[1, 2, 6, 5, 9]\n\n// array of the products of all integers\n// except the integer at each index:\n\n[540, 270, 90, 108, 60] // [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5]", "python": "# input list\n[1, 2, 6, 5, 9]\n\n# list of the products of all integers\n# except the integer at each index:\n\n[540, 270, 90, 108, 60] # [2*6*5*9, 1*6*5*9, 1*2*5*9, 1*2*6*9, 1*2*6*5]"}, "question__product-of-other-numbers__before-each-index-implement": {"java": "int[] productsOfAllIntsBeforeIndex = new int[intArray.length];\n\n// for each integer, find the product of all the integers\n// before it, storing the total product so far each time\nint productSoFar = 1;\nfor (int i = 0; i &lt; intArray.length; i++) {\n    productsOfAllIntsBeforeIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "cpp": "vector&lt;int> productsOfAllIntsBeforeIndex(intVector.size());\n\n// for each integer, find the product of all the integers\n// before it, storing the total product so far each time\nint productSoFar = 1;\nfor (size_t i = 0; i &lt; intVector.size(); ++i) {\n    productsOfAllIntsBeforeIndex[i] = productSoFar;\n    productSoFar *= intVector[i];\n}", "c": "int productsOfAllIntsAfterIndex[arrayLength];\nint productSoFar;\nsize_t i;\n\n// for each integer, find the product of all the integers\n// before it, storing the total product so far each time\nproductSoFar = 1;\nfor (i = 0; i &lt; arrayLength; i++) {\n    productsOfAllIntsBeforeIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "javascript": {"code": "var productsOfAllIntsBeforeIndex = [];\n\n// for each integer, find the product of all the integers\n// before it, storing the total product so far each time\nvar productSoFar = 1;\nfor (var i = 0; i &lt; intArray.length; i++) {\n    productsOfAllIntsBeforeIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "tests": "assertEqual(productsOfAllIntsBeforeIndex, test['before']);"}, "swift": {"code": "var productsOfAllIntsBeforeIndex = Array(repeating: 0, count: intArray.count)\n\n// for each integer, find the product of all the integers\n// before it, storing the total product so far each time\nvar productSoFar = 1\nfor i in 0..&lt;intArray.count {\n    productsOfAllIntsBeforeIndex[i] = productSoFar\n    productSoFar *= intArray[i]\n}", "tests": "try assertEqual(productsOfAllIntsBeforeIndex, before)"}, "ruby": {"code": "products_of_all_ints_before_index = []\n\n# for each integer, find the product of all the integers\n# before it, storing the total product so far each time\nproduct_so_far = 1\nfor i in (0...int_array.length)\n    products_of_all_ints_before_index[i] = product_so_far\n    product_so_far *= int_array[i]\nend", "tests": "assert products_of_all_ints_before_index == test['before']"}, "csharp": "int[] productsOfAllIntsBeforeIndex = new int[intArray.Length];\n\n// For each integer, find the product of all the integers\n// before it, storing the total product so far each time\nint productSoFar = 1;\nfor (int i = 0; i &lt; intArray.Length; i++)\n{\n    productsOfAllIntsBeforeIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "python": {"code": "products_of_all_ints_before_index = [None] * len(int_list)\n\n# for each integer, find the product of all the integers\n# before it, storing the total product so far each time\nproduct_so_far = 1\nfor i in xrange(len(int_list)):\n    products_of_all_ints_before_index[i] = product_so_far\n    product_so_far *= int_list[i]", "tests": "assertEqual(products_of_all_ints_before_index, test['before'])"}}, "setup": {"java": "int[] intArray = new int[]{1, 2, 3};\n\nint[] before = new int[]{1, 1, 2};\nint[] after = new int[]{6, 3, 1};\nint[] allOthers = new int[]{6, 3, 2};", "cpp": "const vector<int> intVector {1, 2, 3};\nconst vector<int> before {1, 1, 2};\nconst vector<int> after {6, 3, 1};\nconst vector<int> allOthers {6, 3, 2};", "c": "const int intArray[3] = {1, 2, 3};\nconst int before[3] = {1, 1, 2};\nconst int after[3] = {6, 3, 1};\nconst int allOthers[3] = {6, 3, 2};\nconst size_t arrayLength = 3;", "javascript": "var test = {\n    'input': [1, 2, 3],\n    'before': [1, 1, 2],\n    'after': [6, 3, 1],\n    'allOthers': [6, 3, 2],\n};\n\nvar intArray = test.input;", "swift": "let intArray = [1, 2, 3]\n\nlet before = [1, 1, 2]\nlet after = [6, 3, 1]\nlet allOthers = [6, 3, 2]", "ruby": "test = {\n    'input' => [1, 2, 3],\n    'before' => [1, 1, 2],\n    'after' => [6, 3, 1],\n    'all_others' => [6, 3, 2],\n}\n\nint_array = test['input']", "csharp": "int[] intArray = new[] {1, 2, 3};\nint[] before = new[] {1, 1, 2};\nint[] after = new[] {6, 3, 1};\nint[] allOthers = new[] {6, 3, 2};", "python": "test = {\n    'input': [1, 2, 3],\n    'before': [1, 1, 2],\n    'after': [6, 3, 1],\n    'all_others': [6, 3, 2],\n}\n\nint_list = test['input']"}, "question__product-of-other-numbers__after-each-index-implement": {"java": "int[] productsOfAllIntsAfterIndex = new int[intArray.length];\n\nint productSoFar = 1;\nfor (int i = intArray.length - 1; i >= 0; i--) {\n    productsOfAllIntsAfterIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "cpp": "vector&lt;int> productsOfAllIntsAfterIndex(intVector.size());\n\nint productSoFar = 1;\nfor (size_t i = intVector.size(); i > 0; i--) {\n    size_t j = i - 1;\n    productsOfAllIntsAfterIndex[j] = productSoFar;\n    productSoFar *= intVector[j];\n}", "c": "int productsOfAllIntsAfterIndex[arrayLength];\nsize_t i;\nint productSoFar = 1;\n\nfor (i = arrayLength; i > 0; i--) {\n    productsOfAllIntsAfterIndex[i - 1] = productSoFar;\n    productSoFar *= intArray[i - 1];\n}", "javascript": {"code": "var productsOfAllIntsAfterIndex = [];\n\nvar productSoFar = 1;\nfor (var i = intArray.length - 1; i >= 0; i--) {\n    productsOfAllIntsAfterIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "tests": "assertEqual(productsOfAllIntsAfterIndex, test['after']);"}, "swift": {"code": "var productsOfAllIntsAfterIndex = Array(repeating: 0, count: intArray.count)\n\nvar productSoFar = 1\nfor i in (0..&lt;intArray.count).reversed() {\n    productsOfAllIntsAfterIndex[i] = productSoFar\n    productSoFar *= intArray[i]\n}", "tests": "try assertEqual(productsOfAllIntsAfterIndex, after)"}, "ruby": {"code": "products_of_all_ints_after_index = []\n\nproduct_so_far = 1\ni = int_array.length - 1\nwhile i >= 0\n    products_of_all_ints_after_index[i] = product_so_far\n    product_so_far *= int_array[i]\n    i -= 1\nend", "tests": "assert products_of_all_ints_after_index == test['after']"}, "csharp": "int[] productsOfAllIntsAfterIndex = new int[intArray.Length];\n\nint productSoFar = 1;\nfor (int i = intArray.Length - 1; i >= 0; i--)\n{\n    productsOfAllIntsAfterIndex[i] = productSoFar;\n    productSoFar *= intArray[i];\n}", "python": {"code": "products_of_all_ints_after_index = [None] * len(int_list)\n\nproduct_so_far = 1\ni = len(int_list) - 1\nwhile i >= 0:\n    products_of_all_ints_after_index[i] = product_so_far\n    product_so_far *= int_list[i]\n    i -= 1", "tests": "assertEqual(products_of_all_ints_after_index, test['after'])"}}, "question__product-of-other-numbers__sample-input": {"default": "[1, 7, 3, 4]"}, "question__product-of-other-numbers__solution": {"java": {"code": "public int[] getProductsOfAllIntsExceptAtIndex(int[] intArray) {\n\n    // we make an array with the length of the input array to\n    // hold our products\n    int[] productsOfAllIntsExceptAtIndex = new int[intArray.length];\n\n    // for each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    int productSoFar = 1;\n    for (int i = 0; i &lt; intArray.length; i++) {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    // for each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (int i = intArray.length - 1; i >= 0; i--) {\n        productsOfAllIntsExceptAtIndex[i] *= productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    return productsOfAllIntsExceptAtIndex;\n}", "tests": "assertEqual(t.getProductsOfAllIntsExceptAtIndex(intArray), allOthers);"}, "cpp": {"code": "vector&lt;int> getProductsOfAllIntsExceptAtIndex(const vector&lt;int>& intVector)\n{\n    // we make an array with the length of the input array to\n    // hold our products\n    vector&lt;int> productsOfAllIntsExceptAtIndex(intVector.size());\n\n    // for each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    int productSoFar = 1;\n    for (size_t i = 0; i &lt; intVector.size(); ++i) {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar;\n        productSoFar *= intVector[i];\n    }\n\n    // for each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (size_t i = intVector.size(); i > 0; --i) {\n        size_t j = i - 1;\n        productsOfAllIntsExceptAtIndex[j] *= productSoFar;\n        productSoFar *= intVector[j];\n    }\n\n    return productsOfAllIntsExceptAtIndex;\n}", "tests": "assertEqual(getProductsOfAllIntsExceptAtIndex(intVector), allOthers);"}, "c": {"code": "void getProductsOfAllIntsExceptAtIndex(const int *intArray, size_t intArrayLength,\n                                       int *productsOfAllIntsExceptAtIndexOutput,\n                                       size_t productsOfAllIntsExceptAtIndexOutputLength)\n{\n    int productSoFar;\n    size_t i;\n\n    // make sure output is large enough\n    assert(productsOfAllIntsExceptAtIndexOutputLength >= intArrayLength);\n\n    // for each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    productSoFar = 1;\n    for (i = 0; i &lt; intArrayLength; i++) {\n        productsOfAllIntsExceptAtIndexOutput[i] = productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    // for each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (i = intArrayLength; i > 0; i--) {\n        productsOfAllIntsExceptAtIndexOutput[i - 1] *= productSoFar;\n        productSoFar *= intArray[i - 1];\n    }\n}", "tests": "{\n    int productsOfAllIntsExceptAtIndex[arrayLength];\n\n    getProductsOfAllIntsExceptAtIndex(intArray, arrayLength,\n                                      productsOfAllIntsExceptAtIndex, arrayLength);\n    ASSERT_EQUAL(productsOfAllIntsExceptAtIndex, allOthers,\n                 sizeof(productsOfAllIntsExceptAtIndex),\n                 \"Assertion 'productsOfAllIntsExceptAtIndex = allOthers' failed\");\n}"}, "javascript": {"code": "function getProductsOfAllIntsExceptAtIndex(intArray) {\n\n    var productsOfAllIntsExceptAtIndex = [];\n\n    // for each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    var productSoFar = 1;\n    for (var i = 0; i &lt; intArray.length; i++) {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    // for each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (var j = intArray.length - 1; j >= 0; j--) {\n        productsOfAllIntsExceptAtIndex[j] *= productSoFar;\n        productSoFar *= intArray[j];\n    }\n\n    return productsOfAllIntsExceptAtIndex;\n}", "tests": "assertEqual(getProductsOfAllIntsExceptAtIndex(intArray), test.allOthers);"}, "swift": {"code": "func getProductsOfAllIntsExceptAtIndex(_ intArray:[Int]) -> [Int] {\n        \n    // we make an array with the length of the input array to\n    // hold our products\n    var productsOfAllIntsExceptAtIndex = Array(repeating: 0, count: intArray.count)\n    \n    // for each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    var productSoFar = 1\n    for i in 0..&lt;intArray.count {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar\n        productSoFar *= intArray[i]\n    }\n    \n    // for each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1\n    for i in (0..&lt;intArray.count).reversed() {\n        productsOfAllIntsExceptAtIndex[i] *= productSoFar\n        productSoFar *= intArray[i]\n    }\n    \n    return productsOfAllIntsExceptAtIndex\n}", "tests": "try assertEqual(getProductsOfAllIntsExceptAtIndex(intArray), allOthers)"}, "ruby": {"code": "def get_products_of_all_ints_except_at_index(int_array)\n\n    products_of_all_ints_except_at_index = []\n\n    # for each integer, we find the product of all the integers\n    # before it, storing the total product so far each time\n    product_so_far = 1\n    i = 0\n    while i &lt; int_array.length\n        products_of_all_ints_except_at_index[i] = product_so_far\n        product_so_far *= int_array[i]\n        i += 1\n    end\n\n    # for each integer, we find the product of all the integers\n    # after it. since each index in products already has the\n    # product of all the integers before it, now we're storing\n    # the total product of all other integers\n    product_so_far = 1\n    i = int_array.length - 1\n    while i >= 0\n        products_of_all_ints_except_at_index[i] *= product_so_far\n        product_so_far *= int_array[i]\n        i -= 1\n    end\n\n    return products_of_all_ints_except_at_index\nend", "tests": "assert get_products_of_all_ints_except_at_index(int_array) == test['all_others']"}, "csharp": {"code": "public int[] GetProductsOfAllIntsExceptAtIndex(int[] intArray)\n{\n    // We make an array with the length of the input array to\n    // hold our products\n    int[] productsOfAllIntsExceptAtIndex = new int[intArray.Length];\n\n    // For each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    int productSoFar = 1;\n    for (int i = 0; i &lt; intArray.Length; i++)\n    {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    // For each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (int i = intArray.Length - 1; i >= 0; i--)\n    {\n        productsOfAllIntsExceptAtIndex[i] *= productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    return productsOfAllIntsExceptAtIndex;\n}", "tests": "AssertEqual(GetProductsOfAllIntsExceptAtIndex(intArray), allOthers);"}, "python": {"code": "def get_products_of_all_ints_except_at_index(int_list):\n\n    # we make a list with the length of the input list to\n    # hold our products\n    products_of_all_ints_except_at_index = [None] * len(int_list)\n\n    # for each integer, we find the product of all the integers\n    # before it, storing the total product so far each time\n    product_so_far = 1\n    i = 0\n    while i &lt; len(int_list):\n        products_of_all_ints_except_at_index[i] = product_so_far\n        product_so_far *= int_list[i]\n        i += 1\n\n    # for each integer, we find the product of all the integers\n    # after it. since each index in products already has the\n    # product of all the integers before it, now we're storing\n    # the total product of all other integers\n    product_so_far = 1\n    i = len(int_list) - 1\n    while i >= 0:\n        products_of_all_ints_except_at_index[i] *= product_so_far\n        product_so_far *= int_list[i]\n        i -= 1\n\n    return products_of_all_ints_except_at_index", "tests": "assert get_products_of_all_ints_except_at_index(int_list) == test['all_others']"}}}, "funcs": {"question__product-of-other-numbers__get-products-of-all-ints-except-at-index": {"snake": "get_products_of_all_ints_except_at_index", "camel": "getProductsOfAllIntsExceptAtIndex", "csharp": "GetProductsOfAllIntsExceptAtIndex"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/product-of-other-numbers" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/product-of-other-numbers" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/product-of-other-numbers&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/product-of-other-numbers" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/product-of-other-numbers" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/product-of-other-numbers&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/jquery.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/underscore-min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/angular-seo.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./02.Product of All Other Numbers _ Interview Cake_files/base.js"></script>

    
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/prism.min.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/codemirror.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/python.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/ruby.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/javascript.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/clike.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/php.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/haskell.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./02.Product of All Other Numbers _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./02.Product of All Other Numbers _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./02.Product of All Other Numbers _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./02.Product of All Other Numbers _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="0qNS7fhCFHgEufuQVnqJ25JvzfradEypxZcepkswbgyljkGWjSF2zO7dU4HDrSME">
<div id="loading">
. . .
</div>


<link href="./02.Product of All Other Numbers _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default386984_provider" id="stripeXDM_default386984_provider" src="./02.Product of All Other Numbers _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./02.Product of All Other Numbers _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket39849" src="./02.Product of All Other Numbers _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>