<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0065)https://www.interviewcake.com/question/python/temperature-tracker -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./07.Temperature Tracker _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./07.Temperature Tracker _ Interview Cake_files/visits"></script><script type="text/javascript" src="./07.Temperature Tracker _ Interview Cake_files/9e57878e2e"></script><script src="./07.Temperature Tracker _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./07.Temperature Tracker _ Interview Cake_files/track"></script><script type="text/javascript" src="./07.Temperature Tracker _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./07.Temperature Tracker _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./07.Temperature Tracker _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./07.Temperature Tracker _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":4,"agent":"","applicationID":"7328113","applicationTime":268,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/temperature-tracker">
        <meta name="description" content="Write code to continually track the max, min, mean, and mode as new numbers are inserted into a tracker class.">

        

        <meta property="og:title" content="Temperature Tracker | Interview Cake">
        <meta property="og:description" content="Write code to continually track the max, min, mean, and mode as new numbers are inserted into a tracker class.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/temperature-tracker">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Temperature Tracker | Interview Cake">
        <meta name="twitter:description" content="Write code to continually track the max, min, mean, and mode as new numbers are inserted into a tracker class.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Temperature Tracker | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./07.Temperature Tracker _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./07.Temperature Tracker _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./07.Temperature Tracker _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./07.Temperature Tracker _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./07.Temperature Tracker _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./07.Temperature Tracker _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./07.Temperature Tracker _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./07.Temperature Tracker _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./07.Temperature Tracker _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./07.Temperature Tracker _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./07.Temperature Tracker _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./07.Temperature Tracker _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/temperature-tracker" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/temperature-tracker" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/temperature-tracker" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/temperature-tracker" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;temperature-tracker&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Temperature Tracker" data-meta_desc="Write code to continually track the max, min, mean, and mode as new numbers are inserted into a tracker class." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="5" data-num-hints="7" data-num-gotchas="3" ng-init="setNumHints(7); setNumGotchas(3); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You decide to test if your oddly-mathematical heating company is fulfilling its <em>All-Time Max, Min, Mean and Mode Temperature Guarantee</em>™.
</strong>
</p>
<p class="ng-scope">
Write a class <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__temp-tracker-class"><span class="ng-scope">TempTracker</span></span> with these methods:
</p>
<ol class="ng-scope">
<li>
<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__insert"><span class="name" ng-transclude=""><span class="ng-scope">insert</span></span>()</span>—records a new temperature
</li>
<li>
<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>—returns the highest temp we've seen so far
</li>
<li>
<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-min"><span class="name" ng-transclude=""><span class="ng-scope">get_min</span></span>()</span>—returns the lowest temp we've seen so far
</li>
<li>
<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mean"><span class="name" ng-transclude=""><span class="ng-scope">get_mean</span></span>()</span>—returns the <span concept="mean" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">mean</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>mean</strong> of a list of values is the <strong>average</strong>.
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext><mi mathvariant="normal">m</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">n</mi></mtext><mo>=</mo><mfrac><mrow><mtext><mi mathvariant="normal">s</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mtext>&nbsp;</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>&nbsp;</mtext><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">l</mi><mtext>&nbsp;</mtext><mi mathvariant="normal">v</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">s</mi></mtext></mrow><mrow><mtext><mi mathvariant="normal">n</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mtext>&nbsp;</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>&nbsp;</mtext><mi mathvariant="normal">v</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">s</mi></mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{mean}=\frac{\text{sum of all values}}{\text{number of values}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.880108em;"></span><span class="strut bottom" style="height: 1.22511em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="text mord textstyle uncramped"><span class="mord">m</span><span class="mord">e</span><span class="mord">a</span><span class="mord">n</span></span><span class="mrel">=</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="text mord scriptstyle cramped"><span class="mord">n</span><span class="mord">u</span><span class="mord">m</span><span class="mord">b</span><span class="mord">e</span><span class="mord">r</span><span class="mord mspace">&nbsp;</span><span class="mord">o</span><span class="mord" style="margin-right: 0.07778em;">f</span><span class="mord mspace">&nbsp;</span><span class="mord" style="margin-right: 0.01389em;">v</span><span class="mord">a</span><span class="mord">l</span><span class="mord">u</span><span class="mord">e</span><span class="mord">s</span></span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="text mord scriptstyle uncramped"><span class="mord">s</span><span class="mord">u</span><span class="mord">m</span><span class="mord mspace">&nbsp;</span><span class="mord">o</span><span class="mord" style="margin-right: 0.07778em;">f</span><span class="mord mspace">&nbsp;</span><span class="mord">a</span><span class="mord">l</span><span class="mord">l</span><span class="mord mspace">&nbsp;</span><span class="mord" style="margin-right: 0.01389em;">v</span><span class="mord">a</span><span class="mord">l</span><span class="mord">u</span><span class="mord">e</span><span class="mord">s</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> of all temps we've seen so far
</li>
<li>
<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mode"><span class="name" ng-transclude=""><span class="ng-scope">get_mode</span></span>()</span>—returns a <span concept="mode" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">mode</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>mode</strong> of a list of values is the <strong>number which appears the most times</strong>.
</p>

<p>
For example, in this set:
</p>

<div code-block="concept__mode__set-of-integers" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">[1, 3, 6, 3, 1, 3]</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
The number 3 appears the most times, so it's the mode.
</p>

<p>
<strong>Careful:</strong> a set may have multiple modes.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__mode__set-of-integers": {"default": "[1, 3, 6, 3, 1, 3]"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> of all temps we've seen so far
</li>
</ol>

<p class="ng-scope">
Optimize for space and time. <strong>Favor speeding up the getter functions (<span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>, <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-min"><span class="name" ng-transclude=""><span class="ng-scope">get_min</span></span>()</span>, <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mean"><span class="name" ng-transclude=""><span class="ng-scope">get_mean</span></span>()</span>, and <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mode"><span class="name" ng-transclude=""><span class="ng-scope">get_mode</span></span>()</span>) over speeding up the <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__insert"><span class="name" ng-transclude=""><span class="ng-scope">insert</span></span>()</span> function.</strong>
</p>

<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__temperature-tracker__mean-type"><span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mean"><span class="name" ng-transclude=""><span class="ng-scope">get_mean</span></span>()</span><span class="ng-scope"> should return a </span><strong class="ng-scope">float</strong><span class="ng-scope">, but the rest of the getter functions can return </span><strong class="ng-scope">integers</strong><span class="ng-scope">.</span></span> Temperatures will all be inserted as integers. We'll record our temperatures in Fahrenheit, so we can assume they'll all be in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>1</mn><mn>1</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">0..110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span></span>.
</p>

<p class="ng-scope">
If there is more than one mode, return any of the modes.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can get <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for all functions.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can get away with only using <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> additional space in our class. If you're storing each temperature as it comes in, be careful! You might be taking up <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of temperatures we insert!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Are you trying to be fancy about returning multiple modes if there's a tie? Good idea, but <em>read the problem statement carefully</em>! Check out that last sentence!
</p>

<p class="aside ng-scope">
Failing to carefully read or listen to the problem statement is a <em>very</em> common mistake, and it <em>always</em> looks bad. Don't let it happen to you.
</p>

</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
The first thing we want to optimize is our getter functions (per the instructions).
</p>

<p class="ng-scope">
Our first thought might be to throw our temperatures into <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__temperature-tracker__a-standard-list"><span class="ng-scope">a list</span></span> or linked list as they come in. With this method, getting the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__max-temp"><span class="ng-scope">max_temp</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__min-temp"><span class="ng-scope">min_temp</span></span> would take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time. It would also cost us <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space. But we can do better.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we kept track of the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__max-temp"><span class="ng-scope">max_temp</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__min-temp"><span class="ng-scope">min_temp</span></span> <em>as each new number was inserted</em>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
That's easy enough:
</p>

<div code-block="question__temperature-tracker__track-max-and-min-on-insertion" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temperature
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>min_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> temperature

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp

    <span class="token keyword">def</span> <span class="token function">get_min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_temp</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
This wins us <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> and <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-min"><span class="name" ng-transclude=""><span class="ng-scope">get_min</span></span>()</span>, while keeping <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__insert"><span class="name" ng-transclude=""><span class="ng-scope">insert</span></span>()</span> and removing the need to store all the values.
</p>

<p class="ng-scope">
Can we do something similar for <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__get-mean"><span class="name" ng-transclude=""><span class="ng-scope">get_mean</span></span>()</span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Unlike with <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__min-temp-in-class"><span class="ng-scope">min_temp</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__max-temp-in-class"><span class="ng-scope">max_temp</span></span>, the new temp and the previous mean won't give us enough information to calculate the new mean. What other information will we need to track?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
To calculate the mean of a list of values, we need to know:
</p>

<ul class="ng-scope">
<li>the sum of all the values</li>
<li>the total number of values</li>
</ul>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
So we can augment our class to keep track of the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__total-numbers-in-class"><span class="ng-scope">total_numbers</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__total-sum-in-class"><span class="ng-scope">total_sum</span></span>. Then we can compute the mean as values are inserted:
</p>

<div code-block="question__temperature-tracker__compute-mean-on-insertion" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># for mean</span>
        self<span class="token punctuation">.</span>total_numbers <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>total_sum <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token comment" spellcheck="true"># mean should be float</span>
        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> None

        <span class="token comment" spellcheck="true"># for min and max</span>
        self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># for mean</span>
        self<span class="token punctuation">.</span>total_numbers <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>total_sum <span class="token operator">+=</span> temperature
        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> self<span class="token punctuation">.</span>total_sum <span class="token operator">/</span> self<span class="token punctuation">.</span>total_numbers

        <span class="token comment" spellcheck="true"># for min and max</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temperature
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>min_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> temperature

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp

    <span class="token keyword">def</span> <span class="token function">get_min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_temp

    <span class="token keyword">def</span> <span class="token function">get_mean</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mean</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
<strong>Can we do something similar for the mode?</strong> What other information will we need to track to compute the mode?
</p>


</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
To calculate the mode, we need to know how many times each value has been inserted.
</p>
<p class="ng-scope">
How can we track this? What data structures should we use?
</p>
</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
We maintain the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__max-temp-in-class"><span class="ng-scope">max_temp</span></span>, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__min-temp-in-class"><span class="ng-scope">min_temp</span></span>, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__mean-in-class"><span class="ng-scope">mean</span></span>, and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__mode-in-class"><span class="ng-scope">mode</span></span> as temperatures are inserted, so that each getter function simply returns an instance variable.
</p>

<p class="ng-scope">
To maintain the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__mean-in-class"><span class="ng-scope">mean</span></span> at each insert, we track the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__total-numbers-in-class"><span class="ng-scope">total_numbers</span></span> and the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__total-sum-in-class"><span class="ng-scope">total_sum</span></span> of numbers inserted so far.
</p>

<p class="ng-scope">
To maintain the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__mode-in-class"><span class="ng-scope">mode</span></span> at each insert, we track the total <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__occurrences-in-class"><span class="ng-scope">occurrences</span></span> of each number, as well as the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__max-occurrences-in-class"><span class="ng-scope">max_occurrences</span></span> we've seen so far.
</p>

<div code-block="question__temperature-tracker__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># for mode</span>
        self<span class="token punctuation">.</span>occurrences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># list of 0s at indices 0..110</span>
        self<span class="token punctuation">.</span>max_occurrences <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> None

        <span class="token comment" spellcheck="true"># for mean</span>
        self<span class="token punctuation">.</span>total_numbers <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>total_sum <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token comment" spellcheck="true"># mean should be float</span>
        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> None

        <span class="token comment" spellcheck="true"># for min and max</span>
        self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># for mode</span>
        self<span class="token punctuation">.</span>occurrences<span class="token punctuation">[</span>temperature<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>occurrences<span class="token punctuation">[</span>temperature<span class="token punctuation">]</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_occurrences<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>mode <span class="token operator">=</span> temperature
            self<span class="token punctuation">.</span>max_occurrences <span class="token operator">=</span> self<span class="token punctuation">.</span>occurrences<span class="token punctuation">[</span>temperature<span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># for mean</span>
        self<span class="token punctuation">.</span>total_numbers <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>total_sum <span class="token operator">+=</span> temperature
        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> self<span class="token punctuation">.</span>total_sum <span class="token operator">/</span> self<span class="token punctuation">.</span>total_numbers

        <span class="token comment" spellcheck="true"># for min and max</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temperature
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_temp <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>temperature <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>min_temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>min_temp <span class="token operator">=</span> temperature

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp

    <span class="token keyword">def</span> <span class="token function">get_min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_temp

    <span class="token keyword">def</span> <span class="token function">get_mean</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mean

    <span class="token keyword">def</span> <span class="token function">get_mode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mode</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__temperature-tracker__we-dont-even-need-getters"><span class="ng-scope">We don't really </span><em class="ng-scope">need</em><span class="ng-scope"> the getter functions since they all return attributes. We could directly access the attributes!</span></span>
</p>

<div code-block="question__temperature-tracker__function-and-attribute" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># function</span>
temp_tracker<span class="token punctuation">.</span>get_mean<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># attribute</span>
temp_tracker<span class="token punctuation">.</span>mean</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__temperature-tracker__but-we-should-keep-getters"><p class="ng-scope">
    We'll leave the getter functions in our solution because the question specifically asked for them.
</p>
<p class="ng-scope">
    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility—if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.
</p></span>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for each function, and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space related to input! (Our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__temperature-tracker__occurrences"><span class="ng-scope">occurrences</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__temperature-tracker__standard-list"><span class="ng-scope">list</span></span>'s size is bounded by our range of possible temps, in this case 0-110)
</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
This question deals a lot with just-in-time vs ahead-of-time. Or lazy vs eager. Or on-line vs off-line. There are a few names for this.
</p>

<p class="ng-scope">
Our first thought for this question might have been to use a <strong>just-in-time</strong> approach: have our <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__insert"><span class="name" ng-transclude=""><span class="ng-scope">insert</span></span>()</span> function simply put the temperature in a list, and then have our getters compute e.g. the mode just-in-time, at the moment the getter is called.
</p>

<p class="ng-scope">
Instead, we used an <strong>ahead-of-time</strong> approach: have our insert function compute and store our mean, mode, max, and min <em>ahead of time</em> (that is, before they're asked for). So our getter just returns the pre-computed value in <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>

<p class="ng-scope">
In this case, the ahead-of-time approach doesn't <em>just</em> speed up our getters...it also reduces our space cost. If we tried to compute each metric just-in-time, we'd need to store all of the temperatures as they come in, taking <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> <span class="ic-function ng-isolate-scope" func="question__temperature-tracker__insert"><span class="name" ng-transclude=""><span class="ng-scope">insert</span></span>()</span>s.
</p>

<p class="ng-scope">
As an added bonus, the ahead-of-time approach didn't increase our asymptotic time cost for inserts, even though we added more work. With some cleverness (channeling some <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> thinking to figure out <em>what we needed to store</em> in order to update the answer in <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time), we were able to keep it at <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>

<p class="ng-scope">
It doesn't always happen this way. Sometimes there are <em>trade-offs</em> between just-in-time and ahead-of-time. Sometimes to save time in our getters, we have to spend <em>more</em> time in our insert.
</p>

<p class="ng-scope">
In those cases, whether we should prefer a just-in-time approach or an ahead-of-time approach is a nuanced question. Ultimately it comes down to your usage patterns. Do you expect to get more inserts than gets? Do slow inserts have a stronger negative effect on users than slow gets?
</p>

<p class="ng-scope">
We have some more questions dealing with this stuff coming up later.
</p>


<p class="ng-scope">
Whenever you're designing a data structure with inserts and getters, think about the advantages and disadvantages of a just-in-time approach vs an ahead-of-time approach.
</p>

</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__temperature-tracker__max-temp-in-class": {"camel": "maxTemp", "csharp": "_maxTemp", "default": "max_temp", "cpp": "maxTemp_"}, "question__temperature-tracker__mode": {"default": "mode"}, "question__temperature-tracker__max-occurrences-in-class": {"snake": "max_occurrences", "camel": "maxOccurrences", "csharp": "_maxOccurrences", "cpp": "maxOccurrences_"}, "question__temperature-tracker__occurrences-in-class": {"csharp": "_occurrences", "default": "occurrences", "cpp": "occurrences_"}, "question__temperature-tracker__total-numbers-in-class": {"snake": "total_numbers", "camel": "totalNumbers", "csharp": "_totalNumbers", "cpp": "totalNumbers_"}, "question__temperature-tracker__total-sum": {"snake": "total_sum", "camel": "totalSum"}, "question__temperature-tracker__max-temp": {"camel": "maxTemp", "default": "max_temp"}, "question__temperature-tracker__mean": {"default": "mean"}, "question__temperature-tracker__temp-tracker-class": {"default": "TempTracker"}, "question__temperature-tracker__occurrences": {"default": "occurrences"}, "question__temperature-tracker__mean-in-class": {"csharp": "_mean", "default": "mean", "cpp": "mean_"}, "question__temperature-tracker__min-temp-in-class": {"camel": "minTemp", "csharp": "_minTemp", "default": "min_temp", "cpp": "minTemp_"}, "question__temperature-tracker__max-occurrences": {"snake": "max_occurrences", "camel": "maxOccurrences"}, "question__temperature-tracker__min-temp": {"camel": "minTemp", "default": "min_temp"}, "question__temperature-tracker__mode-in-class": {"csharp": "_mode", "default": "mode", "cpp": "mode_"}, "question__temperature-tracker__total-sum-in-class": {"snake": "total_sum", "camel": "totalSum", "csharp": "_totalSum", "cpp": "totalSum_"}, "question__temperature-tracker__total-numbers": {"snake": "total_numbers", "camel": "totalNumbers"}}, "words": {"question__temperature-tracker__we-dont-even-need-getters": {"java": "We don't really <em>need</em> the getter functions since they all return instance variables. We could directly access the instance variables!", "cpp": "We don't really <em>need</em> the getter functions since they all return  attributes.\nWe could directly access the attributes! (Of course, we'd have to make them public first.)", "c": "We don't really <em>need</em> the getter functions since they all return attributes. We could directly access the attributes!", "javascript": "We don't really <em>need</em> the getter functions since they all return attributes. We could directly access the attributes!", "swift": "We don't really <em>need</em> the getter methods since they all return instance properties. We could directly access the instance properties!", "ruby": "We don't really <em>need</em> the getter functions since they all return instance variables. We could directly access the instance variables with <span code-inline=\"attr-reader\">attr_reader</span>!", "csharp": "We don't really <em>need</em> the getter methods since they all return instance fields. We could directly access the private instance fields using public properties!", "python": "We don't really <em>need</em> the getter functions since they all return attributes. We could directly access the attributes!", "default": "We don't really <em>need</em> the getter functions since they all return attributes. We could directly access the attributes!"}, "question__temperature-tracker__but-we-should-keep-getters": {"java": "<p>\n    But we should leave the getter functions because the question specifically asked for them.\n</p>\n<p>\n    And we usually use getters and setters in Java anyway because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. But in other languages like Python and JavaScript, we <em>would</em> usually access the instance variables directly, to avoid adding an unnecessary layer of abstraction. Different languages, different conventions.\n</p>", "cpp": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span words=\"c18n-language\">C++ (beta)</span> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "c": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span words=\"c18n-language\">C (beta)</span> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "javascript": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span words=\"c18n-language\">JavaScript</span> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "swift": "<p>\n    We'll leave the getter methods in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use properties instead of methods. In Swift we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "ruby": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use variables instead of functions. In Ruby we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "csharp": "<p>\n    But we should leave the getter methods because the question specifically asked for them.\n</p>\n<p>\n    And we usually use properties in C# anyway because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. But in other languages like Python and JavaScript, we <em>would</em> usually access the instance fields directly, to avoid adding an unnecessary layer of abstraction. Different languages, different conventions.\n</p>", "python": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span words=\"c18n-language\">Python</span> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>", "default": "<p>\n    We'll leave the getter functions in our solution because the question specifically asked for them.\n</p>\n<p>\n    But otherwise, we probably <em>would</em> use attributes instead of functions. In <span words=\"c18n-language\"/> we usually don't make getters if we don't <em>have</em> to, to avoid unnecessary layers of abstraction. But in Java we <em>would</em> use getters because they give us flexibility&#8212;if we need to change our logic <em>inside</em> our class, it won't change how other people <em>interact</em> with our class. Different languages, different conventions.\n</p>"}, "question__temperature-tracker__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}, "question__temperature-tracker__mean-type": {"ruby": "<span func=\"get-mean\">get_mean</span> should return a <strong>float</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "cpp": "<span func=\"get-mean\">getMean</span> should return a <strong>float</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "c": "<span func=\"get-mean\">getMean</span> should return a <strong>float</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "javascript": "", "swift": "<span func=\"get-mean\"/> should return a <strong>double</strong>, but the rest of the getter methods can return <strong>integers</strong>.", "java": "<span func=\"get-mean\">getMean</span> should return a <strong>double</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "csharp": "<span func=\"get-mean\"/> should return a <strong>double</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "python": "<span func=\"get-mean\">get_mean</span> should return a <strong>float</strong>, but the rest of the getter functions can return <strong>integers</strong>.", "default": "<span func=\"get-mean\"/> should return a <strong>float</strong>, but the rest of the getter functions can return <strong>integers</strong>."}, "question__temperature-tracker__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__temperature-tracker__c18n-language": {"java": "Java", "cpp": "C++ (beta)", "c": "C (beta)", "javascript": "JavaScript", "ruby": "Ruby", "python": "Python"}}, "code-blocks": {"question__temperature-tracker__solution": {"java": {"code": "class TempTracker {\n\n    // for mode\n    int[] occurrences = new int[111]; // array of 0s at indices 0..110\n    int maxOccurrences = 0;\n    Integer mode;\n\n    // for mean\n    int totalNumbers = 0;\n    double totalSum = 0.0; // mean should be double\n    Double mean;\n\n    // for min and max\n    Integer minTemp;\n    Integer maxTemp;\n\n    public boolean insert(int temperature) {\n\n        // for mode\n        occurrences[temperature]++;\n        if (occurrences[temperature] > maxOccurrences) {\n            mode = temperature;\n            maxOccurrences = occurrences[temperature];\n        }\n\n        // for mean\n        totalNumbers++;\n        totalSum += temperature;\n        mean = totalSum / totalNumbers;\n\n        // for min and max\n        if (maxTemp == null || temperature > maxTemp) {\n            maxTemp = temperature;\n        }\n        if (minTemp == null || temperature &lt; minTemp) {\n            minTemp = temperature;\n        }\n\n        return true;\n    }\n\n    public Integer getMax() {\n        return maxTemp;\n    }\n\n    public Integer getMin() {\n        return minTemp;\n    }\n\n    public Double getMean() {\n        return mean;\n    }\n\n    public Integer getMode() {\n        return mode;\n    }\n}", "tests": "// max and min\nTempTracker tracker = t.new TempTracker();\ntracker.insert(2);\nassertEqual(tracker.getMax(), 2);\nassertEqual(tracker.getMin(), 2);\ntracker.insert(3);\ntracker.insert(0);\ntracker.insert(1);\nassertEqual(tracker.getMax(), 3);\nassertEqual(tracker.getMin(), 0);\n\n// mean\ntracker = t.new TempTracker();\ntracker.insert(1);\nassertEqual(tracker.getMean(), (double) 1);\ntracker.insert(2);\ntracker.insert(3);\nassertEqual(tracker.getMean(), (double) 2);\ntracker.insert(11);\nassertEqual(tracker.getMean(), (double) 4.25);\n\n// mode\ntracker = t.new TempTracker();\ntracker.insert(1);\nassertEqual(tracker.getMode(), 1);\ntracker.insert(2);\nassertContains(tracker.getMode(), new HashSet<Integer>(Arrays.asList(1, 2)));\ntracker.insert(4);\ntracker.insert(4);\nassertEqual(tracker.getMode(), 4);"}, "cpp": {"code": "class TempTracker\n{\nprivate:\n    // for mode\n    vector&lt;size_t> occurrences_;\n    size_t maxOccurrences_;\n    int mode_;\n\n    // for mean\n    size_t totalNumbers_;\n    double totalSum_;\n    double mean_;\n\n    // for min and max\n    int minTemp_;\n    int maxTemp_;\n\npublic:\n    TempTracker() :\n        occurrences_(111), // vector of 0s at indices 0..110\n        maxOccurrences_(0),\n        mode_(0),\n        totalNumbers_(0),\n        totalSum_(0.0),\n        mean_(0.0),\n        minTemp_(numeric_limits&lt;int>::max()),\n        maxTemp_(numeric_limits&lt;int>::min())\n    {\n    }\n\n    void insert(int temperature)\n    {\n        // for mode\n        size_t currentTemperatureOccurrences = ++occurrences_[temperature];\n        if (currentTemperatureOccurrences > maxOccurrences_) {\n            mode_ = temperature;\n            maxOccurrences_ = currentTemperatureOccurrences;\n        }\n\n        // for mean\n        ++totalNumbers_;\n        totalSum_ += temperature;\n        mean_ = totalSum_ / totalNumbers_;\n\n        // for min and max\n        minTemp_ = min(minTemp_, temperature);\n        maxTemp_ = max(maxTemp_, temperature);\n    }\n\n    int getMax() const\n    {\n        return maxTemp_;\n    }\n\n    int getMin() const\n    {\n        return minTemp_;\n    }\n\n    double getMean() const\n    {\n        return mean_;\n    }\n\n    int getMode() const\n    {\n        return mode_;\n    }\n};", "tests": "// max and min\n{\n    TempTracker tracker;\n    tracker.insert(2);\n    assertEqual(tracker.getMax(), 2, \"minmax #1\");\n    assertEqual(tracker.getMin(), 2, \"minmax #2\");\n    tracker.insert(3);\n    tracker.insert(0);\n    tracker.insert(1);\n    assertEqual(tracker.getMax(), 3, \"minmax #3\");\n    assertEqual(tracker.getMin(), 0, \"minmax #4\");\n}\n\n// mean\n{\n    TempTracker tracker;\n    tracker.insert(1);\n    assertEqual(tracker.getMean(), 1.0, \"mean #1\");\n    tracker.insert(2);\n    tracker.insert(3);\n    assertEqual(tracker.getMean(), 2.0, \"mean #2\");\n    tracker.insert(11);\n    assertEqual(tracker.getMean(), 4.25, \"mean #3\");\n}\n\n// mode\n{\n    TempTracker tracker;\n    tracker.insert(1);\n    assertEqual(tracker.getMode(), 1);\n    tracker.insert(2);\n    const vector<int> modes {1, 2};\n    assertContains(modes, tracker.getMode());\n    tracker.insert(4);\n    tracker.insert(4);\n    assertEqual(tracker.getMode(), 4);\n}"}, "c": {"setup": "typedef struct {\n    // for mode\n    size_t occurrences[111]; // array of 0s at indices 0..110\n    size_t maxOccurrences;\n    int mode;\n    // for mean\n    size_t totalNumbers;\n    double totalSum;\n    double mean;\n    // for min and max\n    int minTemp;\n    int maxTemp;\n} TempTracker_;\n\nvoid initTracker(TempTracker_ *tracker) {\n    memset(&tracker->occurrences, 0, sizeof(tracker->occurrences));\n    tracker->maxOccurrences = 0;\n    tracker->mode = 0;\n    tracker->totalNumbers = 0;\n    tracker->totalSum = 0.0;\n    tracker->mean = 0.0;\n    tracker->minTemp = INT_MAX;\n    tracker->maxTemp = INT_MIN;\n}", "code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\ntypedef struct {\n    // for mode\n    size_t occurrences[111]; // array of 0s at indices 0..110\n    size_t maxOccurrences;\n    int mode;\n    // for mean\n    size_t totalNumbers;\n    double totalSum;\n    double mean;\n    // for min and max\n    int minTemp;\n    int maxTemp;\n} TempTracker;\n\nvoid insertTemperature(TempTracker *tracker, int temperature) {\n    // make sure we have a valid occurrences index\n    assert(temperature >= 0 && temperature &lt; 111);\n\n    // for mode\n    tracker->occurrences[temperature]++;\n    if (tracker->occurrences[temperature] > tracker->maxOccurrences) {\n        tracker->mode = temperature;\n        tracker->maxOccurrences = tracker->occurrences[temperature];\n    }\n\n    // for mean\n    tracker->totalNumbers++;\n    tracker->totalSum += temperature;\n    tracker->mean = tracker->totalSum / tracker->totalNumbers;\n\n    // for min and max\n    tracker->minTemp = MIN(tracker->minTemp, temperature);\n    tracker->maxTemp = MAX(tracker->maxTemp, temperature);\n}", "tests": "{\n    // max and min\n    TempTracker tracker;\n\n    initTracker(&tracker);\n    insertTemperature(&tracker, 2);\n    ASSERT(tracker.maxTemp == 2);\n    ASSERT(tracker.minTemp == 2);\n\n    insertTemperature(&tracker, 3);\n    insertTemperature(&tracker, 0);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.maxTemp == 3);\n    ASSERT(tracker.minTemp == 0);\n\n    // mean\n    initTracker(&tracker);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.mean == 1.0);\n\n    insertTemperature(&tracker, 2);\n    insertTemperature(&tracker, 3);\n    ASSERT(tracker.mean == 2.0);\n\n    insertTemperature(&tracker, 11);\n    ASSERT(tracker.mean == 4.25);\n\n    // mode\n    initTracker(&tracker);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.mode == 1);\n\n    insertTemperature(&tracker, 2);\n    const int modes[2] = {1, 2};\n    char msg[256];\n    snprintf(msg, sizeof(msg), \"'modes contains %d'\", tracker.mode);\n    ASSERT_CONTAINS(modes, sizeof(int), 2, &tracker.mode, msg);\n    insertTemperature(&tracker, 4);\n    insertTemperature(&tracker, 4);\n    ASSERT(tracker.mode == 4);\n}"}, "javascript": {"code": "function TempTracker() {\n\n    // for mode\n    this.occurrences = []; // array of 0s at indices 0..110\n    for (var i = 0; i &lt; 111; i++) {\n        this.occurrences[i] = 0;\n    }\n    this.maxOccurrences = 0;\n    this.mode = null;\n\n    // for mean\n    this.totalNumbers = 0;\n    this.totalSum = 0;\n    this.mean = null;\n\n    // for min and max\n    this.minTemp = null;\n    this.maxTemp = null;\n}\n\nTempTracker.prototype.insert = function(temperature) {\n\n    // for mode\n    this.occurrences[temperature]++;\n    if (this.occurrences[temperature] > this.maxOccurrences) {\n        this.mode = temperature;\n        this.maxOccurrences = this.occurrences[temperature];\n    }\n\n    // for mean\n    this.totalNumbers++;\n    this.totalSum += temperature;\n    this.mean = this.totalSum / this.totalNumbers;\n\n    // for min and max\n    if (this.maxTemp === null || temperature > this.maxTemp) {\n        this.maxTemp = temperature;\n    }\n    if (this.minTemp === null || temperature &lt; this.minTemp) {\n        this.minTemp = temperature;\n    }\n};\n\nTempTracker.prototype.getMax = function() {\n    return this.maxTemp;\n};\n\nTempTracker.prototype.getMin = function() {\n    return this.minTemp;\n};\n\nTempTracker.prototype.getMean = function() {\n    return this.mean;\n};\n\nTempTracker.prototype.getMode = function() {\n    return this.mode;\n};", "tests": "testMaxAndMin(new TempTracker());\ntestMean(new TempTracker());\ntestMode(new TempTracker());"}, "swift": {"code": "class TempTracker {\n    \n    // for mode\n    var occurrences = Array(repeating: 0, count: 110) // array of 0s at indices 0..110\n    var maxOccurrences = 0\n    var mode: Int?\n    \n    // for mean\n    var totalNumbers = 0\n    var totalSum = 0.0 // mean should be double\n    var mean: Double?\n    \n    // for min and max\n    var minTemp: Int?\n    var maxTemp: Int?\n    \n    func insert(temperature: Int) -> Bool {\n        \n        // for mode\n        occurrences[temperature] += 1;\n        if occurrences[temperature] > maxOccurrences {\n            mode = temperature\n            maxOccurrences = occurrences[temperature]\n        }\n        \n        // for mean\n        totalNumbers += 1\n        totalSum += Double(temperature)\n        mean = totalSum / Double(totalNumbers)\n        \n        // for min and max\n        if let maxTemp = maxTemp {\n            self.maxTemp = max(maxTemp, temperature)\n        } else {\n            self.maxTemp = temperature\n        }\n        \n        if let minTemp = minTemp {\n            self.minTemp = min(minTemp, temperature)\n        } else {\n            self.minTemp = temperature\n        }\n        \n        return true\n    }\n    \n    func getMax() -> Int? {\n        return maxTemp\n    }\n    \n    func getMin() -> Int? {\n        return minTemp\n    }\n    \n    func getMean() -> Double? {\n        return mean\n    }\n    \n    func getMode() -> Int? {\n        return mode\n    }\n}", "tests": "extension TempTracker: TempTrackable { }\ntry testMaxAndMin(for: TempTracker())\ntry testMean(for: TempTracker())\ntry testMode(for: TempTracker())"}, "ruby": {"code": "class TempTracker\n\n    def initialize\n\n        # for mode\n        @occurrences = [0] * (111) # array of 0s at indices 0..110\n        @max_occurrences = 0\n        @mode = nil\n\n        # for mean\n        @total_numbers = 0\n        @total_sum = 0.0 # mean should be float\n        @mean = nil\n\n        # for min and max\n        @min_temp = nil\n        @max_temp = nil\n    end\n\n    def insert(temperature)\n\n        # for mode\n        @occurrences[temperature] += 1\n        if @occurrences[temperature] > @max_occurrences\n            @mode = temperature\n            @max_occurrences = @occurrences[temperature]\n        end\n\n        # for mean\n        @total_numbers += 1\n        @total_sum += temperature\n        @mean = @total_sum / @total_numbers\n\n        # for min and max\n        if @max_temp.nil? or temperature > @max_temp\n            @max_temp = temperature\n        end\n        if @min_temp.nil? or temperature &lt; @min_temp\n            @min_temp = temperature\n        end\n    end\n\n    def get_max\n        return @max_temp\n    end\n\n    def get_min\n        return @min_temp\n    end\n\n    def get_mean\n        return @mean\n    end\n\n    def get_mode\n        return @mode\n    end\nend", "tests": "test_max_and_min(TempTracker.new)\ntest_mean(TempTracker.new)\ntest_mode(TempTracker.new)"}, "csharp": {"code": "public class TempTracker\n{\n    // For mode\n    private int[] _occurrences = new int[111]; // Array of 0s at indices 0..110\n    private int _maxOccurrences;\n    private int? _mode;\n\n    // For mean\n    private int _totalNumbers;\n    private int _totalSum;\n    private double? _mean; // Mean should be double\n\n    // For min and max\n    private int? _minTemp;\n    private int? _maxTemp;\n\n    public bool Insert(int temperature)\n    {\n        // For mode\n        _occurrences[temperature]++;\n        if (_occurrences[temperature] > _maxOccurrences)\n        {\n            _mode = temperature;\n            _maxOccurrences = _occurrences[temperature];\n        }\n\n        // For mean\n        _totalNumbers++;\n        _totalSum += temperature;\n        _mean = (double)_totalSum / _totalNumbers;\n\n        // For min and max\n        if (_maxTemp == null || temperature > _maxTemp)\n        {\n            _maxTemp = temperature;\n        }\n\n        if (_minTemp == null || temperature &lt; _minTemp)\n        {\n            _minTemp = temperature;\n        }\n\n        return true;\n    }\n\n    public int? GetMax()\n    {\n        return _maxTemp;\n    }\n\n    public int? GetMin()\n    {\n        return _minTemp;\n    }\n\n    public double? GetMean()\n    {\n        return _mean;\n    }\n\n    public int? GetMode()\n    {\n        return _mode;\n    }\n}", "tests": "// Max and min\nvar tracker = new TempTracker();\ntracker.Insert(2);\nAssertEqual(tracker.GetMax(), 2);\nAssertEqual(tracker.GetMin(), 2);\ntracker.Insert(3);\ntracker.Insert(0);\ntracker.Insert(1);\nAssertEqual(tracker.GetMax(), 3);\nAssertEqual(tracker.GetMin(), 0);\n\n// Mean\ntracker = new TempTracker();\ntracker.Insert(1);\nAssertEqual(tracker.GetMean(), 1.0);\ntracker.Insert(2);\ntracker.Insert(3);\nAssertEqual(tracker.GetMean(), 2.0);\ntracker.Insert(11);\nAssertEqual(tracker.GetMean(), 4.25);\n\n// Mode\ntracker = new TempTracker();\ntracker.Insert(1);\nAssertEqual(tracker.GetMode(), 1);\ntracker.Insert(2);\nAssertContains(tracker.GetMode(), new int?[] { 1, 2 });\ntracker.Insert(4);\ntracker.Insert(4);\nAssertEqual(tracker.GetMode(), 4);"}, "python": {"code": "class TempTracker:\n\n    def __init__(self):\n\n        # for mode\n        self.occurrences = [0] * (111) # list of 0s at indices 0..110\n        self.max_occurrences = 0\n        self.mode = None\n\n        # for mean\n        self.total_numbers = 0\n        self.total_sum = 0.0 # mean should be float\n        self.mean = None\n\n        # for min and max\n        self.min_temp = None\n        self.max_temp = None\n\n    def insert(self, temperature):\n\n        # for mode\n        self.occurrences[temperature] += 1\n        if self.occurrences[temperature] > self.max_occurrences:\n            self.mode = temperature\n            self.max_occurrences = self.occurrences[temperature]\n\n        # for mean\n        self.total_numbers += 1\n        self.total_sum += temperature\n        self.mean = self.total_sum / self.total_numbers\n\n        # for min and max\n        if (self.max_temp is None) or (temperature > self.max_temp):\n            self.max_temp = temperature\n        if (self.min_temp is None) or (temperature &lt; self.min_temp):\n            self.min_temp = temperature\n\n    def get_max(self):\n        return self.max_temp\n\n    def get_min(self):\n        return self.min_temp\n\n    def get_mean(self):\n        return self.mean\n\n    def get_mode(self):\n        return self.mode", "tests": "test_max_and_min(TempTracker())\ntest_mean(TempTracker())\ntest_mode(TempTracker())"}}, "question__temperature-tracker__compute-mean-on-insertion": {"java": {"code": "class TempTracker {\n\n    // for mean\n    int totalNumbers = 0;\n    double totalSum = 0.0; // mean should be double\n    Double mean;\n\n    // for min and max\n    Integer minTemp;\n    Integer maxTemp;\n\n    public boolean insert(int temperature) {\n\n        // for mean\n        totalNumbers++;\n        totalSum += temperature;\n        mean = totalSum / totalNumbers;\n\n        // for min and max\n        if (maxTemp == null || temperature > maxTemp) {\n            maxTemp = temperature;\n        }\n        if (minTemp == null || temperature &lt; minTemp) {\n            minTemp = temperature;\n        }\n\n        return true;\n    }\n\n    public Integer getMax() {\n        return maxTemp;\n    }\n\n    public Integer getMin() {\n        return minTemp;\n    }\n\n    public Double getMean() {\n        return mean;\n    }\n}", "tests": "// max and min\nTempTracker tracker = t.new TempTracker();\ntracker.insert(2);\nassertEqual(tracker.getMax(), 2);\nassertEqual(tracker.getMin(), 2);\ntracker.insert(3);\ntracker.insert(0);\ntracker.insert(1);\nassertEqual(tracker.getMax(), 3);\nassertEqual(tracker.getMin(), 0);\n\n// mean\ntracker = t.new TempTracker();\ntracker.insert(1);\nassertEqual(tracker.getMean(), (double) 1);\ntracker.insert(2);\ntracker.insert(3);\nassertEqual(tracker.getMean(), (double) 2);\ntracker.insert(11);\nassertEqual(tracker.getMean(), (double) 4.25);"}, "cpp": {"code": "class TempTracker\n{\nprivate:\n    // for mean\n    size_t totalNumbers_;\n    double totalSum_;\n    double mean_;\n\n    // for min and max\n    int minTemp_;\n    int maxTemp_;\n\npublic:\n    TempTracker() :\n        totalNumbers_(0),\n        totalSum_(0.0),\n        mean_(0.0),\n        minTemp_(numeric_limits&lt;int>::max()),\n        maxTemp_(numeric_limits&lt;int>::min())\n    {\n    }\n\n    void insert(int temperature)\n    {\n        // for mean\n        ++totalNumbers_;\n        totalSum_ += temperature;\n        mean_ = totalSum_ / totalNumbers_;\n\n        // for min and max\n        minTemp_ = min(minTemp_, temperature);\n        maxTemp_ = max(maxTemp_, temperature);\n    }\n\n    int getMax() const\n    {\n        return maxTemp_;\n    }\n\n    int getMin() const\n    {\n        return minTemp_;\n    }\n\n    double getMean() const\n    {\n        return mean_;\n    }\n};", "tests": "// max and min\n{\n    TempTracker tracker;\n    tracker.insert(2);\n    assertEqual(tracker.getMax(), 2, \"minmax #1\");\n    assertEqual(tracker.getMin(), 2, \"minmax #2\");\n    tracker.insert(3);\n    tracker.insert(0);\n    tracker.insert(1);\n    assertEqual(tracker.getMax(), 3, \"minmax #3\");\n    assertEqual(tracker.getMin(), 0, \"minmax #4\");\n}\n\n// mean\n{\n    TempTracker tracker;\n    tracker.insert(1);\n    assertEqual(tracker.getMean(), 1.0, \"mean #1\");\n    tracker.insert(2);\n    tracker.insert(3);\n    assertEqual(tracker.getMean(), 2.0, \"mean #2\");\n    tracker.insert(11);\n    assertEqual(tracker.getMean(), 4.25, \"mean #3\");\n}"}, "c": {"setup": "typedef struct {\n    // for mean\n    size_t totalNumbers;\n    double totalSum;\n    double mean;\n    // for min and max\n    int minTemp;\n    int maxTemp;\n} TempTracker_;\n\n// helper initialization function\nvoid initTracker(TempTracker_ *tracker) {\n    tracker->totalNumbers = 0;\n    tracker->totalSum = 0.0;\n    tracker->mean = 0.0;\n    tracker->minTemp = INT_MAX;\n    tracker->maxTemp = INT_MIN;\n}", "code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\ntypedef struct {\n    // for mean\n    size_t totalNumbers;\n    double totalSum;\n    double mean;\n    // for min and max\n    int minTemp;\n    int maxTemp;\n} TempTracker;\n\nvoid insertTemperature(TempTracker *tracker, int temperature) {\n    // for mean\n    tracker->totalNumbers++;\n    tracker->totalSum += temperature;\n    tracker->mean = tracker->totalSum / tracker->totalNumbers;\n\n    // for min and max\n    tracker->minTemp = MIN(tracker->minTemp, temperature);\n    tracker->maxTemp = MAX(tracker->maxTemp, temperature);\n}", "tests": "{\n    // max and min\n    TempTracker tracker;\n\n    initTracker(&tracker);\n    insertTemperature(&tracker, 2);\n    ASSERT(tracker.maxTemp == 2);\n    ASSERT(tracker.minTemp == 2);\n\n    insertTemperature(&tracker, 3);\n    insertTemperature(&tracker, 0);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.maxTemp == 3);\n    ASSERT(tracker.minTemp == 0);\n\n    // mean\n    initTracker(&tracker);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.mean == 1.0);\n\n    insertTemperature(&tracker, 2);\n    insertTemperature(&tracker, 3);\n    ASSERT(tracker.mean == 2.0);\n\n    insertTemperature(&tracker, 11);\n    ASSERT(tracker.mean == 4.25);\n}"}, "javascript": {"code": "function TempTracker() {\n\n    // for mean\n    this.totalNumbers = 0;\n    this.totalSum = 0;\n    this.mean = null;\n\n    // for min and max\n    this.minTemp = null;\n    this.maxTemp = null;\n}\n\nTempTracker.prototype.insert = function(temperature) {\n\n    // for mean\n    this.totalNumbers++;\n    this.totalSum += temperature;\n    this.mean = this.totalSum / this.totalNumbers;\n\n    // for min and max\n    if (this.maxTemp === null || temperature > this.maxTemp) {\n        this.maxTemp = temperature;\n    }\n    if (this.minTemp === null || temperature &lt; this.minTemp) {\n        this.minTemp = temperature;\n    }\n};\n\nTempTracker.prototype.getMax = function() {\n    return this.maxTemp;\n};\n\nTempTracker.prototype.getMin = function() {\n    return this.minTemp;\n};\n\nTempTracker.prototype.getMean = function() {\n    return this.mean;\n};", "tests": "testMaxAndMin(new TempTracker());\ntestMean(new TempTracker());"}, "swift": {"code": "class TempTracker {\n    \n    // for mean\n    var totalNumbers = 0\n    var totalSum = 0.0 // mean should be double\n    var mean: Double?\n    \n    // for min and max\n    var minTemp: Int?\n    var maxTemp: Int?\n    \n    func insert(temperature: Int) -> Bool {\n        \n        // for mean\n        totalNumbers += 1\n        totalSum += Double(temperature)\n        mean = totalSum / Double(totalNumbers)\n        \n        // for min and max\n        if let maxTemp = maxTemp {\n            self.maxTemp = max(maxTemp, temperature)\n        } else {\n            self.maxTemp = temperature\n        }\n        \n        if let minTemp = minTemp {\n            self.minTemp = min(minTemp, temperature)\n        } else {\n            self.minTemp = temperature\n        }\n\n        return true\n    }\n    \n    func getMax() -> Int? {\n        return maxTemp\n    }\n    \n    func getMin() -> Int? {\n        return minTemp\n    }\n    \n    func getMean() -> Double? {\n        return mean\n    }\n}", "tests": "extension TempTracker: TempTrackable {\n        func getMode() -> Int? {\n            return nil\n        }\n}\ntry testMaxAndMin(for: TempTracker())\ntry testMean(for: TempTracker())"}, "ruby": {"code": "class TempTracker\n\n    def initialize\n\n        # for mean\n        @total_numbers = 0\n        @total_sum = 0.0 # mean should be float\n        @mean = nil\n\n        # for min and max\n        @min_temp = nil\n        @max_temp = nil\n    end\n\n    def insert(temperature)\n\n        # for mean\n        @total_numbers += 1\n        @total_sum += temperature\n        @mean = @total_sum / @total_numbers\n\n        # for min and max\n        if @max_temp.nil? or temperature > @max_temp\n            @max_temp = temperature\n        end\n        if @min_temp.nil? or temperature &lt; @min_temp\n            @min_temp = temperature\n        end\n    end\n\n    def get_max\n        return @max_temp\n    end\n\n    def get_min\n        return @min_temp\n    end\n\n    def get_mean\n        return @mean\n    end\nend", "tests": "test_max_and_min(TempTracker.new)\ntest_mean(TempTracker.new)"}, "csharp": {"code": "public class TempTracker\n{\n    // For mean\n    private int _totalNumbers;\n    private int _totalSum;\n    private double? _mean; // Mean should be double\n\n    // For min and max\n    private int? _minTemp;\n    private int? _maxTemp;\n\n    public bool Insert(int temperature)\n    {\n        // For mean\n        _totalNumbers++;\n        _totalSum += temperature;\n        _mean = (double)_totalSum / _totalNumbers;\n\n        // For min and max\n        if (_maxTemp == null || temperature > _maxTemp)\n        {\n            _maxTemp = temperature;\n        }\n\n        if (_minTemp == null || temperature &lt; _minTemp)\n        {\n            _minTemp = temperature;\n        }\n\n        return true;\n    }\n\n    public int? GetMax()\n    {\n        return _maxTemp;\n    }\n\n    public int? GetMin()\n    {\n        return _minTemp;\n    }\n\n    public double? GetMean()\n    {\n        return _mean;\n    }\n}", "tests": "// Max and min\nvar tracker = new TempTracker();\ntracker.Insert(2);\nAssertEqual(tracker.GetMax(), 2);\nAssertEqual(tracker.GetMin(), 2);\ntracker.Insert(3);\ntracker.Insert(0);\ntracker.Insert(1);\nAssertEqual(tracker.GetMax(), 3);\nAssertEqual(tracker.GetMin(), 0);\n\n// Mean\ntracker = new TempTracker();\ntracker.Insert(1);\nAssertEqual(tracker.GetMean(), 1.0);\ntracker.Insert(2);\ntracker.Insert(3);\nAssertEqual(tracker.GetMean(), 2.0);\ntracker.Insert(11);\nAssertEqual(tracker.GetMean(), 4.25);"}, "python": {"code": "class TempTracker:\n\n    def __init__(self):\n\n        # for mean\n        self.total_numbers = 0\n        self.total_sum = 0.0 # mean should be float\n        self.mean = None\n\n        # for min and max\n        self.min_temp = None\n        self.max_temp = None\n\n    def insert(self, temperature):\n\n        # for mean\n        self.total_numbers += 1\n        self.total_sum += temperature\n        self.mean = self.total_sum / self.total_numbers\n\n        # for min and max\n        if (self.max_temp is None) or (temperature > self.max_temp):\n            self.max_temp = temperature\n        if (self.min_temp is None) or (temperature &lt; self.min_temp):\n            self.min_temp = temperature\n\n    def get_max(self):\n        return self.max_temp\n\n    def get_min(self):\n        return self.min_temp\n\n    def get_mean(self):\n        return self.mean", "tests": "test_max_and_min(TempTracker())\ntest_mean(TempTracker())"}}, "question__temperature-tracker__function-and-attribute": {"javascript": "// function\ntempTracker.getMean();\n\n// attribute\ntempTracker.mean;", "swift": "// function\ntempTracker.getMean()\n\n// attribute\ntempTracker.mean", "java": "// function\ntempTracker.getMean();\n\n// attribute\ntempTracker.mean;", "csharp": "// Method\ntempTracker.GetMean();\n\n// Property: public double? Mean => _mean;\ntempTracker.Mean;", "default": "# function\ntemp_tracker.get_mean()\n\n# attribute\ntemp_tracker.mean"}, "question__temperature-tracker__track-max-and-min-on-insertion": {"java": {"code": "class TempTracker {\n\n    Integer minTemp;\n    Integer maxTemp;\n\n    public boolean insert(int temperature) {\n        if (maxTemp == null || temperature > maxTemp) {\n            maxTemp = temperature;\n        }\n        if (minTemp == null || temperature &lt; minTemp) {\n            minTemp = temperature;\n        }\n        return true;\n    }\n\n    public Integer getMax() {\n        return maxTemp;\n    }\n\n    public Integer getMin() {\n        return minTemp;\n    }\n}", "tests": "// max and min\nTempTracker tracker = t.new TempTracker();\ntracker.insert(2);\nassertEqual(tracker.getMax(), 2);\nassertEqual(tracker.getMin(), 2);\ntracker.insert(3);\ntracker.insert(0);\ntracker.insert(1);\nassertEqual(tracker.getMax(), 3);\nassertEqual(tracker.getMin(), 0);"}, "cpp": {"code": "class TempTracker\n{\nprivate:\n    int minTemp_;\n    int maxTemp_;\n\npublic:\n    TempTracker() :\n        minTemp_(numeric_limits&lt;int>::max()),\n        maxTemp_(numeric_limits&lt;int>::min())\n    {\n    }\n\n    void insert(int temperature)\n    {\n        minTemp_ = min(minTemp_, temperature);\n        maxTemp_ = max(maxTemp_, temperature);\n    }\n\n    int getMax() const\n    {\n        return maxTemp_;\n    }\n\n    int getMin() const\n    {\n        return minTemp_;\n    }\n};", "tests": "// max and min\nTempTracker tracker;\ntracker.insert(2);\nassertEqual(tracker.getMax(), 2);\nassertEqual(tracker.getMin(), 2);\ntracker.insert(3);\ntracker.insert(0);\ntracker.insert(1);\nassertEqual(tracker.getMax(), 3);\nassertEqual(tracker.getMin(), 0);"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\ntypedef struct {\n    int minTemp;\n    int maxTemp;\n} TempTracker;\n\nvoid insertTemperature(TempTracker *tracker, int temperature) {\n    tracker->minTemp = MIN(temperature, tracker->minTemp);\n    tracker->maxTemp = MAX(temperature, tracker->maxTemp);\n}", "tests": "{\n    // max and min\n    TempTracker tracker = {INT_MAX, INT_MIN};\n\n    insertTemperature(&tracker, 2);\n    ASSERT(tracker.maxTemp == 2);\n    ASSERT(tracker.minTemp == 2);\n\n    insertTemperature(&tracker, 3);\n    insertTemperature(&tracker, 0);\n    insertTemperature(&tracker, 1);\n    ASSERT(tracker.maxTemp == 3);\n    ASSERT(tracker.minTemp == 0);\n}"}, "javascript": {"code": "function TempTracker() {\n    this.minTemp = null;\n    this.maxTemp = null;\n}\n\nTempTracker.prototype.insert = function(temperature) {\n    if (this.maxTemp === null || temperature > this.maxTemp) {\n        this.maxTemp = temperature;\n    }\n    if (this.minTemp === null || temperature &lt; this.minTemp) {\n        this.minTemp = temperature;\n    }\n};\n\nTempTracker.prototype.getMax = function() {\n    return this.maxTemp;\n};\n\nTempTracker.prototype.getMin = function() {\n    return this.minTemp;\n};", "tests": "testMaxAndMin(new TempTracker());"}, "swift": {"code": "class TempTracker {\n    \n    var minTemp: Int?\n    var maxTemp: Int?\n    \n    func insert(temperature: Int) -> Bool {\n        if let maxTemp = maxTemp {\n            self.maxTemp = max(maxTemp, temperature)\n        } else {\n            self.maxTemp = temperature\n        }\n        \n        if let minTemp = minTemp {\n            self.minTemp = min(minTemp, temperature)\n        } else {\n            self.minTemp = temperature\n        }\n\n        return true\n    }\n    \n    func getMax() -> Int? {\n        return maxTemp\n    }\n    \n    func getMin() -> Int? {\n        return minTemp\n    }\n}", "tests": "extension TempTracker: TempTrackable {\n        func getMean() -> Double? {\n            return nil\n        }\n        func getMode() -> Int? {\n            return nil\n        }\n}\ntry testMaxAndMin(for: TempTracker())"}, "ruby": {"code": "class TempTracker\n\n    def initialize\n        @min_temp = nil\n        @max_temp = nil\n    end\n\n    def insert(temperature)\n        if @max_temp.nil? or temperature > @max_temp\n            @max_temp = temperature\n        end\n        if @min_temp.nil? or temperature &lt; @min_temp\n            @min_temp = temperature\n        end\n    end\n\n    def get_max\n        return @max_temp\n    end\n\n    def get_min\n        return @min_temp\n    end\nend", "tests": "test_max_and_min(TempTracker.new)"}, "csharp": {"code": "public class TempTracker\n{\n    private int? _minTemp;\n\n    private int? _maxTemp;\n\n    public bool Insert(int temperature)\n    {\n        if (_maxTemp == null || temperature > _maxTemp)\n        {\n            _maxTemp = temperature;\n        }\n\n        if (_minTemp == null || temperature &lt; _minTemp)\n        {\n            _minTemp = temperature;\n        }\n\n        return true;\n    }\n\n    public int? GetMax()\n    {\n        return _maxTemp;\n    }\n\n    public int? GetMin()\n    {\n        return _minTemp;\n    }\n}", "tests": "// Max and min\nvar tracker = new TempTracker();\ntracker.Insert(2);\nAssertEqual(tracker.GetMax(), 2);\nAssertEqual(tracker.GetMin(), 2);\ntracker.Insert(3);\ntracker.Insert(0);\ntracker.Insert(1);\nAssertEqual(tracker.GetMax(), 3);\nAssertEqual(tracker.GetMin(), 0);"}, "python": {"code": "class TempTracker:\n\n    def __init__(self):\n        self.min_temp = None\n        self.max_temp = None\n\n    def insert(self, temperature):\n        if (self.max_temp is None) or (temperature > self.max_temp):\n            self.max_temp = temperature\n        if (self.min_temp is None) or (temperature &lt; self.min_temp):\n            self.min_temp = temperature\n\n    def get_max(self):\n        return self.max_temp\n\n    def get_min(self):\n        return self.min_temp", "tests": "test_max_and_min(TempTracker())"}}, "setup": {"javascript": "function testMaxAndMin(tracker) {\n    tracker.insert(2);\n    assertEqual(tracker.getMax(), 2);\n    assertEqual(tracker.getMin(), 2);\n    tracker.insert(3);\n    tracker.insert(1);\n    assertEqual(tracker.getMax(), 3);\n    assertEqual(tracker.getMin(), 1);\n};\n\nfunction testMean(tracker) {\n    tracker.insert(1);\n    assertEqual(tracker.getMean(), 1);\n    tracker.insert(2);\n    tracker.insert(3);\n    assertEqual(tracker.getMean(), 2);\n    tracker.insert(11);\n    assertEqual(tracker.getMean(), 4.25);\n};\n\nfunction testMode(tracker) {\n    tracker.insert(1);\n    assertEqual(tracker.getMode(), 1);\n    tracker.insert(2);\n    assertContains(tracker.getMode(), [1, 2]);\n    tracker.insert(4);\n    tracker.insert(4);\n    assertEqual(tracker.getMode(), 4);\n};", "swift": "protocol TempTrackable {\n    func insert(temperature: Int) -> Bool\n    func getMax() -> Int?\n    func getMin() -> Int?\n    func getMean() -> Double?\n    func getMode() -> Int?\n}\n\nfunc testMaxAndMin(for tracker: TempTrackable) throws {\n    let _ = tracker.insert(temperature: 2)\n    \n    guard let max = tracker.getMax(),\n        let min = tracker.getMin() else {\n            throw AssertionException.exception(\"max / min value is nil\")\n    }\n    \n    try assertEqual(max, 2)\n    try assertEqual(min, 2)\n    let _ = tracker.insert(temperature: 3)\n    let _ = tracker.insert(temperature: 0)\n    let _ = tracker.insert(temperature: 1)\n    \n    guard let newMax = tracker.getMax(),\n        let newMin = tracker.getMin() else {\n            throw AssertionException.exception(\"newMax / newMin value is nil\")\n    }\n    \n    try assertEqual(newMax, 3)\n    try assertEqual(newMin, 0)\n}\n\nfunc testMean(for tracker: TempTrackable) throws {\n    let _ = tracker.insert(temperature: 1)\n    \n    guard let mean1 = tracker.getMean() else {\n        throw AssertionException.exception(\"mean1 value is nil\")\n    }\n    \n    try assertEqual(mean1, 1)\n    let _ = tracker.insert(temperature: 2)\n    let _ = tracker.insert(temperature: 3)\n    \n    guard let mean2 = tracker.getMean() else {\n        throw AssertionException.exception(\"mean2 value is nil\")\n    }\n    \n    try assertEqual(mean2, 2)\n    let _ = tracker.insert(temperature: 11)\n    \n    guard let mean3 = tracker.getMean() else {\n        throw AssertionException.exception(\"mean3 value is nil\")\n    }\n    \n    try assertEqual(mean3, 4.25)\n}\n\nfunc testMode(for tracker: TempTrackable) throws {\n    let _ = tracker.insert(temperature: 1)\n    \n    guard let mode1 = tracker.getMode() else {\n        throw AssertionException.exception(\"mode1 value is nil\")\n    }\n    \n    try assertEqual(mode1, 1)\n    let _ = tracker.insert(temperature: 2)\n    \n    guard let mode2 = tracker.getMode() else {\n        throw AssertionException.exception(\"mode2 value is nil\")\n    }\n    \n    try assertContains(mode2, [1, 2])\n    let _ = tracker.insert(temperature: 4)\n    let _ = tracker.insert(temperature: 4)\n    \n    guard let mode3 = tracker.getMode() else {\n        throw AssertionException.exception(\"mode3 value is nil\")\n    }\n\n    try assertEqual(mode3, 4)\n}", "ruby": "def test_max_and_min(tracker)\n    tracker.insert(2)\n    assert tracker.get_max() == 2\n    assert tracker.get_min() == 2\n    tracker.insert(3)\n    tracker.insert(0)\n    tracker.insert(1)\n    assert tracker.get_max() == 3\n    assert tracker.get_min() == 0\nend\n\ndef test_mean(tracker)\n    tracker.insert(1)\n    mean = tracker.get_mean()\n    assert mean == 1\n    assert mean.class == Float\n    tracker.insert(2)\n    tracker.insert(3)\n    assert tracker.get_mean() == 2\n    tracker.insert(11)\n    assert tracker.get_mean() == 4.25\nend\n\ndef test_mode(tracker)\n    tracker.insert(1)\n    assert tracker.get_mode() == 1\n    tracker.insert(2)\n    assertContains(tracker.get_mode(), [1, 2])\n    tracker.insert(4)\n    tracker.insert(4)\n    assert tracker.get_mode() == 4\nend", "python": "def test_max_and_min(tracker):\n    tracker.insert(2)\n    assert tracker.get_max() == 2\n    assert tracker.get_min() == 2\n    tracker.insert(3)\n    tracker.insert(0)\n    tracker.insert(1)\n    assert tracker.get_max() == 3\n    assert tracker.get_min() == 0\n\ndef test_mean(tracker):\n    tracker.insert(1)\n    mean = tracker.get_mean()\n    assert mean == 1\n    assert type(mean) == float\n    tracker.insert(2)\n    tracker.insert(3)\n    assert tracker.get_mean() == 2\n    tracker.insert(11)\n    assert tracker.get_mean() == 4.25\n\ndef test_mode(tracker):\n    tracker.insert(1)\n    assert tracker.get_mode() == 1\n    tracker.insert(2)\n    assertContains(tracker.get_mode(), [1, 2])\n    tracker.insert(4)\n    tracker.insert(4)\n    assert tracker.get_mode() == 4"}}, "code-inlines": {"question__temperature-tracker__attr-reader": {"default": "attr_reader"}}, "funcs": {"question__temperature-tracker__get-min": {"snake": "get_min", "camel": "getMin", "csharp": "GetMin"}, "question__temperature-tracker__insert": {"csharp": "Insert", "default": "insert"}, "question__temperature-tracker__get-mode": {"snake": "get_mode", "camel": "getMode", "csharp": "GetMode"}, "question__temperature-tracker__get-mean": {"snake": "get_mean", "camel": "getMean", "csharp": "GetMean"}, "question__temperature-tracker__get-max": {"snake": "get_max", "camel": "getMax", "csharp": "GetMax"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/temperature-tracker" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/temperature-tracker" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/temperature-tracker&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/temperature-tracker" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/temperature-tracker" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/temperature-tracker&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./07.Temperature Tracker _ Interview Cake_files/jquery.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./07.Temperature Tracker _ Interview Cake_files/underscore-min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/angular-seo.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./07.Temperature Tracker _ Interview Cake_files/base.js"></script>

    
    <script src="./07.Temperature Tracker _ Interview Cake_files/prism.min.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/codemirror.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/python.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/ruby.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/javascript.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/clike.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/php.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/haskell.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./07.Temperature Tracker _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./07.Temperature Tracker _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./07.Temperature Tracker _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./07.Temperature Tracker _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="e8Y15Sq8WYToztulZmPrRgHuxlIEWcgoLHnnnXB2sxb5oyGrnR4KoZ5cSaY7aquD">
<div id="loading">
. . .
</div>


<link href="./07.Temperature Tracker _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default592858_provider" id="stripeXDM_default592858_provider" src="./07.Temperature Tracker _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./07.Temperature Tracker _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket47192" src="./07.Temperature Tracker _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>