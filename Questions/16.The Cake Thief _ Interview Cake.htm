<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0056)https://www.interviewcake.com/question/python/cake-thief -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./16.The Cake Thief _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./16.The Cake Thief _ Interview Cake_files/visits"></script><script type="text/javascript" src="./16.The Cake Thief _ Interview Cake_files/9e57878e2e"></script><script src="./16.The Cake Thief _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./16.The Cake Thief _ Interview Cake_files/track"></script><script type="text/javascript" src="./16.The Cake Thief _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./16.The Cake Thief _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./16.The Cake Thief _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./16.The Cake Thief _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":299}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/cake-thief">
        <meta name="description" content="You&#39;ve hit the motherload: the cake vault of the Queen of England. Figure out how much of each cake to carry out to maximize profit.">

        

        <meta property="og:title" content="The Cake Thief | Interview Cake">
        <meta property="og:description" content="You&#39;ve hit the motherload: the cake vault of the Queen of England. Figure out how much of each cake to carry out to maximize profit.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/cake-thief">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="The Cake Thief | Interview Cake">
        <meta name="twitter:description" content="You&#39;ve hit the motherload: the cake vault of the Queen of England. Figure out how much of each cake to carry out to maximize profit.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>The Cake Thief | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./16.The Cake Thief _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./16.The Cake Thief _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./16.The Cake Thief _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./16.The Cake Thief _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./16.The Cake Thief _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./16.The Cake Thief _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./16.The Cake Thief _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./16.The Cake Thief _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./16.The Cake Thief _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./16.The Cake Thief _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./16.The Cake Thief _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./16.The Cake Thief _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/cake-thief" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/cake-thief" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/cake-thief" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/cake-thief" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope" aria-describedby="tooltip833018">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip833018" style="top: 92px; left: 597px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">JavaScript Scope</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;cake-thief&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="The Cake Thief" data-meta_desc="You&#39;ve hit the motherload: the cake vault of the Queen of England. Figure out how much of each cake to carry out to maximize profit." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="8" data-num-hints="35" data-num-gotchas="3" ng-init="setNumHints(35); setNumGotchas(3); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You are a renowned thief who has recently switched from stealing precious metals to stealing cakes because of the insane profit margins. You end up hitting the jackpot, breaking into the world's largest privately owned stock of cakes—the vault of the Queen of England.
</strong>
</p>
<p class="ng-scope">
While Queen Elizabeth has a <em>limited number of types of cake</em>, she has an <em>unlimited supply of each type</em>.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__cake-weight-value-pairs-explanation"><p class="ng-scope">
Each type of cake has a weight and a value, stored in <span class="ic-words ng-isolate-scope" ng-transclude="" words="a-cake-weight-value-pair"><span class="ng-scope">a tuple</span></span> with two indices:
</p>
<ol start="0" class="ng-scope">
<li>An integer representing the <strong>weight</strong> of the cake in kilograms</li>
<li>An integer representing the <strong>monetary value</strong> of the cake in British pounds</li>
</ol></span>

<p class="ng-scope">For example:</p>
<div code-block="question__cake-thief__example-weight-value-pairs" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># weighs 7 kilograms and has a value of 160 pounds</span>
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># weighs 3 kilograms and has a value of 90 pounds</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
You brought a duffel bag that can hold limited weight, and you want to make off with the most valuable haul possible.
</p>
<p class="ng-scope">
Write a function <span class="ic-function ng-isolate-scope" func="question__cake-thief__max-duffel-bag-value"><span class="name" ng-transclude=""><span class="ng-scope">max_duffel_bag_value</span></span>()</span> that takes <strong><span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-standard-list"><span class="ng-scope">a list</span></span> of cake type <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__cake-weight-value-pair"><span class="ng-scope">tuple</span></span>s </strong> and <strong>a weight capacity</strong>, and returns <strong>the <em>maximum monetary value</em> the duffel bag can hold.</strong>
</p>
<p class="ng-scope">
For example:
</p>
<div code-block="question__cake-thief__example-input-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">cake_tuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
capacity    <span class="token operator">=</span> <span class="token number">20</span>

max_duffel_bag_value<span class="token punctuation">(</span>cake_tuples<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># returns 555 (6 of the middle type of cake and 1 of the last type of cake)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
<small><strong>Weights and values may be any non-negative integer.</strong> Yes, it's weird to think about cakes that weigh nothing or duffel bags that can't hold anything. But we're not just super mastermind criminals—we're also meticulous about keeping our algorithms flexible and comprehensive.</small>
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Does your function work if the duffel bag's weight capacity is 0 kg?
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Does your function work if any of the cakes weigh 0 kg? Think about a cake whose weight and value are <em>both</em> 0!
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="n*k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of types of cakes and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> is the duffel bag's capacity!
</p>
</div>
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
The <strong>brute force approach</strong> is to try <em>every</em> combination of cakes, but that would take a really long time—you'd surely be captured.
</p>
<p class="ng-scope">
What if we just look at <strong>the cake with the <em>highest value?</em></strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We could keep putting the cake with the highest value into our duffel bag until adding one more would go over our weight capacity. Then we could look at the cake with the <em>second</em> highest value, and so on until we find a cake that’s not too heavy to add.
</p>
<p class="ng-scope">
<strong>Will this work?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Nope. Let's say our capacity is <strong>100 kg</strong> and these are our two cakes:
</p>
<div code-block="question__cake-thief__two-cake-pairs-focus-on-values" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
With our approach, we’ll put in two of the second type of cake for a total value of <em>400 pounds</em>. But we could have put in a <em>hundred</em> of the first type of cake, for a total value of <em>3000 pounds!</em>
</p>
<p class="ng-scope">
Just looking at the cake's values won’t work. <strong>Can we improve our approach?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, <em>why</em> didn’t it work?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We didn’t think about the <strong>weight!</strong> How can we factor that in?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if instead of looking at the <strong>value</strong> of the cakes, we looked at their <strong>value/weight ratio?</strong> Here are our example cakes again:
</p>
<div code-block="question__cake-thief__two-cake-pairs-focus-on-values" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
The second cake has a higher value, but look at the value <strong>per kilogram</strong>.
</p>
<p class="ng-scope">
The second type of cake is worth 4 pounds/kg (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mn>0</mn><mn>0</mn><mi mathvariant="normal">/</mi><mn>5</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">200/50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">/</span><span class="mord">5</span><span class="mord">0</span></span></span></span></span>), but the first type of cake is worth 30 pounds/kg (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">30/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord">3</span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span></span>)!
</p>
<p class="ng-scope">
Ok, can we just change our algorithm to use the highest value/weight ratio instead of the highest value? We know it would work in our example above, but try some more tests to be safe.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We might run into problems if the weight of the cake with the highest value/weight ratio doesn’t fit evenly into the capacity. Say we have these two cakes:
</p>
<div code-block="question__cake-thief__two-cake-pairs-focus-on-value-weight-ratio" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
If our capacity is <strong>8 kg</strong>, no problem. Our algorithm chooses one of each cake, giving us a haul worth <strong>110 pounds</strong>, which is optimal.
</p>
<p class="ng-scope">
But if the capacity is <strong>9 kg</strong>, we're in trouble. Our algorithm will again choose one of each cake, for a total value of <strong>110 pounds</strong>. But the <em>actual optimal value</em> is <strong>120 pounds</strong>—three of the first type of cake!
</p>
<p class="ng-scope">
So even looking at the value/weight ratios doesn’t always give us the optimal answer!
</p>
<p class="ng-scope">
Let’s step back. <strong>How can we <em>ensure</em> we get the <em>optimal</em> value we can carry?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Try thinking small. How can we calculate the maximum value for a duffel bag with a weight capacity of <strong>1 kg</strong>? (Remember, all our weights and values are integers.)
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<strong>If the capacity is 1 kg</strong>, we’ll only care about cakes that weigh 1 kg (for simplicity, let's ignore zeroes for now). And we'd just want the one with the <em>highest</em> value.
</p>
<p class="ng-scope">
We could go through every cake, using a <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> approach to keep track of the max value we’ve seen so far.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Here’s an example solution:
</p>
<div code-block="question__cake-thief__max-duffel-bag-value-with-capacity-one" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">max_duffel_bag_value_with_capacity_1</span><span class="token punctuation">(</span>cake_tuples<span class="token punctuation">)</span><span class="token punctuation">:</span>

    max_value_at_capacity_1 <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cake_weight <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            max_value_at_capacity_1 <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_at_capacity_1<span class="token punctuation">,</span> cake_value<span class="token punctuation">)</span>

    <span class="token keyword">return</span> max_value_at_capacity_1</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__why-we-use-long"></span>

<p class="ng-scope">
Ok, <strong>now what if the capacity is 2 kg</strong>? We’ll need to be a bit more clever.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
It’s <em>pretty</em> similar. Again we’ll track a max value, let’s say with a variable <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-two"><span class="ng-scope">max_value_at_capacity_2</span></span>. But now we care about cakes that weigh 1 <em>or</em> 2 kg. What do we do with each cake? And keep in mind, <strong>we can lean on the code we used to get the max value at weight capacity 1 kg.</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<ol class="ng-scope">
<li>
<strong>If the cake weighs 2 kg</strong>, it would fill up our whole capacity if we just took one. So we just need to see if the cake's value is higher than our current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-two"><span class="ng-scope">max_value_at_capacity_2</span></span>.
</li>
<li>
<strong>If the cake weighs 1 kg</strong>, we could take one, and we'd still have 1 kg of capacity left.  How do we know the best way to fill that extra capacity? We can use the max value at capacity 1! We’ll see if adding the cake's value to the max value at capacity 1 is better than our current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-two"><span class="ng-scope">max_value_at_capacity_2</span></span>.
</li>
</ol>
<p class="ng-scope">
Does this apply more generally? If we can use the max value at capacity 1 to get the max value at capacity 2, can we use the max values at capacity 1 and 2 to get the max value at capacity 3?
</p>

<p class="ng-scope">
Looks like this problem might have <span concept="overlapping-subproblems" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">overlapping subproblems</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A problem has <strong>overlapping subproblems</strong> if finding its solution involves solving the <em>same</em> subproblem multiple times.
</p>

<p>
As an example, let's look at the fibonacci squence (the series where each number is the sum of the two previous ones—0,1,1,2,3,5,8...).
</p>

<p>
If we wanted to compute the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>th fibonacci number, we could use this simple recursive algorithm:
</p>

<div code-block="concept__overlapping-subproblems__fibonacci-recursive" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
We'd call <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__overlapping-subproblems__fib-n-minus-one"><span class="ng-scope">fib(n-1)</span></span> and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__overlapping-subproblems__fib-n-minus-two"><span class="ng-scope">fib(n-2)</span></span> <strong>subproblems</strong> of <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__overlapping-subproblems__fib-n"><span class="ng-scope">fib(n)</span></span>.
</p>

<p>
Now let's look at what happens when we call <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__overlapping-subproblems__fib-five"><span class="ng-scope">fib(5)</span></span>:
</p>

<div class="diagram">
    <img src="./16.The Cake Thief _ Interview Cake_files/fibonacci__binary_tree_recursive.svg" height="255" width="510" alt="A binary tree showing the recursive calls of calling fib of 5. Every fib of n call calls fib of n minus 1 and fib of n minus 2. So calling fib of 5 calls fib of 4 and fib of 3, which keep calling fib of lower numbers until reaching the base cases fib of 1 or fib of 0.">


    
</div>


<p>
Our function ends up recursively calling <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__overlapping-subproblems__fib-two"><span class="ng-scope">fib(2)</span></span> <strong><em>three times</em></strong>. So the problem of finding the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>th fibonacci number has overlapping subproblems.
</p>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"concept__overlapping-subproblems__fib-n-minus-two": {"default": "fib(n-2)"}, "concept__overlapping-subproblems__fib-n-minus-one": {"default": "fib(n-1)"}, "concept__overlapping-subproblems__fib-five": {"default": "fib(5)"}, "concept__overlapping-subproblems__fib-n": {"default": "fib(n)"}, "concept__overlapping-subproblems__fib-two": {"default": "fib(2)"}}, "code-blocks": {"concept__overlapping-subproblems__fibonacci-recursive": {"javascript": {"code": "function fib(n) {\n    if (n === 0 || n === 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}", "tests": "testInputAndOutputLists(fib, tests);"}, "python": {"code": "def fib(n):\n    if n in [0, 1]:\n        return n\n    return fib(n-1) + fib(n-2)", "tests": "testInputAndOutputLists(fib, tests)"}, "ruby": {"code": "def fib(n)\n    if n == 0 || n == 1\n        return n\n    end\n    return fib(n-1) + fib(n-2)\nend", "tests": "testInputAndOutputLists(method(:fib), tests)"}, "c": {"code": "int fib(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        int retval = fib(tests[i][0]);\n        ASSERT(retval == tests[i][1]);\n    }\n}"}, "java": {"code": "public int fib(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.fib(test[0]), test[1]);\n}"}, "cpp": {"code": "int fib(int n)\n{\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(fib(test[0]), test[1]);\n}"}}, "setup": {"javascript": "var tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n];", "python": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]", "ruby": "tests = [\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n    [8, 21],\n    [9, 34],\n]", "c": "const int tests[10][2] = {\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34}\n};", "java": "int[][] tests = new int[][]{\n    {0, 0},\n    {1, 1},\n    {2, 1},\n    {3, 2},\n    {4, 3},\n    {5, 5},\n    {6, 8},\n    {7, 13},\n    {8, 21},\n    {9, 34},\n};", "cpp": "const vector<vector<int>> tests {\n    vector<int> {0, 0},\n    vector<int> {1, 1},\n    vector<int> {2, 1},\n    vector<int> {3, 2},\n    vector<int> {4, 3},\n    vector<int> {5, 5},\n    vector<int> {6, 8},\n    vector<int> {7, 13},\n    vector<int> {8, 21},\n    vector<int> {9, 34},\n};"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="13" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's see if we can build up to the <em>given</em> weight capacity, <em>one capacity at a time</em>, using the max values from <em>previous</em> capacities. How can we do this?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="14" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, <strong>let’s try one more weight capacity by hand—3 kg.</strong> So we already know the max values at capacities 1 and 2. And just like we did with <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-one"><span class="ng-scope">max_value_at_capacity_1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-two"><span class="ng-scope">max_value_at_capacity_2</span></span>, now we’ll track <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-three"><span class="ng-scope">max_value_at_capacity_3</span></span> and loop through every cake:
</p>
<div code-block="question__cake-thief__max-value-at-capacity-three-start" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">max_value_at_capacity_3 <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># only care about cakes that weigh 3 kg or less</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
<strong>What do we do for each cake?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="15" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If the current cake weighs 3 kg, easy—we see if it’s more valuable than our current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-three"><span class="ng-scope">max_value_at_capacity_3</span></span>.
</p>
<p class="ng-scope">
<strong>What if the current cake weighs 2 kg?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="16" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, let's see what our max value would be <em>if we used the cake.</em> How can we calculate that?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="17" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we include the current cake, we can only carry 1 more kilogram. What would be the max value we can carry?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="18" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We already know the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-one"><span class="ng-scope">max_value_at_capacity_1</span></span>! We can just add that to the current cake’s value!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="19" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Now we can see which is higher—our <em>current</em> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-at-capacity-three"><span class="ng-scope">max_value_at_capacity_3</span></span>, or the <em>new</em> max value if we use the cake:
</p>
<div code-block="question__cake-thief__compare-current-and-new-max-value-at-capacity-three-if-cake-weighs-two" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">max_value_using_cake    <span class="token operator">=</span> max_value_at_capacity_1 <span class="token operator">+</span> cake_value
max_value_at_capacity_3 <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_at_capacity_3<span class="token punctuation">,</span> max_value_using_cake<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Finally, <strong>what if the current cake weighs 1 kg?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="20" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Basically the same as if it weighs 2 kg:
</p>
<div code-block="question__cake-thief__compare-current-and-new-max-value-at-capacity-three-if-cake-weighs-one" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">max_value_using_cake    <span class="token operator">=</span> max_value_at_capacity_2 <span class="token operator">+</span> cake_value
max_value_at_capacity_3 <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_at_capacity_3<span class="token punctuation">,</span> max_value_using_cake<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
There’s gotta be a pattern here. We can keep building up to higher and higher capacities until we reach our input capacity. Because the max value we can carry at each capacity is calculated using the max values at <em>previous</em> capacities, we'll need to solve the max value for <em>every</em> capacity from 0 up to our duffel bag's actual weight capacity.
</p>
<p class="ng-scope">
Can we write a function to handle <strong>all the capacities?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="21" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
To start, <strong>we'll need a way to store and update <em>all</em> the max monetary values for each capacity</strong>.
</p>
<p class="ng-scope">
We could use <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-hash-table-concept"><span class="ng-scope">a </span><span concept="hash-map" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">dictionary</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>hash table</strong> (also called a <strong>hash</strong>, <strong>hash map</strong>, <strong>map</strong>, <strong>unordered map</strong> or <strong>dictionary</strong>) is a data structure that pairs keys to values.
</p>

<div code-block="concept__hash-map__hash-map" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">lightbulb_to_hours_of_light <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'incandescent'</span><span class="token punctuation">:</span> <span class="token number">1200</span><span class="token punctuation">,</span>
    <span class="token string">'compact fluorescent'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    <span class="token string">'LED'</span><span class="token punctuation">:</span> <span class="token number">50000</span>
<span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__javascript-object"></span>

<p>
Hash tables:
</p>
<ul>
<li>take <em>on average</em> <strong><span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for insertions and lookups</strong>
</li>
<li>are <strong>unordered</strong> (the keys are not guaranteed to stay in the same order)</li>
<li>can use <strong>many types of objects as keys</strong> (<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__commonly-strings"><span class="ng-scope">commonly strings</span></span>)</li>
</ul>

<p>
Hash tables can be thought of as arrays, if you think of array indices as keys!
</p>

<p>
In fact, hash tables are <em>built on</em> arrays. So if you ever want to use a hash table but know your keys will be sequential integers (like <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>1</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">1..100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span>), you can probably save time and space by just using an array instead.
</p>

<p>
<strong>Note:</strong> hash tables have an <strong>average case</strong> insertion and lookup cost of <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>. In industry, we often confuse the average-case cost with <em>worst case</em> cost, but they're not really the same. Because of hash collisions and rebalancing, a hash table insertion or lookup can cost as much as <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case. But usually in industry we assume hashing and resizing algorithms are clever enough that collisions are rare and cheap.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__hash-map__javascript-object": {"default": "var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};"}, "concept__hash-map__hash-map": {"c": "// Assume we've implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key, int value);\n\nHashTable *lightbulbToHoursOfLight = hashTableNew();\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"incandescent\", 1200);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"compact fluorescent\", 10000);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"LED\", 50000);", "javascript": "var lightbulbToHoursOfLight = new Map();\n\nlightBulbToHoursOfLight.set('incandescent', 1200);\nlightbulbToHoursOfLight.set('compact fluorescent', 10000);\nlightbulbToHoursOfLight.set('LED', 50000);", "python": "lightbulb_to_hours_of_light = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000\n}", "ruby": "lightbulb_to_hours_of_light = {\n    'incandescent' => 1200,\n    'compact fluorescent' => 10000,\n    'LED' => 50000\n}", "cpp": "unordered_map&lt;string, int> lightbulbToHoursOfLight;\n\nlightbulbToHoursOfLight.insert(make_pair(\"incandescent\", 1200));\nlightbulbToHoursOfLight.insert(make_pair(\"compact fluorescent\", 10000));\nlightbulbToHoursOfLight.insert(make_pair(\"LED\", 50000));", "java": "Map&lt;String, Integer> lightbulbToHoursOfLight = new HashMap&lt;String, Integer>();\n\nlightbulbToHoursOfLight.put(\"incandescent\", 1200);\nlightbulbToHoursOfLight.put(\"compact fluorescent\", 10000);\nlightbulbToHoursOfLight.put(\"LED\", 50000);"}}, "words": {"concept__hash-map__commonly-strings": {"c": "commonly strings", "javascript": "JavaScript <em>object</em> keys are always <strong>strings</strong>", "python": "commonly strings", "default": "commonly strings", "ruby": "commonly strings", "cpp": "commonly strings", "java": "commonly strings"}, "concept__hash-map__javascript-object": {"c": "", "javascript": "<p>\n    In JavaScript, <strong>objects</strong> are also commonly used for storing key-value pairs:\n</p>\n\n<div code-block=\"javascript-object\" language=\"javascript\" translation-highlighting=\"static\">var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};</div>\n\n<p class=\"aside\">\n    <strong>How do you know when to use a map or object in JavaScript?</strong> Objects are used almost always, but maps might be helpful if your keys aren't strings or you need to iterate over your data. Maps aren't fully supported by all modern browsers yet.\n</p>", "python": "", "default": "", "ruby": "", "cpp": "", "java": ""}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span></span>, where the keys represent capacities and the values represent the max possible monetary values at those capacities. Or we could use <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-standard-list"><span class="ng-scope">a list</span></span>, where the <em>indices</em> represent capacities and the values represent max monetary values. <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__hash-tables-more-overhead"><span class="ic-words ng-isolate-scope" ng-transclude="" words="hash-tables-capitalized"><span class="ng-scope">Dictionaries</span></span><span class="ng-scope"> are </span><em class="ng-scope">built on</em> <span concept="array" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">arrays</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
An <strong>array</strong> is a low-level data structure that holds an <strong>ordered collection of elements</strong>. Each position in the array has an <strong>index</strong>, starting with 0.
</p>

<p>
Confusingly, <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__in-some-languages"><span class="ng-scope">in some languages</span></span>, there is a <em>high-level</em> data structure called an "array" which has a few additional features.
</p>

<p>
In a low level array, you must specify the size of your array when you <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__instantiate-it"><span class="ng-scope">instantiate it</span></span>:
</p>

<div code-block="concept__array__static-array" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token operator">//</span> Low level arrays <span class="token keyword">in</span> Java

<span class="token operator">//</span> instantiate an array to hold <span class="token number">10</span> integers
int gasPrices<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

gasPrices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">346</span><span class="token punctuation">;</span>
gasPrices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">360</span><span class="token punctuation">;</span>
gasPrices<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">354</span><span class="token punctuation">;</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Arrays are efficient for looking up the element at an index, because if you know the address where an array starts in memory, it’s simple math to find the address of any index. This gives arrays an <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> lookup time.
</p>

<p>
Low level arrays are the foundation of many other data structures, like dynamic arrays, stacks, and <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__hash-tables"><span class="ng-scope">dictionaries</span></span>.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__dynamic-array-description"><p class="ng-scope">
A <strong><a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">dynamic array</a></strong> <span class="ic-words ng-isolate-scope" ng-transclude="" words="just-called-array"><span class="ng-scope">(called a "list" in Python)</span></span> doesn’t require you to specify the length
and allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span class="ic-words ng-isolate-scope" ng-transclude="" words="any-index"><span class="ng-scope">any index</span></span>.
</p></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__dynamic-array-example"><p class="ng-scope">
In <span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span>, you can simply say:
</p>
<div code-block="concept__array__dynamic-array" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">gas_prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

gas_prices<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">346</span><span class="token punctuation">)</span>
gas_prices<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span>
gas_prices<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">354</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__array__dynamic-array-detail"><p class="ng-scope">
Here, the details about the array's length are abstracted out for you. You can add as many prices as you’d like.
</p></span>

<p>
Fun fact: <strong>strings</strong> are almost always implemented as arrays of characters.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__array__dynamic-array": {"javascript": "var gasPrices = [];\n\ngasPrices[0] = 346;\ngasPrices[1] = 360;\ngasPrices[2] = 354;", "python": "gas_prices = []\n\ngas_prices.append(346)\ngas_prices.append(360)\ngas_prices.append(354)", "ruby": "gas_prices = []\n\ngas_prices[0] = 346\ngas_prices[1] = 360\ngas_prices[2] = 354", "c": {"code": "vector&lt;int> gasPrices;\n\ngasPrice.push_back(346);\ngasPrice.push_back(360);\ngasPrice.push_back(354);", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "java": "List&lt;Integer> gasPrices = new ArrayList&lt;Integer>();\n\ngasPrices.add(346);\ngasPrices.add(360);\ngasPrices.add(354);", "cpp": "vector&lt;int> gasPrices;\n\ngasPrice.push_back(346);\ngasPrice.push_back(360);\ngasPrice.push_back(354);"}, "concept__array__static-array": {"default": "// Low level arrays in Java\n\n// instantiate an array to hold 10 integers\nint gasPrices[] = new int[10];\n\ngasPrices[0] = 346;\ngasPrices[1] = 360;\ngasPrices[2] = 354;", "cpp": "// an array to hold 10 integers\nint gasPrices[10];\ngasPrices[0] = 346;\ngasPrices[1] = 360;\ngasPrices[2] = 354;", "c": "// an array to hold 10 integers\nint gasPrices[10];\ngasPrices[0] = 346;\ngasPrices[1] = 360;\ngasPrices[2] = 354;"}}, "words": {"concept__array__c18n-language": {"javascript": "JavaScript", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "java": "Java", "cpp": "C++ (beta)"}, "concept__array__hash-tables": {"swift": "dictionaries", "javascript": "objects", "objectivec": "dictionaries", "ruby": "hashes", "python": "dictionaries", "cpp": "unordered maps", "c": "hash tables", "php": "arrays", "java": "hash maps", "csharp": "dictionaries"}, "concept__array__dynamic-array-example": {"javascript": "<p>\nIn <span words=\"c18n-language\">JavaScript</span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\" language=\"javascript\" translation-highlighting=\"static\">var gasPrices = [];\n\ngasPrices[0] = 346;\ngasPrices[1] = 360;\ngasPrices[2] = 354;</div>", "python": "<p>\nIn <span words=\"c18n-language\">Python</span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\" language=\"python\" translation-highlighting=\"static\">gas_prices = []\n\ngas_prices.append(346)\ngas_prices.append(360)\ngas_prices.append(354)</div>", "ruby": "<p>\nIn <span words=\"c18n-language\">Ruby</span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\" language=\"ruby\" translation-highlighting=\"static\">gas_prices = []\n\ngas_prices[0] = 346\ngas_prices[1] = 360\ngas_prices[2] = 354</div>", "default": "<p>\nIn <span words=\"c18n-language\"></span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\">\n</div>", "c": "", "java": "<p>\nIn <span words=\"c18n-language\">Java</span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\" language=\"java\" translation-highlighting=\"static\">List&lt;Integer&gt; gasPrices = new ArrayList&lt;Integer&gt;();\n\ngasPrices.add(346);\ngasPrices.add(360);\ngasPrices.add(354);</div>", "cpp": "<p>\nIn <span words=\"c18n-language\">C++ (beta)</span>, you can simply say:\n</p>\n<div code-block=\"dynamic-array\" language=\"cpp\" translation-highlighting=\"static\">vector&lt;int&gt; gasPrices;\n\ngasPrice.push_back(346);\ngasPrice.push_back(360);\ngasPrice.push_back(354);</div>"}, "concept__array__just-called-array": {"javascript": "", "python": "(called a \"list\" in Python)", "ruby": "(simply called an \"array\" in Ruby)", "default": "", "c": "", "java": "", "cpp": "(called a \"vector\" in C++)"}, "concept__array__instantiate-it": {"javascript": "instantiate it", "python": "instantiate it", "ruby": "instantiate it", "default": "instantiate it", "c": "declare it", "java": "instantiate it", "cpp": "declare it"}, "concept__array__dynamic-array-detail": {"javascript": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>", "python": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>", "ruby": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>", "default": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>", "c": "", "java": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>", "cpp": "<p>\nHere, the details about the array's length are abstracted out for you. You can add as many prices as you&#8217;d like.\n</p>"}, "concept__array__in-some-languages": {"javascript": "in JavaScript (and some other languages)", "ruby": "in Ruby (and some other languages)", "python": "in some languages", "default": "in some languages", "c": "in some languages", "java": "in some languages", "cpp": "in some languages"}, "concept__array__any-index": {"javascript": "any index", "python": "any index", "ruby": "any index", "default": "any index", "c": "any index", "java": "any index", "cpp": "any position"}, "concept__array__dynamic-array-description": {"javascript": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\"></span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any index</span>.\n</p>", "python": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\">(called a \"list\" in Python)</span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any index</span>.\n</p>", "ruby": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\">(simply called an \"array\" in Ruby)</span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any index</span>.\n</p>", "default": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\"></span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\"></span>.\n</p>", "c": "<p>\nMany other languages (Python, Java, C++) have <strong>dynamic arrays</strong> that don&#8217;t require you to specify the \nlength and allow you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any index</span>. C doesn't have these \nthough -- if you want one, you'll have to implement it yourself.\n</p>", "java": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\"></span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any index</span>.\n</p>", "cpp": "<p>\nA <strong><a href=\"/concept/dynamic-array-amortized-analysis\">dynamic array</a></strong> <span words=\"just-called-array\">(called a \"vector\" in C++)</span> doesn&#8217;t require you to specify the length\nand allows you to seamlessly (although sometimes with time and space costs) insert and delete elements at <span words=\"any-index\">any position</span>.\n</p>"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span><span class="ng-scope">, so we can save some overhead by just using </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span><span class="ng-scope">.</span></span>
</p>
<div code-block="question__cake-thief__max-duffel-bag-value-start" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">max_duffel_bag_value</span><span class="token punctuation">(</span>cake_tuples<span class="token punctuation">,</span> weight_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># list to hold the maximum possible value at every</span>
    <span class="token comment" spellcheck="true"># integer capacity from 0 to weight_capacity</span>
    <span class="token comment" spellcheck="true"># starting each index with value 0</span>
    max_values_at_capacities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
What do we do next?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="22" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We’ll need to work with every capacity up to the input weight capacity. That’s an easy loop:
</p>
<div code-block="question__cake-thief__max-duffel-bag-value-loop-through-capacities" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># every integer from 0 to the input weight_capacity</span>
<span class="token keyword">for</span> current_capacity <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
What will we do inside this loop? This is where it gets a little tricky.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="23" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We care about any cakes that weigh <em>the current capacity or less</em>. Let's try putting <em>each cake</em> in the bag and seeing how valuable of a haul we could fit from there.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="24" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
So we'll write a loop through all the cakes (ignoring cakes that are too heavy to fit):
</p>

<div code-block="question__cake-thief__max-duffel-bag-value-loop-through-cake-pairs" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># if the cake weighs as much or less than the current capacity</span>
    <span class="token comment" spellcheck="true"># see what our max value could be if we took it!</span>
    <span class="token keyword">if</span> cake_weight <span class="token operator">&lt;=</span> current_capacity<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># find max_value_using_cake</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
And put it in our function body so far:
</p>

<div code-block="question__cake-thief__max-duffel-bag-value-with-capacity-and-cake-loops" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">max_duffel_bag_value</span><span class="token punctuation">(</span>cake_tuples<span class="token punctuation">,</span> weight_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we make a list to hold the maximum possible value at every</span>
    <span class="token comment" spellcheck="true"># duffel bag weight capacity from 0 to weight_capacity</span>
    <span class="token comment" spellcheck="true"># starting each index with value 0</span>
    max_values_at_capacities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> current_capacity <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># if the cake weighs as much or less than the current capacity</span>
            <span class="token comment" spellcheck="true"># see what our max value could be if we took it!</span>
            <span class="token keyword">if</span> cake_weight <span class="token operator">&lt;=</span> current_capacity<span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># find max_value_using_cake</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
How do we compute <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-using-cake"><span class="ng-scope">max_value_using_cake</span></span>?
</p>

</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="25" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Remember when we were calculating the max value at capacity 3kg and we "hard-coded" the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-using-cake"><span class="ng-scope">max_value_using_cake</span></span> for cakes that weigh 3 kg, 2kg, and 1kg?
</p>

<div code-block="question__cake-thief__hard-coding-max-values-at-three-two-and-one" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># cake weighs 3 kg</span>
max_value_using_cake <span class="token operator">=</span> cake_value

<span class="token comment" spellcheck="true"># cake weighs 2 kg</span>
max_value_using_cake <span class="token operator">=</span> max_value_at_capacity_1 <span class="token operator">+</span> cake_value

<span class="token comment" spellcheck="true"># cake weighs 1 kg</span>
max_value_using_cake <span class="token operator">=</span> max_value_at_capacity_2 <span class="token operator">+</span> cake_value</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
How can we generalize this? With our new function body, look at the variables we have in scope:
</p>

<ol class="ng-scope">
<li>
<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-values-at-capacities"><span class="ng-scope">max_values_at_capacities</span></span>
</li>
<li>
<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-capacity"><span class="ng-scope">current_capacity</span></span>
</li>
<li>
<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__var-for-getting-cake-weight"><span class="ng-scope">cake_weight</span></span>
</li>
</ol>

<p class="ng-scope">
Can we use these to get <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-using-cake"><span class="ng-scope">max_value_using_cake</span></span> for <em>any cake</em>?
</p>

</div>
</div>



<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="26" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
Well, let's figure out how much space would be left in the duffel bag after putting the cake in:
</p>

<div code-block="question__cake-thief__remaining-capacity-after-taking-cake" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">remaining_capacity_after_taking_cake <span class="token operator">=</span> current_capacity <span class="token operator">-</span> cake_weight</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
So <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-value-using-cake"><span class="ng-scope">max_value_using_cake</span></span> is:
</p>

<ol class="ng-scope">
<li>
the current cake's value, <em>plus</em>
</li>
<li>
the best value we can fill the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__remaining-capacity-after-taking-cake"><span class="ng-scope">remaining_capacity_after_taking_cake</span></span> with
</li>
</ol>

<div code-block="question__cake-thief__max-value-using-cake" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">remaining_capacity_after_taking_cake <span class="token operator">=</span> current_capacity <span class="token operator">-</span> cake_weight
max_value_using_cake <span class="token operator">=</span> cake_value <span class="token operator">+</span> max_values_at_capacities<span class="token punctuation">[</span>remaining_capacity_after_taking_cake<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
We can squish this into one line:
</p>

<div code-block="question__cake-thief__max-value-using-cake-refactored" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">max_value_using_cake <span class="token operator">=</span> cake_value <span class="token operator">+</span> max_values_at_capacities<span class="token punctuation">[</span>current_capacity <span class="token operator">-</span> cake_weight<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Since <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__remaining-capacity-after-taking-cake"><span class="ng-scope">remaining_capacity_after_taking_cake</span></span> is a <em>lower</em> capacity, we'll have <em>always</em> already computed its max value and stored it in our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-values-at-capacities"><span class="ng-scope">max_values_at_capacities</span></span>!
</p>

<p class="ng-scope">
Now that we know the max value <em>if we include the cake</em>, <strong>should we include it?</strong> How do we know?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="27" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's allocate a variable <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span> that holds the highest value we can carry at the current capacity. We can start it at zero, and as we go through all the cakes, any time the value <em>using</em> a cake is higher than <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span>, we'll update <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span>!
</p>
<div code-block="question__cake-thief__update-current-max-value" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">current_max_value <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_using_cake<span class="token punctuation">,</span> current_max_value<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
What do we <em>do</em> with each value for <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span>? What do we need to do for each <em>capacity</em> when we finish looping through all the cakes?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="28" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We save each <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span> in the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-values-at-capacities"><span class="ng-scope">max_values_at_capacities</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__standard-list"><span class="ng-scope">list</span></span>. We'll also need to make sure we set <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__current-max-value"><span class="ng-scope">current_max_value</span></span> to zero in the right place in our loops—we want it to reset every time we start a new capacity.
</p>
<p class="ng-scope">
So here's our function so far:
</p>

<div code-block="question__cake-thief__max-duffel-bag-value-without-final-answer" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">max_duffel_bag_value</span><span class="token punctuation">(</span>cake_tuples<span class="token punctuation">,</span> weight_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we make a list to hold the maximum possible value at every</span>
    <span class="token comment" spellcheck="true"># duffel bag weight capacity from 0 to weight_capacity</span>
    <span class="token comment" spellcheck="true"># starting each index with value 0</span>
    max_values_at_capacities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> current_capacity <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># set a variable to hold the max monetary value so far for the current weight capacity</span>
        current_max_value <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># if the current cake weighs as much or less than the current weight capacity</span>
            <span class="token comment" spellcheck="true"># it's possible taking the cake would give get a better value</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cake_weight <span class="token operator">&lt;=</span> current_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

                <span class="token comment" spellcheck="true"># should we use the cake or not?</span>
                <span class="token comment" spellcheck="true"># if we use the cake, the most kilograms we can include in addition to the cake</span>
                <span class="token comment" spellcheck="true"># we're adding is the current capacity minus the cake's weight. we find the max</span>
                <span class="token comment" spellcheck="true"># value at that integer capacity in our list max_values_at_capacities</span>
                max_value_using_cake <span class="token operator">=</span> cake_value <span class="token operator">+</span> max_values_at_capacities<span class="token punctuation">[</span>current_capacity <span class="token operator">-</span> cake_weight<span class="token punctuation">]</span>

                <span class="token comment" spellcheck="true"># now we see if it's worth taking the cake. how does the</span>
                <span class="token comment" spellcheck="true"># value with the cake compare to the current_max_value?</span>
                current_max_value <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_using_cake<span class="token punctuation">,</span> current_max_value<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># add each capacity's max value to our list so we can use them</span>
        <span class="token comment" spellcheck="true"># when calculating all the remaining capacities</span>
        max_values_at_capacities<span class="token punctuation">[</span>current_capacity<span class="token punctuation">]</span> <span class="token operator">=</span> current_max_value</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Looking good! But <strong>what's our final answer?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="29" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Our final answer is <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__cake-thief__max-values-at-capacities-weight-capacity"><span class="ng-scope">max_values_at_capacities[weight_capacity]</span></span>!
</p>
<p class="ng-scope">
Okay, this seems complete. <strong>What about edge cases?</strong>
</p>
</div>
</div>






<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="30" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Remember, weights and values can be any non-negative integer. What about zeroes? How can we handle duffel bags that can’t hold anything and cakes that weigh nothing?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="31" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, if our duffel bag can’t hold anything, we can just return 0. And if a cake weighs 0 kg, we return <em>infinity</em>. Right?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="32" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Not that simple!
</p>
<p class="ng-scope">
What if our duffel bag holds 0 kg, and we have a cake that weighs 0 kg. What do we return?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="33" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
And what if we have a cake that weighs 0 kg, but its value is <em>also</em> 0. If we have other cakes with positive weights and values, what do we return?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="34" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If a cake’s weight and value are both 0, it’s reasonable to not have that cake affect what we return at all.
</p>
<p class="ng-scope">
If we have a cake that weighs 0 kg and has a positive value, it’s reasonable to return infinity, even if the capacity is 0.
</p>

<p class="ng-scope">
For returning infinity, we have <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__several"><span class="ng-scope">several</span></span> choices. We could return:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__infinity-choices"><ol class="ng-scope">
<li><strong><span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span>'s <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__cake-thief__infinity"><span class="ng-scope">float('inf')</span></span>.</strong></li>
<li>Return a <strong>custom response</strong>, like the string <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__cake-thief__infinity-string"><span class="ng-scope">'infinity'</span></span>.</li>
<li>
<strong>Raise an exception</strong> indicating the answer is infinity.</li>
</ol></span>

<p class="ng-scope">
What are the advantages and disadvantages of each option?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="35" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__first-infinity-option-advantages-and-disadvantages"><span class="ng-scope">For the </span><strong class="ng-scope">first option</strong><span class="ng-scope"> the advantage is we get the </span><em class="ng-scope">behavior</em><span class="ng-scope"> of infinity. Compared to any other integer, </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__cake-thief__infinity"><span class="ng-scope">float('inf')</span></span><span class="ng-scope"> will be greater. And it's a </span><em class="ng-scope">number</em><span class="ng-scope">, which can be an advantage or disadvantage—we might want our result to always be the same </span><em class="ng-scope">type</em><span class="ng-scope">, but without manually checking we won't know if we mean an actual value or the special case of infinity.</span></span>
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__second-infinity-option-advantages-and-disadvantages"><p class="ng-scope">
    For the <strong>second option</strong> the advantage is we can create a custom behavior that we—or our function's users—could know to expect. The disadvantage is we'd <em>have</em> to explicitly check for that behavior, otherwise we might end up trying to parse the string "infinity" as an integer, which could give us an error or (perhaps worse) a random number. In a production system, a function that sometimes returns an integer and sometimes returns a string would probably be seen as sloppy.
</p></span>

<p class="ng-scope">
The <strong><span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__last-option"><span class="ng-scope">third option</span></span></strong> is a good choice if we decide infinity is usually an "unacceptable" answer. For example, we might decide an infinite answer means we've probably entered our inputs wrong. Then, if we <em>really</em> wanted to "accept" an infinite answer, we could always "catch" this exception when we call our function.
</p>

<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__any-capitalized"><span class="ng-scope">Any</span></span> option <em>could</em> be reasonable. We'll go with the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__option-were-going-with"><span class="ng-scope">first</span></span> one here.
</p>
</div>
</div>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
This is a classic computer science puzzle called <strong>"the unbounded knapsack problem."</strong>
</p>

<p class="ng-scope">
We use a <span concept="bottom-up" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">bottom-up</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Going <strong>bottom-up</strong> is a way to avoid recursion, saving the <strong>memory cost</strong> that recursion incurs when it builds up the <strong>call stack</strong>.
</p>

<p>
Put simply, a bottom-up algorithm "starts from the beginning," while a recursive algorithm often "starts from the end and works backwards."
</p>

<p>
For example, if we wanted to multiply all the numbers in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1...n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, we could use this cute, <strong>top-down</strong>, recursive one-liner:
</p>

<div code-block="concept__bottom-up__top-down" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> product_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach has a problem: it builds up a <strong>call stack</strong> of size <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which makes our total memory cost <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. This makes it vulnerable to a <strong>stack overflow error</strong>, where the call stack gets too big and runs out of space.
</p>
<!--TODO: what if you don't know what the call stack is?-->


<p>
To avoid this, we can instead go <strong>bottom-up</strong>:
</p>

<div code-block="concept__bottom-up__bottom-up" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">product_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># we assume n &gt;= 1</span>

    result <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> num

    <span class="token keyword">return</span> result</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This approach uses <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time).
</p>

<p class="aside">
<em>Some</em> compilers and interpreters will do what's called <strong>tail call optimization</strong> (TCO), where it can optimize <em>some</em> recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don't. Some C implementations do, and the JavaScript spec recently <em>allowed</em> TCO. Scheme is one of the few languages that <em>guarantee</em> TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.
</p>

<p>
Going bottom-up is a common strategy for <strong>dynamic programming</strong> problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is <strong><a href="https://www.interviewcake.com/concept/memoization">memoization</a></strong>.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__bottom-up__top-down": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n    return n * product_1_to_n(n-1) if n > 1 else 1", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n    return (n > 1) ? (n * product1ToN(n-1)) : 1;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n    return n > 1 ? n * product_1_to_n(n-1) : 1\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}, "setup": {"python": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]", "javascript": "var tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n];", "cpp": "const vector<vector<int>> tests {\n    vector<int> {2, 2},\n    vector<int> {3, 6},\n    vector<int> {10, 3628800},\n};", "c": "const int tests[3][2] = {\n    {2, 2},\n    {3, 6},\n    {10, 3628800}\n};", "java": "int[][] tests = new int[][]{\n    {2, 2},\n    {3, 6},\n    {10, 3628800},\n};", "ruby": "tests = [\n    [2, 2],\n    [3, 6],\n    [10, 3628800],\n]"}, "concept__bottom-up__bottom-up": {"python": {"code": "def product_1_to_n(n):\n    # we assume n >= 1\n\n    result = 1\n    for num in range(1, n+1):\n        result *= num\n\n    return result", "tests": "testInputAndOutputLists(product_1_to_n, tests)"}, "javascript": {"code": "function product1ToN(n) {\n    // we assume n >= 1\n\n    var result = 1;\n    for (var num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "testInputAndOutputLists(product1ToN, tests);"}, "cpp": {"code": "int product1ToN(int n) \n{\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; ++num) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (const auto& test : tests) {\n    assertEqual(product1ToN(test[0]), test[1]);\n}"}, "c": {"code": "int product1ToN(int n) {\n    // we assume n >= 1\n    int num;\n    int result = 1;\n\n    for (num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 3; i++) {\n        ASSERT(product1ToN(tests[i][0]) == tests[i][1]);\n    }\n}"}, "java": {"code": "public int product1ToN(int n) {\n    // we assume n >= 1\n\n    int result = 1;\n    for (int num = 1; num &lt;= n; num++) {\n        result *= num;\n    }\n\n    return result;\n}", "tests": "for (int[] test : tests) {\n    assertEqual(t.product1ToN(test[0]), test[1]);\n}"}, "ruby": {"code": "def product_1_to_n(n)\n    # we assume n >= 1\n\n    result = 1\n    (1..n).each do |num|\n        result *= num\n    end\n\n    return result\nend", "tests": "testInputAndOutputLists(method(:product_1_to_n), tests)"}}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> approach to find the max value at our duffel bag's <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__weight-capacity"><span class="ng-scope">weight_capacity</span></span> by finding the max value at <em>every</em> capacity from 0 to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__weight-capacity"><span class="ng-scope">weight_capacity</span></span>.
</p>
<p class="ng-scope">
We allocate <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-standard-list"><span class="ng-scope">a list</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-values-at-capacities"><span class="ng-scope">max_values_at_capacities</span></span> where the indices are capacities and each value is the max value <em>at that capacity</em>.
</p>

<p class="ng-scope">
For each capacity, we want to know the max monetary value we can carry. To figure that out, we go through each cake, checking to see if we should take that cake.
</p>

<p class="ng-scope">
The best monetary value we can get if we take a given cake is simply:
</p>

<ol class="ng-scope">
<li>
that cake's value, plus
</li>
<li>
the best monetary value we can carry in our remaining duffel bag capacity after taking the cake—which we'll already have stored in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__cake-thief__max-values-at-capacities"><span class="ng-scope">max_values_at_capacities</span></span>
</li>
</ol>

<p class="ng-scope">
To handle weights and values of zero, we <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__handle-infinity"><span class="ng-scope">return infinity</span></span> <em>only</em> if a cake weighs nothing and has a positive value.
</p>

<div code-block="question__cake-thief__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">max_duffel_bag_value</span><span class="token punctuation">(</span>cake_tuples<span class="token punctuation">,</span> weight_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># we make a list to hold the maximum possible value at every</span>
    <span class="token comment" spellcheck="true"># duffel bag weight capacity from 0 to weight_capacity</span>
    <span class="token comment" spellcheck="true"># starting each index with value 0</span>
    max_values_at_capacities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> current_capacity <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>weight_capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># set a variable to hold the max monetary value so far for current_capacity</span>
        current_max_value <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">for</span> cake_weight<span class="token punctuation">,</span> cake_value <span class="token keyword">in</span> cake_tuples<span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cake_weight <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> cake_value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if the current cake weighs as much or less than the current weight capacity</span>
            <span class="token comment" spellcheck="true"># it's possible taking the cake would give get a better value</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cake_weight <span class="token operator">&lt;=</span> current_capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>

                <span class="token comment" spellcheck="true"># so we check: should we use the cake or not?</span>
                <span class="token comment" spellcheck="true"># if we use the cake, the most kilograms we can include in addition to the cake</span>
                <span class="token comment" spellcheck="true"># we're adding is the current capacity minus the cake's weight. we find the max</span>
                <span class="token comment" spellcheck="true"># value at that integer capacity in our list max_values_at_capacities</span>
                max_value_using_cake <span class="token operator">=</span> cake_value <span class="token operator">+</span> max_values_at_capacities<span class="token punctuation">[</span>current_capacity <span class="token operator">-</span> cake_weight<span class="token punctuation">]</span>

                <span class="token comment" spellcheck="true"># now we see if it's worth taking the cake. how does the</span>
                <span class="token comment" spellcheck="true"># value with the cake compare to the current_max_value?</span>
                current_max_value <span class="token operator">=</span> max<span class="token punctuation">(</span>max_value_using_cake<span class="token punctuation">,</span> current_max_value<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># add each capacity's max value to our list so we can use them</span>
        <span class="token comment" spellcheck="true"># when calculating all the remaining capacities</span>
        max_values_at_capacities<span class="token punctuation">[</span>current_capacity<span class="token punctuation">]</span> <span class="token operator">=</span> current_max_value

    <span class="token keyword">return</span> max_values_at_capacities<span class="token punctuation">[</span>weight_capacity<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="n*k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> time, and <span complexity="k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is number of types of cake and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> is the capacity of the duffel bag. We loop through each cake (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> cakes) for every capacity (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> capacities), so our runtime is <span complexity="n*k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span>, and maintaining the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-standard-list"><span class="ng-scope">a list</span></span> of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.77777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span> capacities gives us the <span complexity="k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
<p class="ng-scope">
<strong>Congratulations!</strong> Because of dynamic programming, you have successfully stolen the Queen's cakes and made it big.
</p>
<p class="ng-scope">
<strong>Keep in mind:</strong> in some cases, it might <em>not</em> be worth using our optimal dynamic programming solution. It's a pretty slow algorithm—without any context (not knowing how many cake types we have, what our weight capacity is, or just how they compare) it's easy to see <span complexity="n*k" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></span></span> potentially being as bad as <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> if <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is close to <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>.
</p>

<p class="ng-scope">
If we cared about <em>time</em>, like if there was an alarm in the vault and we had to move quickly, it might be worth using a <em>faster algorithm that gives us a <strong>good</strong> answer, even if it's not always the <strong>optimal</strong> answer</em>. Some of our first ideas in the breakdown were to look at cake values or value/weight ratios. Those algorithms would probably be faster, taking <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time (we'd have to start by sorting the input).
</p>
<p class="ng-scope">
<strong>Sometimes an efficient, <em>good</em> answer might be more <em>practical</em> than an inefficient, <em>optimal</em> answer.</strong>
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<ol class="ng-scope">
<li>
We know the <em>max value we can carry</em>, but <strong>which cakes should we take, and how many?</strong> Try adjusting your answer to return this information as well.
</li>
<li>
What if we check to see if all the cake weights have a <strong>common denominator</strong>? Can we improve our algorithm?
</li>
<li>
A cake that's both <em>heavier</em> and <em>worth less</em> than another cake would <em>never</em> be in the optimal solution. This idea is called <strong>dominance relations</strong>. Can you apply this idea to save some time? Hint: dominance relations can apply to <em>sets of cakes</em>, not just individual cakes.
</li>
<li>
What if we had <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__cake-thief__a-cake-weight-value-pair"><span class="ng-scope">a tuple</span></span> for <em>every individual cake</em> instead of <em>types of cakes</em>? So now there's not an unlimited supply of a type of cake—there's exactly one of each. This is a <em>similar but harder</em> problem, known as the <strong>0/1 Knapsack</strong> problem.
</li>
</ol>
</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
This question is our spin on the famous "unbounded knapsack problem"—a classic dynamic programming question.
</p>

<p class="ng-scope">
If you're struggling with dynamic programming, we have reference pages for the two main dynamic programming strategies: <a href="https://www.interviewcake.com/concept/memoization">memoization</a> and <a href="https://www.interviewcake.com/concept/bottom-up">going bottom-up</a>.
</p>

</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"question__cake-thief__long-max-value": {"default": "Long.MAX_VALUE", "c": "LLONG_MAX", "csharp": "long.MaxValue"}, "question__cake-thief__infinity-string": {"default": "'infinity'"}, "question__cake-thief__long-class": {"default": "Long", "cpp": "long long", "c": "long long", "csharp": "long"}, "question__cake-thief__max-values-at-capacities-weight-capacity": {"snake": "max_values_at_capacities[weight_capacity]", "camel": "maxValuesAtCapacities[weightCapacity]"}, "question__cake-thief__long": {"default": "long", "cpp": "long long", "c": "long long"}, "question__cake-thief__infinity": {"javascript": "Infinity", "python": "float('inf')", "ruby": "Float::INFINITY", "c": "", "java": "", "cpp": "", "csharp": ""}}, "code-blocks": {"question__cake-thief__two-cake-pairs-focus-on-values": {"javascript": "{weight: 1,  value: 30}\n{weight: 50, value: 200}", "python": "[(1, 30), (50, 200)]", "ruby": "[ [1, 30], [50, 200] ]", "c": "CakeType cakeType1 = {1, 30};\nCakeType cakeType2 = {50, 200};", "java": "new CakeType(1, 30);\nnew CakeType(50, 200);", "cpp": "CakeType(1, 30);\nCakeType(50, 200);", "csharp": "var cakeType = new CakeType(1, 30);\nvar anotherCakeType = new CakeType(50, 200);"}, "question__cake-thief__max-duffel-bag-value-with-capacity-one": {"javascript": {"code": "function maxDuffelBagValueWithCapacity1(cakeTypes) {\n\n    var maxValueAtCapacity1 = 0;\n\n    cakeTypes.forEach(function(cakeType) {\n\n        if (cakeType.weight === 1) {\n            maxValueAtCapacity1 = Math.max(maxValueAtCapacity1, cakeType.value);\n        }\n    });\n\n    return maxValueAtCapacity1;\n}", "tests": "assertEqual(maxDuffelBagValueWithCapacity1([{weight: 1, value: 9}, {weight: 1, value: 4}]), 9);\nassertEqual(maxDuffelBagValueWithCapacity1([{weight: 2, value: 9}, {weight: 2, value: 4}]), 0);"}, "python": {"code": "def max_duffel_bag_value_with_capacity_1(cake_tuples):\n\n    max_value_at_capacity_1 = 0\n\n    for cake_weight, cake_value in cake_tuples:\n        if (cake_weight == 1):\n            max_value_at_capacity_1 = max(max_value_at_capacity_1, cake_value)\n\n    return max_value_at_capacity_1", "tests": "assertEqual(max_duffel_bag_value_with_capacity_1([(1, 9), (1, 4)]), 9)\nassertEqual(max_duffel_bag_value_with_capacity_1([(2, 9), (2, 4)]), 0)"}, "ruby": {"code": "def max_duffel_bag_value_with_capacity_1(cake_arrays)\n\n    max_value_at_capacity_1 = 0\n\n    cake_arrays.each do |cake_weight, cake_value|\n        if cake_weight == 1\n            max_value_at_capacity_1 = [max_value_at_capacity_1, cake_value].max\n        end\n    end\n\n    return max_value_at_capacity_1\nend", "tests": "assertEqual(max_duffel_bag_value_with_capacity_1([ [1, 9], [1, 4] ]), 9)\nassertEqual(max_duffel_bag_value_with_capacity_1([ [2, 9], [2, 4] ]), 0)"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n\nlong long maxDuffelBagValueWithCapacity1(const CakeType *cakeTypes, size_t cakeTypesLength) {\n    size_t i;\n    long long maxValueAtCapacity1 = 0;\n\n    for (i = 0; i &lt; cakeTypesLength; i++) {\n        const CakeType *cakeType = &cakeTypes[i];\n\n        if (cakeType->weight == 1) {\n            maxValueAtCapacity1 = MAX(maxValueAtCapacity1, cakeType->value);\n        }\n    }\n\n    return maxValueAtCapacity1;\n}", "tests": "{\n    long long retval;\n\n    const CakeType cakeTypes1[2] = { {1, 9}, {1, 4} };\n    retval = maxDuffelBagValueWithCapacity1(cakeTypes1, 2);\n    ASSERT(retval == 9LL);\n\n    const CakeType cakeTypes2[2] = { {2, 9}, {2, 4} };\n    retval = maxDuffelBagValueWithCapacity1(cakeTypes2, 2);\n    ASSERT(retval == 0LL);\n}"}, "java": {"setup": "class CakeType {\n\n    int weight;\n    int value;\n\n    public CakeType(int weight, int value) {\n        this.weight = weight;\n        this.value  = value;\n    }\n\n}", "code": "public long maxDuffelBagValueWithCapacity1(CakeType[] cakeTypes) {\n\n    long maxValueAtCapacity1 = 0L;\n\n    for (CakeType cakeType : cakeTypes) {\n        if (cakeType.weight == 1) {\n            maxValueAtCapacity1 = Math.max(maxValueAtCapacity1, cakeType.value);\n        }\n    }\n\n    return maxValueAtCapacity1;\n}", "tests": "assertEqual(t.maxDuffelBagValueWithCapacity1(new CakeType[]{t.new CakeType(1, 9), t.new CakeType(1, 4)}), 9L);\nassertEqual(t.maxDuffelBagValueWithCapacity1(new CakeType[]{t.new CakeType(2, 9), t.new CakeType(2, 4)}), 0L);"}, "cpp": {"code": "long long maxDuffelBagValueWithCapacity1(const vector&lt;CakeType>& cakeTypes) {\n\n    long long maxValueAtCapacity1 = 0;\n\n    for (const CakeType& cakeType : cakeTypes) {\n        if (cakeType.weight_ == 1) {\n            maxValueAtCapacity1 = max(maxValueAtCapacity1, cakeType.value_);\n        }\n    }\n\n    return maxValueAtCapacity1;\n}", "tests": "assertEqual(maxDuffelBagValueWithCapacity1(vector<CakeType>{CakeType(1, 9), CakeType(1, 4)}), 9LL);\nassertEqual(maxDuffelBagValueWithCapacity1(vector<CakeType>{CakeType(2, 9), CakeType(2, 4)}), 0LL);"}, "csharp": {"setup": "public class CakeType \n{\n    public int Weight { get; }\n    public long Value { get; }\n\n    public CakeType(int weight, long value)\n    {\n        Weight = weight;\n        Value  = value;\n    }\n}", "code": "public long MaxDuffelBagValueWithCapacity1(CakeType[] cakeTypes) \n{\n    long maxValueAtCapacity1 = 0L;\n    foreach (var cakeType in cakeTypes) \n    {\n        if (cakeType.Weight == 1) \n        {\n            maxValueAtCapacity1 = Math.Max(maxValueAtCapacity1, cakeType.Value);\n        }\n    }\n\n    return maxValueAtCapacity1;\n}", "tests": "AssertEqual(MaxDuffelBagValueWithCapacity1(new []{new CakeType(1, 9), new CakeType(1, 4)}), 9L);\nAssertEqual(MaxDuffelBagValueWithCapacity1(new []{new CakeType(2, 9), new CakeType(2, 4)}), 0L);"}}, "question__cake-thief__example-weight-value-pairs": {"javascript": "// weighs 7 kilograms and has a value of 160 pounds\n{weight: 7, value: 160}\n\n// weighs 3 kilograms and has a value of 90 pounds\n{weight: 3, value: 90}", "python": "# weighs 7 kilograms and has a value of 160 pounds\n(7, 160)\n\n# weighs 3 kilograms and has a value of 90 pounds\n(3, 90)", "ruby": "# weighs 7 kilograms and has a value of 160 pounds\n[7, 160]\n\n# weighs 3 kilograms and has a value of 90 pounds\n[3, 90]", "c": "// weighs 7 kilograms and has a value of 160 pounds\nCakeType cakeType = {7, 160};\n\n// weighs 3 kilograms and has a value of 90 pounds\nCakeType cakeType = {3, 90};", "java": "// weighs 7 kilograms and has a value of 160 pounds\nnew CakeType(7, 160);\n\n// weighs 3 kilograms and has a value of 90 pounds\nnew CakeType(3, 90);", "cpp": "// weighs 7 kilograms and has a value of 160 pounds\nCakeType(7, 160);\n\n// weighs 3 kilograms and has a value of 90 pounds\nCakeType(3, 90);", "csharp": "// Weighs 7 kilograms and has a value of 160 pounds\nvar cakeType = new CakeType(7, 160);\n\n// Weighs 3 kilograms and has a value of 90 pounds\nvar yetAnotherCakeType = new CakeType(3, 90);"}, "question__cake-thief__max-duffel-bag-value-with-capacity-and-cake-loops": {"javascript": "function maxDuffelBagValue(cakeTypes, weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    var maxValuesAtCapacities = [];\n    for (var i = 0; i &lt;= weightCapacity; i++) {\n        maxValuesAtCapacities[i] = 0;\n    }\n\n    for (var currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n        cakeTypes.forEach(function(cakeType) {\n\n            // if the cake weighs as much or less than the current capacity\n            // see what our max value could be if we took it!\n            if (cakeType.weight &lt;= currentCapacity) {\n                // find maxValueUsingCake\n                ...\n            }\n        });\n    }\n}", "python": "def max_duffel_bag_value(cake_tuples, weight_capacity):\n\n    # we make a list to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    for current_capacity in xrange(weight_capacity + 1):\n\n        for cake_weight, cake_value in cake_tuples:\n\n            # if the cake weighs as much or less than the current capacity\n            # see what our max value could be if we took it!\n            if cake_weight &lt;= current_capacity:\n                # find max_value_using_cake\n                ...", "ruby": "def max_duffel_bag_value(cake_arrays, weight_capacity)\n\n    # we make an array to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    (0..weight_capacity).each do |current_capacity|\n\n        cake_arrays.each do |cake_weight, cake_value|\n\n            # if the cake weighs as much or less than the current capacity\n            # see what our max value could be if we took it!\n            if cake_weight &lt;= current_capacity\n                # find max_value_using_cake\n                ...\n            end\n        end\n    end\nend", "c": "long long maxDuffelBagValue(const CakeType *cakeTypes, size_t cakeTypesLength, int weightCapacity) {\n    size_t currentCapacity;\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    long long maxValuesAtCapacities[weightCapacity + 1];\n\n    // initialize the array with zeros\n    memset(maxValuesAtCapacities, 0, sizeof(maxValuesAtCapacities));\n\n    for (currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n        size_t i;\n\n        for (i = 0; i &lt; cakeTypesLength; i++) {\n            const CakeType *cakeType = &cakeTypes[i];\n\n            // if the cake weighs as much or less than the current capacity\n            // see what our max value could be if we took it!\n            if (cakeType->weight &lt;= currentCapacity) {\n                // find maxValueUsingCake\n                ...\n            }\n        }\n    }\n}", "java": "public long maxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n        for (CakeType cakeType : cakeTypes) {\n\n            // if the cake weighs as much or less than the current capacity\n            // see what our max value could be if we took it!\n            if (cakeType.weight &lt;= currentCapacity) {\n                // find maxValueUsingCake\n                ...\n            }\n        }\n    }\n}", "cpp": "long long maxDuffelBagValue(const vector&lt;CakeType>& cakeTypes, size_t weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    vector&lt;int> maxValuesAtCapacities(weightCapacity + 1);\n\n    for (size_t currentCapacity = 0; currentCapacity &lt;= weightCapacity; ++currentCapacity) {\n\n        for (const CakeType& cakeType : cakeTypes) {\n\n            // if the cake weighs as much or less than the current capacity\n            // see what our max value could be if we took it!\n            if (cakeType.weight_ &lt;= currentCapacity) {\n                // find maxValueUsingCake\n                ...\n            }\n        }\n    }\n}", "csharp": "public long MaxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity) \n{\n    // We make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity.\n    // Starting each index with value 0.\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++)\n    {\n        foreach (var cakeType in cakeTypes)\n        {\n            // If the cake weighs as much or less than the current capacity\n            // see what our max value could be if we took it!\n            if (cakeType.Weight &lt;= currentCapacity)\n            {\n                // Find maxValueUsingCake\n                ...\n            }\n        }\n    }\n}"}, "question__cake-thief__compare-current-and-new-max-value-at-capacity-three-if-cake-weighs-two": {"javascript": "var maxValueUsingCake = maxValueAtCapacity1 + cakeType.value;\nmaxValueAtCapacity3   = Math.max(maxValueAtCapacity3, maxValueUsingCake);", "python": "max_value_using_cake    = max_value_at_capacity_1 + cake_value\nmax_value_at_capacity_3 = max(max_value_at_capacity_3, max_value_using_cake)", "ruby": "max_value_using_cake    = max_value_at_capacity_1 + cake_value\nmax_value_at_capacity_3 = [max_value_at_capacity_3, max_value_using_cake].max", "c": "long long maxValueUsingCake = maxValueAtCapacity1 + cakeType->value;\nmaxValueAtCapacity3 = MAX(maxValueAtCapacity3, maxValueUsingCake);", "java": "long maxValueUsingCake = maxValueAtCapacity1 + cakeType.value;\nmaxValueAtCapacity3 = Math.max(maxValueAtCapacity3, maxValueUsingCake);", "cpp": "long long maxValueUsingCake = maxValueAtCapacity1 + cakeType.value;\nmaxValueAtCapacity3 = max(maxValueAtCapacity3, maxValueUsingCake);", "csharp": "long maxValueUsingCake = maxValueAtCapacity1 + cakeType.Value;\nmaxValueAtCapacity3 = Math.Max(maxValueAtCapacity3, maxValueUsingCake);"}, "question__cake-thief__max-duffel-bag-value-start": {"javascript": "function maxDuffelBagValue(cakeTypes, weightCapacity) {\n\n    // array to hold the maximum possible value at every\n    // integer capacity from 0 to weightCapacity\n    // starting each index with value 0\n    var maxValuesAtCapacities = [];\n    for (var i = 0; i &lt;= weightCapacity; i++) {\n        maxValuesAtCapacities[i] = 0;\n    }\n}", "python": "def max_duffel_bag_value(cake_tuples, weight_capacity):\n\n    # list to hold the maximum possible value at every\n    # integer capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)", "ruby": "def max_duffel_bag_value(cake_arrays, weight_capacity)\n\n    # array to hold the maximum possible value at every\n    # integer capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\nend", "c": "long long maxDuffelBagValue(CakeType *cakeTypes, size_t cakeTypesLength, int weightCapacity) {\n    // array to hold the maximum possible value at every\n    // integer capacity from 0 to weightCapacity\n    long long maxValuesAtCapacities[weightCapacity + 1];\n\n    // initialize the array with zeros\n    memset(maxValuesAtCapacities, 0, sizeof(maxValuesAtCapacities));\n}", "java": "public long maxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity) {\n\n    // array to hold the maximum possible value at every\n    // integer capacity from 0 to weightCapacity\n    // starting each index with value 0 long\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n}", "cpp": "long long maxDuffelBagValue(const vector&lt;CakeType>& cakeTypes, size_t weightCapacity) {\n\n    // array to hold the maximum possible value at every\n    // integer capacity from 0 to weightCapacity\n    // starting each index with value 0 long\n    vector&lt;int> maxValuesAtCapacities(weightCapacity + 1);\n}", "csharp": "public long MaxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity)\n{\n    // Array to hold the maximum possible value at every\n    // integer capacity from 0 to weightCapacity.\n    // Starting each index with value 0 long.\n    var maxValuesAtCapacities = new long[weightCapacity + 1];\n}"}, "question__cake-thief__max-duffel-bag-value-loop-through-cake-pairs": {"javascript": "cakeTypes.forEach(function(cakeType) {\n\n    // if the cake weighs as much or less than the current capacity\n    // see what our max value could be if we took it!\n    if (cakeType.weight &lt;= currentCapacity) {\n        // find maxValueUsingCake\n        ...\n    }\n});", "python": "for cake_weight, cake_value in cake_tuples:\n\n    # if the cake weighs as much or less than the current capacity\n    # see what our max value could be if we took it!\n    if cake_weight &lt;= current_capacity:\n        # find max_value_using_cake\n        ...", "ruby": "cake_arrays.each do |cake_weight, cake_value|\n\n    # if the cake weighs as much or less than the current capacity\n    # see what our max value could be if we took it!\n    if cake_weight &lt;= current_capacity\n        # find max_value_using_cake\n        ...\n    end\nend", "c": "size_t i;\n\nfor (i = 0; i &lt; cakeTypesLength; i++) {\n    const CakeType *cakeType = &cakeTypes[i];\n\n    // if the cake weighs as much or less than the current capacity\n    // see what our max value could be if we took it!\n    if (cakeType->weight &lt;= currentCapacity) {\n        // find maxValueUsingCake\n        ...\n    }\n}", "java": "for (CakeType cakeType : cakeTypes) {\n\n    // if the cake weighs as much or less than the current capacity\n    // see what our max value could be if we took it!\n    if (cakeType.weight &lt;= currentCapacity) {\n        // find maxValueUsingCake\n        ...\n    }\n}", "cpp": "for (const CakeType& cakeType : cakeTypes) {\n\n    // if the cake weighs as much or less than the current capacity\n    // see what our max value could be if we took it!\n    if (cakeType.weight_ &lt;= currentCapacity) {\n        // find maxValueUsingCake\n        ...\n    }\n}", "csharp": "foreach (var cakeType in cakeTypes) \n{\n    // If the cake weighs as much or less than the current capacity\n    // see what our max value could be if we took it!\n    if (cakeType.Weight &lt;= currentCapacity)\n    {\n        // Find maxValueUsingCake\n        ...\n    }\n}"}, "question__cake-thief__max-value-using-cake": {"javascript": "var remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;\nvar maxValueUsingCake = cakeType.value + maxValuesAtCapacities[remainingCapacityAfterTakingCake];", "csharp": "int remainingCapacityAfterTakingCake = currentCapacity - cakeType.Weight;\nlong maxValueUsingCake = cakeType.Value + maxValuesAtCapacities[remainingCapacityAfterTakingCake];", "default": "remaining_capacity_after_taking_cake = current_capacity - cake_weight\nmax_value_using_cake = cake_value + max_values_at_capacities[remaining_capacity_after_taking_cake]", "c": "size_t remainingCapacityAfterTakingCake = currentCapacity - cakeType->weight;\nlong long maxValueUsingCake = cakeType->value + maxValuesAtCapacities[remainingCapacityAfterTakingCake];", "java": "int remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;\nlong maxValueUsingCake = cakeType.value + maxValuesAtCapacities[remainingCapacityAfterTakingCake];", "cpp": "size_t remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;\nlong long maxValueUsingCake = cakeType.value_ + maxValuesAtCapacities[remainingCapacityAfterTakingCake];"}, "setup": {"javascript": "var tests = [\n    [ [ [{weight: 5, value: 20}, {weight: 2, value: 3}], 12], 43],\n    [ [ [{weight: 2, value: 3}, {weight: 5, value: 20}], 12], 43],\n    [ [ [{weight: 2, value: 1}], 9], 4],\n    [ [ [{weight: 2, value: 3}, {weight: 3, value: 6}, {weight: 5, value: 1}, {weight: 6, value: 1}, {weight: 7, value: 1}, {weight: 8, value: 1}], 7], 12],\n    [ [ [{weight: 2, value: 1}, {weight: 3, value: 2}, {weight: 7, value: 5}], 12], 8],\n    [ [ [{weight: 1, value: 1}], 0], 0],\n    [ [ [{weight: 0, value: 1}], 10], Infinity],\n    [ [ [{weight: 0, value: 0}, {weight: 10, value: 10}], 10], 10],\n    [ [ [{weight: 51, value: 52}, {weight: 50, value: 50}], 100], 100], // this one fails if you do an \"eager based on value/weight ratio\" approach\n    [ [ [{weight: 3, value: 40}, {weight: 5, value: 70}], 8], 110],\n    [ [ [{weight: 3, value: 40}, {weight: 5, value: 70}], 9], 120],\n];", "python": "tests = [\n    [ [ [(5, 20), (2, 3)], 12], 43],\n    [ [ [(2, 3), (5, 20)], 12], 43],\n    [ [ [(2, 1)], 9], 4],\n    [ [ [(2, 3), (3, 6), (5, 1), (6, 1), (7, 1), (8, 1)], 7], 12],\n    [ [ [(2, 1), (3, 2), (7, 5)], 12], 8],\n    [ [ [(1, 1)], 0], 0],\n    [ [ [(0, 1)], 10], float('inf')],\n    [ [ [(0, 0), (10, 10)], 10], 10],\n    [ [ [(51, 52), (50, 50)], 100], 100], # this one fails if you do an \"eager based on value/weight ratio\" approach\n    [ [ [(3, 40), (5, 70)], 8], 110],\n    [ [ [(3, 40), (5, 70)], 9], 120],\n]", "ruby": "tests = [\n    [ [ [ [5, 20], [2, 3] ], 12], 43],\n    [ [ [ [2, 3], [5, 20] ], 12], 43],\n    [ [ [ [2, 1] ], 9], 4],\n    [ [ [ [2, 3], [3, 6], [5, 1], [6, 1], [7, 1], [8, 1] ], 7], 12],\n    [ [ [ [2, 1], [3, 2], [7, 5] ], 12], 8],\n    [ [ [ [1, 1] ], 0], 0],\n    [ [ [ [0, 1] ], 10], Float::INFINITY],\n    [ [ [ [0, 0], [10, 10] ], 10], 10],\n    [ [ [ [51, 52], [50, 50]], 100], 100], # this one fails if you do an \"eager based on value/weight ratio\" approach\n    [ [ [ [3, 40], [5, 70]], 8], 110],\n    [ [ [ [3, 40], [5, 70]], 9], 120],\n]", "c": "typedef struct {\n    size_t weight;\n    long long value;\n} CakeType;\n\nconst CakeType cakeTypes[10][6] = {\n    { {5, 20}, {2, 3} },\n    { {2, 3}, {5, 20} },\n    { {2, 1} },\n    { {2, 3}, {3, 6}, {5, 1}, {6, 1}, {7, 1}, {8, 1} },\n    { {2, 1}, {3, 2}, {7, 5} },\n    { {1, 1} },\n    { {0, 0}, {10, 10} },\n    { {51, 52}, {50, 50} },\n    { {3, 40}, {5, 70} },\n    { {3, 40}, {5, 70} }\n};\n\nconst size_t cakeTypesLength[10] = {\n    2,\n    2,\n    1,\n    6,\n    3,\n    1,\n    2,\n    2,\n    2,\n    2\n};\n\nconst size_t capacities[10] = {\n    12,\n    12,\n    9,\n    7,\n    12,\n    0,\n    10,\n    100,\n    8,\n    9\n};\n\nconst long long expectedValues[10] = {\n    43,\n    43,\n    4,\n    12,\n    8,\n    0,\n    10,\n    100,\n    110,\n    120\n};", "java": "CakeType[][] cakeTypes = new CakeType[][]{\n    {t.new CakeType(5, 20), t.new CakeType(2, 3)},\n    {t.new CakeType(2, 3), t.new CakeType(5, 20)},\n    {t.new CakeType(2, 1)},\n    {t.new CakeType(2, 3), t.new CakeType(3, 6), t.new CakeType(5, 1), t.new CakeType(6, 1), t.new CakeType(7, 1), t.new CakeType(8, 1)},\n    {t.new CakeType(2, 1), t.new CakeType(3, 2), t.new CakeType(7, 5)},\n    {t.new CakeType(1, 1)},\n    {t.new CakeType(0, 0), t.new CakeType(10, 10)},\n    {t.new CakeType(51, 52), t.new CakeType(50, 50)},\n    {t.new CakeType(3, 40), t.new CakeType(5, 70)},\n    {t.new CakeType(3, 40), t.new CakeType(5, 70)},\n};\n\nint[] capacities = new int[]{\n    12,\n    12,\n    9,\n    7,\n    12,\n    0,\n    10,\n    100,\n    8,\n    9,\n};\n\nlong[] expectedValues = new long[]{\n    43,\n    43,\n    4,\n    12,\n    8,\n    0,\n    10,\n    100,\n    110,\n    120,\n};", "cpp": "class CakeType {\npublic:\n    size_t weight_;\n    long long value_;\n\n    CakeType(size_t weight = 0, long long value = 0) :\n        weight_(weight),\n        value_(value)\n    {\n    }\n};\n\nconst vector<vector<CakeType>> cakeTypes {\n    vector<CakeType> {CakeType(5, 20), CakeType(2, 3)},\n    vector<CakeType> {CakeType(2, 3), CakeType(5, 20)},\n    vector<CakeType> {CakeType(2, 1)},\n    vector<CakeType> {CakeType(2, 3), CakeType(3, 6), CakeType(5, 1), CakeType(6, 1), CakeType(7, 1), CakeType(8, 1)},\n    vector<CakeType> {CakeType(2, 1), CakeType(3, 2), CakeType(7, 5)},\n    vector<CakeType> {CakeType(1, 1)},\n    vector<CakeType> {CakeType(0, 0), CakeType(10, 10)},\n    vector<CakeType> {CakeType(51, 52), CakeType(50, 50)},\n    vector<CakeType> {CakeType(3, 40), CakeType(5, 70)},\n    vector<CakeType> {CakeType(3, 40), CakeType(5, 70)},\n};\n\nconst vector<size_t> capacities {\n    12,\n    12,\n    9,\n    7,\n    12,\n    0,\n    10,\n    100,\n    8,\n    9,\n};\n\nconst vector<long long> expectedValues {\n    43,\n    43,\n    4,\n    12,\n    8,\n    0,\n    10,\n    100,\n    110,\n    120,\n};", "csharp": "CakeType[][] cakeTypes = new CakeType[][]\n{\n    new[] {new CakeType(5, 20), new CakeType(2, 3)},\n    new[] {new CakeType(2, 3), new CakeType(5, 20)},\n    new[] {new CakeType(2, 1)},\n    new[] {new CakeType(2, 3), new CakeType(3, 6), new CakeType(5, 1), new CakeType(6, 1), new CakeType(7, 1), new CakeType(8, 1)},\n    new[] {new CakeType(2, 1), new CakeType(3, 2), new CakeType(7, 5)},\n    new[] {new CakeType(1, 1)},\n    new[] {new CakeType(0, 0), new CakeType(10, 10)},\n    new[] {new CakeType(51, 52), new CakeType(50, 50)},\n    new[] {new CakeType(3, 40), new CakeType(5, 70)},\n    new[] {new CakeType(3, 40), new CakeType(5, 70)},\n};\n\nint[] capacities = new int[]\n{\n    12,\n    12,\n    9,\n    7,\n    12,\n    0,\n    10,\n    100,\n    8,\n    9,\n};\n\nlong[] expectedValues = new long[]\n{\n    43,\n    43,\n    4,\n    12,\n    8,\n    0,\n    10,\n    100,\n    110,\n    120,\n};"}, "question__cake-thief__max-duffel-bag-value-without-final-answer": {"javascript": {"code": "function maxDuffelBagValue(cakeTypes, weightCapacity) {\n\n     // we make an array to hold the maximum possible value at every\n     // duffel bag weight capacity from 0 to weightCapacity\n     // starting each index with value 0\n     var maxValuesAtCapacities = [];\n     for (var i = 0; i &lt; weightCapacity + 1; i++) {\n         maxValuesAtCapacities[i] = 0;\n     }\n\n     for (var currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n         // set a variable to hold the max monetary value so far for currentCapacity\n         var currentMaxValue = 0;\n\n         cakeTypes.forEach(function(cakeType) {\n\n             // if the current cake weighs as much or less than the current weight capacity\n             // it's possible taking the cake would give get a better value\n             if (cakeType.weight &lt;= currentCapacity) {\n\n                 // so we check: should we use the cake or not?\n                 // if we use the cake, the most kilograms we can include in addition to the cake\n                 // we're adding is the current capacity minus the cake's weight. we find the max\n                 // value at that integer capacity in our array maxValuesAtCapacities\n                 var maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];\n\n                 // now we see if it's worth taking the cake. how does the\n                 // value with the cake compare to the currentMaxValue?\n                 currentMaxValue = Math.max(maxValueUsingCake, currentMaxValue);\n             }\n         });\n\n         // add each capacity's max value to our array so we can use them\n         // when calculating all the remaining capacities\n         maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n     }\n\n }", "tests": "assertRunsWithoutError(maxDuffelBagValue, [ [{weight: 1, value: 2}, {weight: 3, value: 4}], 5], true);"}, "python": {"code": "def max_duffel_bag_value(cake_tuples, weight_capacity):\n\n    # we make a list to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    for current_capacity in xrange(weight_capacity + 1):\n\n        # set a variable to hold the max monetary value so far for the current weight capacity\n        current_max_value = 0\n\n        for cake_weight, cake_value in cake_tuples:\n\n            # if the current cake weighs as much or less than the current weight capacity\n            # it's possible taking the cake would give get a better value\n            if (cake_weight &lt;= current_capacity):\n\n                # should we use the cake or not?\n                # if we use the cake, the most kilograms we can include in addition to the cake\n                # we're adding is the current capacity minus the cake's weight. we find the max\n                # value at that integer capacity in our list max_values_at_capacities\n                max_value_using_cake = cake_value + max_values_at_capacities[current_capacity - cake_weight]\n\n                # now we see if it's worth taking the cake. how does the\n                # value with the cake compare to the current_max_value?\n                current_max_value = max(max_value_using_cake, current_max_value)\n\n        # add each capacity's max value to our list so we can use them\n        # when calculating all the remaining capacities\n        max_values_at_capacities[current_capacity] = current_max_value", "tests": "assertRunsWithoutError(max_duffel_bag_value, [ [(1, 2), (3, 4)], 5], True)"}, "ruby": {"code": "def max_duffel_bag_value(cake_arrays, weight_capacity)\n\n    # we make an array to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    (0..weight_capacity).each do |current_capacity|\n\n        # set a variable to hold the max monetary value so far for current_capacity\n        current_max_value = 0\n\n        cake_arrays.each do |cake_weight, cake_value|\n\n            # if the current cake weighs as much or less than the current weight capacity\n            # it's possible taking the cake would give get a better value\n            if (cake_weight &lt;= current_capacity)\n\n                # so we check: should we use the cake or not?\n                # if we use the cake, the most kilograms we can include in addition to the cake\n                # we're adding is the current capacity minus the cake's weight. we find the max\n                # value at that integer capacity in our array max_values_at_capacities\n                max_value_using_cake = cake_value + max_values_at_capacities[current_capacity - cake_weight]\n\n                # now we see if it's worth taking the cake. how does the\n                # value with the cake compare to the current_max_value?\n                current_max_value = [max_value_using_cake, current_max_value].max\n            end\n        end\n\n        # add each capacity's max value to our array so we can use them\n        # when calculating all the remaining capacities\n        max_values_at_capacities[current_capacity] = current_max_value\n    end\n\nend", "tests": "assertRunsWithoutError(method(:max_duffel_bag_value), [ [ [1, 2], [3, 4] ], 5], true)"}, "c": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n\nlong long maxDuffelBagValue(const CakeType *cakeTypes, size_t cakeTypesLength, int weightCapacity) {\n    size_t currentCapacity;\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    long long maxValuesAtCapacities[weightCapacity + 1];\n\n    // initialize the array with zeros\n    memset(maxValuesAtCapacities, 0, sizeof(maxValuesAtCapacities));\n\n    for (currentCapacity = 0; currentCapacity &lt;= weightCapacity; weightCapacity++) {\n        size_t i;\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long currentMaxValue = 0;\n\n        for (i = 0; i &lt; cakeTypesLength; i++) {\n            const CakeType *cakeType = &cakeTypes[i];\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType->weight &lt;= currentCapacity) {\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long long maxValueUsingCake = cakeType->value +\n                                              maxValuesAtCapacities[currentCapacity - cakeType->weight];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = MAX(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n}", "java": "public long maxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long currentMaxValue = 0;\n\n        for (CakeType cakeType : cakeTypes) {\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.weight &lt;= currentCapacity) {\n\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = Math.max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n}", "cpp": "long long maxDuffelBagValue(const vector&lt;CakeType>& cakeTypes, size_t weightCapacity) \n{\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    vector&lt;long long> maxValuesAtCapacities(weightCapacity + 1);\n\n    for (size_t currentCapacity = 0; currentCapacity &lt;= weightCapacity; ++currentCapacity) {\n\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long long currentMaxValue = 0;\n\n        for (const CakeType& cakeType : cakeTypes) {\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.weight_ &lt;= currentCapacity) {\n\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long long maxValueUsingCake = cakeType.value_ + maxValuesAtCapacities[currentCapacity - cakeType.weight_];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n}", "csharp": "public long maxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity)\n{\n    // We make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity.\n    // Starting each index with value 0.\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) \n    {\n        // Set a variable to hold the max monetary value so far for currentCapacity\n        long currentMaxValue = 0;\n\n        foreach (var cakeType in cakeTypes)\n        {\n            // If the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.Weight &lt;= currentCapacity) \n            {\n                // So we check: should we use the cake or not?\n                // If we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. We find the max\n                // value at that integer capacity in our array maxValuesAtCapacities.\n                long maxValueUsingCake = cakeType.Value + maxValuesAtCapacities[currentCapacity - cakeType.Weight];\n\n                // Now we see if it's worth taking the cake.\n                // How does the value with the cake compare to the currentMaxValue?\n                currentMaxValue = Math.Max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // Add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n}"}, "question__cake-thief__solution": {"javascript": {"code": "function maxDuffelBagValue(cakeTypes, weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    var maxValuesAtCapacities = [];\n    for (var i = 0; i &lt;= weightCapacity; i++) {\n        maxValuesAtCapacities[i] = 0;\n    }\n\n    for (var currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n        // set a variable to hold the max monetary value so far for currentCapacity\n        var currentMaxValue = 0;\n\n        // we use a for loop here instead of forEach because we return infinity\n        // if we get a cakeType that weighs nothing and has a value. but forEach\n        // loops always return undefined and you can't break out of them without\n        // throwing an exception\n        for (var j = 0; j &lt; cakeTypes.length; j++) {\n            var cakeType = cakeTypes[j];\n\n            // if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cakeType.weight === 0 && cakeType.value !== 0) {\n                return Infinity;\n            }\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.weight &lt;= currentCapacity) {\n\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                var maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = Math.max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n    return maxValuesAtCapacities[weightCapacity];\n}", "tests": "testInputAndOutputLists(maxDuffelBagValue, tests, true);"}, "python": {"code": "def max_duffel_bag_value(cake_tuples, weight_capacity):\n\n    # we make a list to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    for current_capacity in xrange(weight_capacity + 1):\n\n        # set a variable to hold the max monetary value so far for current_capacity\n        current_max_value = 0\n\n        for cake_weight, cake_value in cake_tuples:\n\n            # if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cake_weight == 0 and cake_value != 0):\n                return float('inf')\n\n            # if the current cake weighs as much or less than the current weight capacity\n            # it's possible taking the cake would give get a better value\n            if (cake_weight &lt;= current_capacity):\n\n                # so we check: should we use the cake or not?\n                # if we use the cake, the most kilograms we can include in addition to the cake\n                # we're adding is the current capacity minus the cake's weight. we find the max\n                # value at that integer capacity in our list max_values_at_capacities\n                max_value_using_cake = cake_value + max_values_at_capacities[current_capacity - cake_weight]\n\n                # now we see if it's worth taking the cake. how does the\n                # value with the cake compare to the current_max_value?\n                current_max_value = max(max_value_using_cake, current_max_value)\n\n        # add each capacity's max value to our list so we can use them\n        # when calculating all the remaining capacities\n        max_values_at_capacities[current_capacity] = current_max_value\n\n    return max_values_at_capacities[weight_capacity]", "tests": "testInputAndOutputLists(max_duffel_bag_value, tests, True)"}, "ruby": {"code": "def max_duffel_bag_value(cake_arrays, weight_capacity)\n\n    # we make an array to hold the maximum possible value at every\n    # duffel bag weight capacity from 0 to weight_capacity\n    # starting each index with value 0\n    max_values_at_capacities = [0] * (weight_capacity + 1)\n\n    (0..weight_capacity).each do |current_capacity|\n\n        # set a variable to hold the max monetary value so far for current_capacity\n        current_max_value = 0\n\n        cake_arrays.each do |cake_weight, cake_value|\n\n            # if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cake_weight == 0 && cake_value != 0)\n                return Float::INFINITY\n            end\n\n            # if the current cake weighs as much or less than the current weight capacity\n            # it's possible taking the cake would give get a better value\n            if (cake_weight &lt;= current_capacity)\n\n                # so we check: should we use the cake or not?\n                # if we use the cake, the most kilograms we can include in addition to the cake\n                # we're adding is the current capacity minus the cake's weight. we find the max\n                # value at that integer capacity in our array max_values_at_capacities\n                max_value_using_cake = cake_value + max_values_at_capacities[current_capacity - cake_weight]\n\n                # now we see if it's worth taking the cake. how does the\n                # value with the cake compare to the current_max_value?\n                current_max_value = [max_value_using_cake, current_max_value].max\n            end\n        end\n\n        # add each capacity's max value to our array so we can use them\n        # when calculating all the remaining capacities\n        max_values_at_capacities[current_capacity] = current_max_value\n    end\n\n    return max_values_at_capacities[weight_capacity]\nend", "tests": "testInputAndOutputLists(method(:max_duffel_bag_value), tests, true)"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n\nlong long maxDuffelBagValue(const CakeType *cakeTypes, size_t cakeTypesLength, size_t weightCapacity) {\n    size_t currentCapacity;\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    long long maxValuesAtCapacities[weightCapacity + 1];\n\n    // initialize the array with zeros\n    memset(maxValuesAtCapacities, 0, sizeof(maxValuesAtCapacities));\n\n    for (currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n        size_t i;\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long long currentMaxValue = 0;\n\n        for (i = 0; i &lt; cakeTypesLength; i++) {\n            const CakeType *cakeType = &cakeTypes[i];\n\n            // if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cakeType->weight == 0) {\n                assert(cakeType->value == 0LL);\n            }\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType->weight &lt;= currentCapacity) {\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long long maxValueUsingCake = cakeType->value +\n                                              maxValuesAtCapacities[currentCapacity - cakeType->weight];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = MAX(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n    return maxValuesAtCapacities[weightCapacity];\n}", "tests": "{\n    size_t i;\n    for (i = 0; i < 10; i++) {\n        long long retval = maxDuffelBagValue(cakeTypes[i], cakeTypesLength[i], capacities[i]);\n        ASSERT(retval == expectedValues[i]);\n    }\n}"}, "java": {"setup": "public class InfiniteValue implements VoidFunctionToTest {\n    public void call() {\n        t.maxDuffelBagValue(new CakeType[]{t.new CakeType(0, 1)}, 10);\n    }\n}", "code": "static class InfinityException extends RuntimeException {\n    public InfinityException() {\n        super(\"Max value is infinity!\");\n    }\n}\n\nclass CakeType {\n\n    int weight;\n    int value;\n\n    public CakeType(int weight, int value) {\n        this.weight = weight;\n        this.value  = value;\n    }\n\n}\n\npublic long maxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long currentMaxValue = 0;\n\n        for (CakeType cakeType : cakeTypes) {\n\n            // if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cakeType.weight == 0 && cakeType.value != 0) {\n                throw new InfinityException();\n            }\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.weight &lt;= currentCapacity) {\n\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = Math.max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n    return maxValuesAtCapacities[weightCapacity];\n}", "tests": "for (int n = 0; n < cakeTypes.length; n++) {\n    assertEqual(t.maxDuffelBagValue(cakeTypes[n], capacities[n]), expectedValues[n]);\n}\n\nassertRaisesError(t.new InfiniteValue(), \"value is infinity\");"}, "cpp": {"code": "long long maxDuffelBagValue(const vector&lt;CakeType>& cakeTypes, size_t weightCapacity) {\n\n    // we make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity\n    // starting each index with value 0\n    vector&lt;long long> maxValuesAtCapacities(weightCapacity + 1);\n\n    for (size_t currentCapacity = 0; currentCapacity &lt;= weightCapacity; ++currentCapacity) {\n\n        // set a variable to hold the max monetary value so far for currentCapacity\n        long long currentMaxValue = 0;\n\n        for (const CakeType& cakeType : cakeTypes) {\n\n            // if a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cakeType.weight_ == 0 && cakeType.value_ != 0) {\n                throw range_error(\"Max value is infinity!\");\n            }\n\n            // if the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.weight_ &lt;= currentCapacity) {\n\n                // so we check: should we use the cake or not?\n                // if we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. we find the max\n                // value at that integer capacity in our array maxValuesAtCapacities\n                long long maxValueUsingCake = cakeType.value_ + maxValuesAtCapacities[currentCapacity - cakeType.weight_];\n\n                // now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n    return maxValuesAtCapacities[weightCapacity];\n}", "tests": "for (size_t i = 0; i < cakeTypes.size(); ++i) {\n    assertEqual(maxDuffelBagValue(cakeTypes[i], capacities[i]), expectedValues[i]);\n}\n\nconst vector<CakeType> infiniteValue { CakeType(0, 1) };\nassertRaisesError<range_error>(\"infinity value\", &maxDuffelBagValue, infiniteValue, 10);"}, "csharp": {"code": "public class InfinityException : Exception\n{\n    public InfinityException() :\n        base(\"Max value is infinity!\")\n    {\n    }\n}\n\npublic class CakeType \n{\n    public int Weight { get; }\n    public long Value  { get; }\n\n    public CakeType(int weight, int value) \n    {\n        Weight = weight;\n        Value  = value;\n    }\n}\n\npublic long MaxDuffelBagValue(CakeType[] cakeTypes, int weightCapacity)\n{\n    // We make an array to hold the maximum possible value at every\n    // duffel bag weight capacity from 0 to weightCapacity.\n    // Starting each index with value 0.\n    long[] maxValuesAtCapacities = new long[weightCapacity + 1];\n\n    for (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++)\n    {\n        // Set a variable to hold the max monetary value so far for currentCapacity\n        long currentMaxValue = 0;\n\n        foreach (var cakeType in cakeTypes)\n        {\n            // If a cake weighs 0 and has a positive value the value of our duffel bag is infinite!\n            if (cakeType.Weight == 0 && cakeType.Value != 0)\n            {\n                throw new InfinityException();\n            }\n\n            // If the current cake weighs as much or less than the current weight capacity\n            // it's possible taking the cake would give get a better value\n            if (cakeType.Weight &lt;= currentCapacity) \n            {\n                // So we check: should we use the cake or not?\n                // If we use the cake, the most kilograms we can include in addition to the cake\n                // we're adding is the current capacity minus the cake's weight. We find the max\n                // value at that integer capacity in our array maxValuesAtCapacities.\n                long maxValueUsingCake = cakeType.Value + maxValuesAtCapacities[currentCapacity - cakeType.Weight];\n\n                // Now we see if it's worth taking the cake. how does the\n                // value with the cake compare to the currentMaxValue?\n                currentMaxValue = Math.Max(maxValueUsingCake, currentMaxValue);\n            }\n        }\n\n        // Add each capacity's max value to our array so we can use them\n        // when calculating all the remaining capacities\n        maxValuesAtCapacities[currentCapacity] = currentMaxValue;\n    }\n\n    return maxValuesAtCapacities[weightCapacity];\n}", "tests": "for (int i = 0; i < cakeTypes.Length; i++) \n{\n    AssertEqual(MaxDuffelBagValue(cakeTypes[i], capacities[i]), expectedValues[i]);\n}\n\nAssertRaisesError(() => MaxDuffelBagValue(new[] {new CakeType(0, 1)}, 10), \"value is infinity\");"}}, "question__cake-thief__max-value-using-cake-refactored": {"javascript": "var maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];", "csharp": "long maxValueUsingCake = cakeType.Value + maxValuesAtCapacities[currentCapacity - cakeType.Weight];", "default": "max_value_using_cake = cake_value + max_values_at_capacities[current_capacity - cake_weight]", "c": "long long maxValueUsingCake = cakeType->value + maxValuesAtCapacities[currentCapacity - cakeType->weight];", "java": "long maxValueUsingCake = cakeType.value + maxValuesAtCapacities[currentCapacity - cakeType.weight];", "cpp": "long long maxValueUsingCake = cakeType.value_ + maxValuesAtCapacities[currentCapacity - cakeType.weight];"}, "question__cake-thief__max-duffel-bag-value-loop-through-capacities": {"javascript": "// every integer from 0 to the input weightCapacity\nfor (var currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n    ...\n}", "python": "# every integer from 0 to the input weight_capacity\nfor current_capacity in xrange(weight_capacity + 1):\n    ...", "ruby": "# every integer from 0 to the input weight_capacity\n(0..weight_capacity).each do |current_capacity|\n    ...\nend", "c": "// every integer from 0 to the input weightCapacity\nsize_t currentCapacity;\nfor (currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n    ...\n}", "java": "// every integer from 0 to the input weightCapacity\nfor (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) {\n    ...\n}", "cpp": "// every integer from 0 to the input weightCapacity\nfor (size_t currentCapacity = 0; currentCapacity &lt;= weightCapacity; ++currentCapacity) {\n\n}", "csharp": "// Every integer from 0 to the input weightCapacity\nfor (int currentCapacity = 0; currentCapacity &lt;= weightCapacity; currentCapacity++) \n{\n    ...\n}"}, "question__cake-thief__hard-coding-max-values-at-three-two-and-one": {"javascript": "// cake weighs 3 kg\nvar maxValueUsingCake = cakeType.value;\n\n// cake weighs 2 kg\nvar maxValueUsingCake = maxValueAtCapacity1 + cakeType.value;\n\n// cake weighs 1 kg\nvar maxValueUsingCake = maxValueAtCapacity2 + cakeType.value;", "csharp": "// Cake weighs 3 kg\nlong maxValueUsingCake = cakeType.Value;\n\n// Cake weighs 2 kg\nlong maxValueUsingCake = maxValueAtCapacity1 + cakeType.Value;\n\n// Cake weighs 1 kg\nlong maxValueUsingCake = maxValueAtCapacity2 + cakeType.Value;", "default": "# cake weighs 3 kg\nmax_value_using_cake = cake_value\n\n# cake weighs 2 kg\nmax_value_using_cake = max_value_at_capacity_1 + cake_value\n\n# cake weighs 1 kg\nmax_value_using_cake = max_value_at_capacity_2 + cake_value", "c": "// cake weighs 3 kg\nlong long maxValueUsingCake = cakeType->value;\n\n// cake weighs 2 kg\nlong long maxValueUsingCake = maxValueAtCapacity1 + cakeType->value;\n\n// cake weighs 1 kg\nlong long maxValueUsingCake = maxValueAtCapacity2 + cakeType->value;", "java": "// cake weighs 3 kg\nlong maxValueUsingCake = cakeType.value;\n\n// cake weighs 2 kg\nlong maxValueUsingCake = maxValueAtCapacity1 + cakeType.value;\n\n// cake weighs 1 kg\nlong maxValueUsingCake = maxValueAtCapacity2 + cakeType.value;", "cpp": "// cake weighs 3 kg\nlong long maxValueUsingCake = cakeType.value_;\n\n// cake weighs 2 kg\nlong long maxValueUsingCake = maxValueAtCapacity1 + cakeType.value_;\n\n// cake weighs 1 kg\nlong long maxValueUsingCake = maxValueAtCapacity2 + cakeType.value_;"}, "question__cake-thief__cake-type-class": {"default": "class CakeType {\n\n    int weight;\n    int value;\n\n    public CakeType(int weight, int value) {\n        this.weight = weight;\n        this.value  = value;\n    }\n\n}", "cpp": "class CakeType {\npublic:\n    size_t weight_;\n    long long value_;\n\n    public CakeType(size_t weight = 0, long long value = 0) :\n        weight_(weight),\n        value_(value)\n    {\n    }\n\n};", "c": "typedef struct CakeType {\n    size_t weight;\n    long long value;\n} CakeType;", "csharp": "class CakeType \n{\n    public int Weight { get; }\n    public long Value { get; }\n\n    public CakeType(int weight, long value)\n    {\n        Weight = weight;\n        Value  = value;\n    }\n}"}, "question__cake-thief__example-input-output": {"javascript": "var cakeTypes = [\n    {weight: 7, value: 160},\n    {weight: 3, value: 90},\n    {weight: 2, value: 15},\n];\n\nvar capacity = 20;\n\nmaxDuffelBagValue(cakeTypes, capacity);\n// returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "python": "cake_tuples = [(7, 160), (3, 90), (2, 15)]\ncapacity    = 20\n\nmax_duffel_bag_value(cake_tuples, capacity)\n# returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "ruby": "cake_arrays = [ [7, 160], [3, 90], [2, 15] ]\ncapacity = 20\n\nmax_duffel_bag_value(cake_arrays, capacity)\n# returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "c": "const CakeType cakeTypes[3] = {\n    {7, 160},\n    {3, 90},\n    {2, 15}\n};\n\nsize_t cakeTypesLength = 3;\n\nsize_t capacity = 20;\n\nmaxDuffelBagValue(cakeTypes, cakeTypesLength, capacity);\n// returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "java": "CakeType[] cakeTypes = new CakeType[]{\n    new CakeType(7, 160),\n    new CakeType(3, 90),\n    new CakeType(2, 15),\n};\n\nint capacity = 20;\n\nmaxDuffelBagValue(cakeTypes, capacity);\n// returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "cpp": "const vector&lt;CakeType> cakeTypes {\n    CakeType(7, 160),\n    CakeType(3, 90),\n    CakeType(2, 15),\n};\n\nsize_t capacity = 20;\n\nmaxDuffelBagValue(cakeTypes, capacity);\n// returns 555 (6 of the middle type of cake and 1 of the last type of cake)", "csharp": "CakeType[] cakeTypes = new []\n{\n    new CakeType(7, 160),\n    new CakeType(3, 90),\n    new CakeType(2, 15),\n};\n\nint capacity = 20;\n\n// Returns 555 (6 of the middle type of cake and 1 of the last type of cake)\nMaxDuffelBagValue(cakeTypes, capacity);"}, "question__cake-thief__max-value-at-capacity-three-start": {"javascript": "var maxValueAtCapacity3 = 0;\n\ncakeTypes.forEach(function(cakeType) {\n    // only care about cakes that weigh 3 kg or less\n    ...\n});", "python": "max_value_at_capacity_3 = 0\n\nfor cake_weight, cake_value in cake_tuples:\n    # only care about cakes that weigh 3 kg or less\n    ...", "ruby": "max_value_at_capacity_3 = 0\n\ncake_arrays.each do |cake_weight, cake_value|\n    # only care about cakes that weigh 3 kg or less\n    ...\nend", "c": "long long maxValueAtCapacity3 = 0;\nsize_t i;\n\nfor (i = 0; i &lt; cakeTypesLength; i++) {\n    const CakeType *cakeType = &cakeTypes[i];\n    // only care about cakes that weigh 3 kg or less\n    ...\n}", "java": "long maxValueAtCapacity3 = 0L;\n\nfor (CakeType cakeType : cakeTypes) {\n    // only care about cakes that weigh 3 kg or less\n    ...\n}", "cpp": "long long maxValueAtCapacity3 = 0;\n\nfor (cont CakeType& cakeType : cakeTypes) {\n    // only care about cakes that weigh 3 kg or less\n    ...\n}", "csharp": "long maxValueAtCapacity3 = 0L;\n\nforeach (var cakeType in cakeTypes)\n{\n    // Only care about cakes that weigh 3 kg or less\n    ...\n}"}, "question__cake-thief__two-cake-pairs-focus-on-value-weight-ratio": {"javascript": "{weight: 3, value: 40}\n{weight: 5, value: 70}", "python": "[(3, 40), (5, 70)]", "ruby": "[ [3, 40], [5, 70] ]", "c": "CakeType cakeType1 = {3, 40};\nCakeType cakeType2 = {5, 70};", "java": "new CakeType(3, 40);\nnew CakeType(5, 70);", "cpp": "CakeType(3, 40);\nCakeType(5, 70);", "csharp": "var cakeType = new CakeType(3, 40);\nvar anotherCakeType = new CakeType(5, 70);"}, "question__cake-thief__remaining-capacity-after-taking-cake": {"javascript": "var remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;", "csharp": "int remainingCapacityAfterTakingCake = currentCapacity - cakeType.Weight;", "default": "remaining_capacity_after_taking_cake = current_capacity - cake_weight", "c": "size_t remainingCapacityAfterTakingCake = currentCapacity - cakeType->weight;", "java": "int remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;", "cpp": "size_t remainingCapacityAfterTakingCake = currentCapacity - cakeType.weight;"}, "question__cake-thief__update-current-max-value": {"python": "current_max_value = max(max_value_using_cake, current_max_value)", "ruby": "current_max_value = [max_value_using_cake, current_max_value].max", "default": "currentMaxValue = Math.max(maxValueUsingCake, currentMaxValue);", "c": "currentMaxValue = MAX(maxValueUsingCake, currentMaxValue);", "cpp": "currentMaxValue = max(maxValueUsingCake, currentMaxValue);", "csharp": "currentMaxValue = Math.Max(maxValueUsingCake, currentMaxValue);"}, "question__cake-thief__compare-current-and-new-max-value-at-capacity-three-if-cake-weighs-one": {"javascript": "var maxValueUsingCake = maxValueAtCapacity2 + cakeType.value;\nmaxValueAtCapacity3   = Math.max(maxValueAtCapacity3, maxValueUsingCake);", "python": "max_value_using_cake    = max_value_at_capacity_2 + cake_value\nmax_value_at_capacity_3 = max(max_value_at_capacity_3, max_value_using_cake)", "ruby": "max_value_using_cake    = max_value_at_capacity_2 + cake_value\nmax_value_at_capacity_3 = [max_value_at_capacity_3, max_value_using_cake].max", "c": "long long maxValueUsingCake = maxValueAtCapacity2 + cakeType->value;\nmaxValueAtCapacity3 = MAX(maxValueAtCapacity3, maxValueUsingCake);", "java": "long maxValueUsingCake = maxValueAtCapacity2 + cakeType.value;\nmaxValueAtCapacity3 = Math.max(maxValueAtCapacity3, maxValueUsingCake);", "cpp": "long long maxValueUsingCake = maxValueAtCapacity2 + cakeType.value;\nmaxValueAtCapacity3 = max(maxValueAtCapacity3, maxValueUsingCake);", "csharp": "long maxValueUsingCake = maxValueAtCapacity2 + cakeType.Value;\nmaxValueAtCapacity3 = Math.Max(maxValueAtCapacity3, maxValueUsingCake);"}}, "funcs": {"question__cake-thief__max-duffel-bag-value": {"snake": "max_duffel_bag_value", "csharp": "MaxDuffelBagValue", "camel": "maxDuffelBagValue"}}, "vars": {"question__cake-thief__max-value-at-capacity-three": {"snake": "max_value_at_capacity_3", "camel": "maxValueAtCapacity3"}, "question__cake-thief__value": {"default": "value", "csharp": "Value"}, "question__cake-thief__max-value-using-cake": {"snake": "max_value_using_cake", "camel": "maxValueUsingCake"}, "question__cake-thief__cake-type-class": {"default": "CakeType"}, "question__cake-thief__weight-capacity": {"snake": "weight_capacity", "camel": "weightCapacity"}, "question__cake-thief__max-value-at-capacity-two": {"snake": "max_value_at_capacity_2", "camel": "maxValueAtCapacity2"}, "question__cake-thief__max-value-at-capacity-one": {"snake": "max_value_at_capacity_1", "camel": "maxValueAtCapacity1"}, "question__cake-thief__weight": {"default": "weight", "csharp": "Weight"}, "question__cake-thief__remaining-capacity-after-taking-cake": {"snake": "remaining_capacity_after_taking_cake", "camel": "remainingCapacityAfterTakingCake"}, "question__cake-thief__var-for-getting-cake-weight": {"default": "cake_weight", "javascript": "cakeType", "c": "cakeType->weight", "csharp": "cakeType", "java": "cakeType"}, "question__cake-thief__current-capacity": {"snake": "current_capacity", "camel": "currentCapacity"}, "question__cake-thief__current-max-value": {"snake": "current_max_value", "camel": "currentMaxValue"}, "question__cake-thief__max-values-at-capacities": {"snake": "max_values_at_capacities", "camel": "maxValuesAtCapacities"}}, "words": {"question__cake-thief__a-hash-table-concept": {"swift": "a <span concept='hash-map'>dictionary</span>", "javascript": "an <span concept=\"hash-map\">object</span>", "objectivec": "a <span concept='hash-map'>dictionary</span>", "ruby": "a <span concept=\"hash-map\">hash</span>", "python": "a <span concept=\"hash-map\">dictionary</span>", "cpp": "a <span concept=\"hash-map\">unordered map</span>", "c": "a <span concept=\"hash-map\">hash table</span>", "php": "an <span concept='hash-map'>array</span>", "java": "a <span concept=\"hash-map\">hash map</span>", "csharp": "a <span concept='hash-map'>dictionary</span>"}, "question__cake-thief__cake-weight-value-pairs-explanation": {"javascript": "<p>\nEach type of cake has a weight and a value, stored in <span words=\"a-cake-weight-value-pair\">an object</span> with two properties:\n</p>\n<ol>\n<li><span var=\"weight\">weight</span>: the <strong>weight</strong> of the cake in kilograms</li>\n<li><span var=\"value\">value</span>: the <strong>monetary value</strong> of the cake in British pounds</li>\n</ol>", "csharp": "<p>\nEach type of cake has a weight and a value, stored in objects of a <span var=\"cake-type-class\"/> class:\n</p>\n<div code-block=\"cake-type-class\">\n</div>", "python": "<p>\nEach type of cake has a weight and a value, stored in <span words=\"a-cake-weight-value-pair\">a tuple</span> with two indices:\n</p>\n<ol start=\"0\">\n<li>An integer representing the <strong>weight</strong> of the cake in kilograms</li>\n<li>An integer representing the <strong>monetary value</strong> of the cake in British pounds</li>\n</ol>", "default": "<p>\nEach type of cake has a weight and a value, stored in <span words=\"a-cake-weight-value-pair\"/> with two indices:\n</p>\n<ol start=\"0\">\n<li>An integer representing the <strong>weight</strong> of the cake in kilograms</li>\n<li>An integer representing the <strong>monetary value</strong> of the cake in British pounds</li>\n</ol>", "c": "<p>\nEach type of cake has a weight and a value, stored in a <span var=\"cake-type-class\">CakeType</span> structure:\n</p>\n<div code-block=\"cake-type-class\" language=\"c\" translation-highlighting=\"static\">typedef struct CakeType {\n    size_t weight;\n    long long value;\n} CakeType;</div>", "java": "<p>\nEach type of cake has a weight and a value, stored in objects of a <span var=\"cake-type-class\">CakeType</span> class:\n</p>\n<div code-block=\"cake-type-class\" language=\"java\" translation-highlighting=\"static\">class CakeType {\n\n    int weight;\n    int value;\n\n    public CakeType(int weight, int value) {\n        this.weight = weight;\n        this.value  = value;\n    }\n\n}</div>", "ruby": "<p>\nEach type of cake has a weight and a value, stored in <span words=\"a-cake-weight-value-pair\">an array</span> with two indices:\n</p>\n<ol start=\"0\">\n<li>An integer representing the <strong>weight</strong> of the cake in kilograms</li>\n<li>An integer representing the <strong>monetary value</strong> of the cake in British pounds</li>\n</ol>", "cpp": "<p>\nEach type of cake has a weight and a value, stored in objects of a <span var=\"cake-type-class\">CakeType</span> class:\n</p>\n<div code-block=\"cake-type-class\" language=\"cpp\" translation-highlighting=\"static\">class CakeType {\npublic:\n    size_t weight_;\n    long long value_;\n\n    public CakeType(size_t weight = 0, long long value = 0) :\n        weight_(weight),\n        value_(value)\n    {\n    }\n\n};</div>"}, "question__cake-thief__infinity-choices": {"javascript": "<ol>\n<li><strong>The JavaScript <span code-inline=\"infinity\">Infinity</span> property.</strong></li>\n<li>Return a <strong>custom response</strong>, like the string <span code-inline=\"infinity-string\">'infinity'</span>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "csharp": "<ol>\n<li><strong>The highest possible <span code-inline=\"long-class\"/>.</strong> In C#, that'd be <span code-inline=\"long-max-value\"/>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "python": "<ol>\n<li><strong><span words=\"c18n-language\">Python</span>'s <span code-inline=\"infinity\">float('inf')</span>.</strong></li>\n<li>Return a <strong>custom response</strong>, like the string <span code-inline=\"infinity-string\">'infinity'</span>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "default": "<ol>\n<li><strong><span words=\"c18n-language\"/>'s <span code-inline=\"infinity\"/>.</strong></li>\n<li>Return a <strong>custom response</strong>, like the string <span code-inline=\"infinity-string\"/>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "c": "<ol>\n<li><strong>The highest possible <span code-inline=\"long-class\">long long</span>.</strong> In C, that'd be <span code-inline=\"long-max-value\">LLONG_MAX</span>.</li>\n<li><strong>Abort</strong> the program on assertion failure indicating the answer is infinity.</li>\n</ol>", "java": "<ol>\n<li><strong>The highest possible <span code-inline=\"long-class\">Long</span>.</strong> In Java, that'd be <span code-inline=\"long-max-value\">Long.MAX_VALUE</span>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "ruby": "<ol>\n<li><strong><span words=\"c18n-language\">Ruby</span>'s <span code-inline=\"infinity\">Float::INFINITY</span>.</strong></li>\n<li>Return a <strong>custom response</strong>, like the string <span code-inline=\"infinity-string\">'infinity'</span>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>", "cpp": "<ol>\n<li><strong>The highest possible <span code-inline=\"long-class\">long long</span>.</strong> In C++, that'd be <span code-inline=\"long-max-value\">Long.MAX_VALUE</span>.</li>\n<li><strong>Raise an exception</strong> indicating the answer is infinity.</li>\n</ol>"}, "question__cake-thief__first-infinity-option-advantages-and-disadvantages": {"ruby": "For the <strong>first option</strong> the advantage is we get the <em>behavior</em> of infinity. Compared to any other integer, <span code-inline=\"infinity\">Float::INFINITY</span> will be greater. And it's a <em>number</em>, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but without manually checking we won't know if we mean an actual value or the special case of infinity.", "csharp": "For the <strong>first option</strong> the advantage is the highest possible <span code-inline=\"long-class\"/> will <em>behave</em> like infinity in a few ways. For example, it'll be greater than any other integer. But it's a still a <em>specific</em> number, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but representing infinity as a specific number is \"lossy\"&#8212;it won't be clear if we're talking about an actual value or the special case of infinity.", "python": "For the <strong>first option</strong> the advantage is we get the <em>behavior</em> of infinity. Compared to any other integer, <span code-inline=\"infinity\">float('inf')</span> will be greater. And it's a <em>number</em>, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but without manually checking we won't know if we mean an actual value or the special case of infinity.", "javascript": "For the <strong>first option</strong> the advantage is we get the <em>behavior</em> of infinity. Compared to any other integer, <span code-inline=\"infinity\">Infinity</span> will be greater. And it's a <em>number</em>, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but without manually checking we won't know if we mean an actual value or the special case of infinity.", "default": "For the <strong>first option</strong> the advantage is we get the <em>behavior</em> of infinity. Compared to any other integer, <span code-inline=\"infinity\"/> will be greater. And it's a <em>number</em>, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but without manually checking we won't know if we mean an actual value or the special case of infinity.", "c": "For the <strong>first option</strong> the advantage is the highest possible <span code-inline=\"long-class\">long long</span> will <em>behave</em> like infinity in a few ways. For example, it'll be greater than any other integer. But it's a still a <em>specific</em> number, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but representing infinity as a specific number is \"lossy\"&#8212;it won't be clear if we're talking about an actual value or the special case of infinity.", "java": "For the <strong>first option</strong> the advantage is the highest possible <span code-inline=\"long-class\">Long</span> will <em>behave</em> like infinity in a few ways. For example, it'll be greater than any other integer. But it's a still a <em>specific</em> number, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but representing infinity as a specific number is \"lossy\"&#8212;it won't be clear if we're talking about an actual value or the special case of infinity.", "cpp": "For the <strong>first option</strong> the advantage is the highest possible <span code-inline=\"long-class\">long long</span> will <em>behave</em> like infinity in a few ways. For example, it'll be greater than any other integer. But it's a still a <em>specific</em> number, which can be an advantage or disadvantage&#8212;we might want our result to always be the same <em>type</em>, but representing infinity as a specific number is \"lossy\"&#8212;it won't be clear if we're talking about an actual value or the special case of infinity."}, "question__cake-thief__several": {"ruby": "several", "csharp": "a couple", "python": "several", "javascript": "several", "default": "several", "c": "a couple", "java": "a couple", "cpp": "a couple"}, "question__cake-thief__standard-list": {"javascript": "array", "python": "list", "default": "list", "php": "array", "ruby": "array", "swift": "array", "cpp": "vector", "objectivec": "array", "csharp": "list", "c": "array", "java": "array"}, "question__cake-thief__handle-infinity": {"ruby": "return infinity", "csharp": "throw an infinity error", "python": "return infinity", "javascript": "return infinity", "default": "return infinity", "c": "abort on assertion failure", "java": "throw an infinity error", "cpp": "throw a range error"}, "question__cake-thief__c18n-language": {"javascript": "JavaScript", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "java": "Java", "cpp": "C++ (beta)"}, "question__cake-thief__option-were-going-with": {"ruby": "first", "csharp": "second", "python": "first", "javascript": "first", "default": "first", "c": "second", "java": "second", "cpp": "second"}, "question__cake-thief__a-cake-weight-value-pair": {"javascript": "an object", "python": "a tuple", "ruby": "an array", "default": "an object", "c": "a structure", "java": "an object", "cpp": "an object"}, "question__cake-thief__hash-tables-more-overhead": {"javascript": "<span words=\"hash-tables-capitalized\">Objects</span> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\">an array</span>.", "python": "<span words=\"hash-tables-capitalized\">Dictionaries</span> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\">a list</span>.", "ruby": "<span words=\"hash-tables-capitalized\">Hashes</span> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\">an array</span>.", "default": "<span words=\"hash-tables-capitalized\"/> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\"/>.", "c": "<span words=\"hash-tables-capitalized\">Hash tables</span> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\">an array</span>.", "java": "<span words=\"hash-tables-capitalized\">Hash maps</span> are <em>built on</em> <span concept=\"array\">arrays</span>, so we can save some overhead by just using <span words=\"a-standard-list\">an array</span>.", "cpp": "We can save some overhead by just using <span words=\"a-standard-list\">a vector</span>, though."}, "question__cake-thief__why-we-use-long": {"ruby": "", "csharp": "<p>\n    (We're using <span code-inline=\"long\"/> because we're looking for a <em>max</em> value.)\n</p>", "python": "", "javascript": "", "default": "", "c": "<p>\n    (We're using <span code-inline=\"long\">long long</span> because we're looking for a <em>max</em> value.)\n</p>", "java": "<p>\n    (We're using <span code-inline=\"long\">long</span> because we're looking for a <em>max</em> value.)\n</p>", "cpp": "<p>\n    (We're using <span code-inline=\"long\">long long</span> because we're looking for a <em>max</em> value.)\n</p>"}, "question__cake-thief__second-infinity-option-advantages-and-disadvantages": {"ruby": "<p>\n    For the <strong>second option</strong> the advantage is we can create a custom behavior that we&#8212;or our function's users&#8212;could know to expect. The disadvantage is we'd <em>have</em> to explicitly check for that behavior, otherwise we might end up trying to parse the string \"infinity\" as an integer, which could give us an error or (perhaps worse) a random number. In a production system, a function that sometimes returns an integer and sometimes returns a string would probably be seen as sloppy.\n</p>", "csharp": "", "python": "<p>\n    For the <strong>second option</strong> the advantage is we can create a custom behavior that we&#8212;or our function's users&#8212;could know to expect. The disadvantage is we'd <em>have</em> to explicitly check for that behavior, otherwise we might end up trying to parse the string \"infinity\" as an integer, which could give us an error or (perhaps worse) a random number. In a production system, a function that sometimes returns an integer and sometimes returns a string would probably be seen as sloppy.\n</p>", "javascript": "<p>\n    For the <strong>second option</strong> the advantage is we can create a custom behavior that we&#8212;or our function's users&#8212;could know to expect. The disadvantage is we'd <em>have</em> to explicitly check for that behavior, otherwise we might end up trying to parse the string \"infinity\" as an integer, which could give us an error or (perhaps worse) a random number. In a production system, a function that sometimes returns an integer and sometimes returns a string would probably be seen as sloppy.\n</p>", "default": "<p>\n    For the <strong>second option</strong> the advantage is we can create a custom behavior that we&#8212;or our function's users&#8212;could know to expect. The disadvantage is we'd <em>have</em> to explicitly check for that behavior, otherwise we might end up trying to parse the string \"infinity\" as an integer, which could give us an error or (perhaps worse) a random number. In a production system, a function that sometimes returns an integer and sometimes returns a string would probably be seen as sloppy.\n</p>", "c": "", "java": "", "cpp": ""}, "question__cake-thief__a-standard-list": {"javascript": "an array", "python": "a list", "default": "a list", "php": "an array", "ruby": "an array", "swift": "an array", "cpp": "a vector", "objectivec": "an array", "csharp": "a list", "c": "an array", "java": "an array"}, "question__cake-thief__cake-weight-value-pair": {"javascript": "object", "python": "tuple", "ruby": "array", "default": "object", "c": "structure", "java": "object", "cpp": "object"}, "question__cake-thief__any-capitalized": {"ruby": "Any", "csharp": "Either", "python": "Any", "javascript": "Any", "default": "Any", "c": "Either", "java": "Either", "cpp": "Either"}, "question__cake-thief__last-option": {"ruby": "third option", "csharp": "second option", "python": "third option", "javascript": "third option", "default": "third option", "c": "second option", "java": "second option", "cpp": "second option"}, "question__cake-thief__hash-tables-capitalized": {"javascript": "Objects", "python": "Dictionaries", "ruby": "Hashes", "c": "Hash tables", "java": "Hash maps", "cpp": "Unordered maps", "csharp": "Dictionaries"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/cake-thief" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/cake-thief" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/cake-thief&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/cake-thief" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/cake-thief" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/cake-thief&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./16.The Cake Thief _ Interview Cake_files/jquery.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./16.The Cake Thief _ Interview Cake_files/underscore-min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/angular-seo.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./16.The Cake Thief _ Interview Cake_files/base.js"></script>

    
    <script src="./16.The Cake Thief _ Interview Cake_files/prism.min.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/codemirror.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/python.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/ruby.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/javascript.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/clike.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/php.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/haskell.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./16.The Cake Thief _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./16.The Cake Thief _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./16.The Cake Thief _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="f39caf1e800a694" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" src="./16.The Cake Thief _ Interview Cake_files/ping.html" style="display: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./16.The Cake Thief _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="GUnifzCfB7ZOD5j1wNWneYhsjdfxeasxdtMExEN97Ghvsav7UibGLHFaE2v0soGM">
<div id="loading">
. . .
</div>


<link href="./16.The Cake Thief _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default53115_provider" id="stripeXDM_default53115_provider" src="./16.The Cake Thief _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./16.The Cake Thief _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket97679" src="./16.The Cake Thief _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>