<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0084)https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/visits"></script><script type="text/javascript" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/track"></script><script type="text/javascript" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":377}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/kth-to-last-node-in-singly-linked-list">
        <meta name="description" content="Find the kth to last node in a singly-linked list. We&#39;ll start with a simple solution and move on to some clever tricks.">

        

        <meta property="og:title" content="Kth to Last Node in a Singly-Linked List | Interview Cake">
        <meta property="og:description" content="Find the kth to last node in a singly-linked list. We&#39;ll start with a simple solution and move on to some clever tricks.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/kth-to-last-node-in-singly-linked-list">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Kth to Last Node in a Singly-Linked List | Interview Cake">
        <meta name="twitter:description" content="Find the kth to last node in a singly-linked list. We&#39;ll start with a simple solution and move on to some clever tricks.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Kth to Last Node in a Singly-Linked List | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place" aria-describedby="tooltip413675">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip413675" style="top: 92px; left: 931.125px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Reverse String in Place</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;kth-to-last-node-in-singly-linked-list&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Kth to Last Node in a Singly-Linked List" data-meta_desc="Find the kth to last node in a singly-linked list. We&#39;ll start with a simple solution and move on to some clever tricks." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="3" data-num-hints="9" data-num-gotchas="2" ng-init="setNumHints(9); setNumGotchas(2); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You have a <span concept="linked-list" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">linked list</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>linked list</strong> is a low-level data structure. It stores an <em>ordered</em> list of items in individual "node" objects that have pointers to other nodes.
</p>

<p>
In a <strong>singly linked list</strong>, the nodes each have one pointer to the next node.
</p>

<div code-block="concept__linked-list__singly-linked-node-class" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">LinkedListNode</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>next  <span class="token operator">=</span> None</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So we could build a singly linked list like this:
</p>

<div code-block="concept__linked-list__singly-linked-nodes" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">a <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>

a<span class="token punctuation">.</span>next <span class="token operator">=</span> b
b<span class="token punctuation">.</span>next <span class="token operator">=</span> c</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<div class="diagram">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/linked_list__nodes_and_pointers.svg" height="115" width="455" alt="A singly-linked list with 3 nodes. The first node has value 5 and an arrow pointing to the second node, which has value 1 and an arrow pointing to the third node, which has value 9 and and arrow pointing to &quot;None.&quot;">


    
</div>


<p>
In a linked list, the first node is called the <strong>head</strong> and the last node is called the <strong>tail</strong>.
</p>

<div class="diagram">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/linked_list__nodes_and_pointers_labeled_head_and_tail.svg" height="140" width="455" alt="A linked list with 3 nodes. The first node is labelled &quot;head&quot; and the last node is labelled &quot;tail.&quot;">


    
</div>


<p>
Often, our only connection to <em>the list itself</em> is a variable pointing to the head. From there we can walk down the list to all the other nodes.
</p>

<p>
Like linked lists, <strong>arrays</strong> also store ordered lists of items, so you usually have a choice of which one to use.
</p>

<p>
<strong>
Advantages of linked lists:
</strong>
</p>
<ol>
<li>
Linked lists have <strong>constant-time insertions and deletions</strong> in any position (you just change some pointers). Arrays require <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time to do the same thing, because you'd have to "shift" all the subsequent items over 1 index.
</li>
<li>
Linked lists can <strong>continue to expand</strong> as long as there is space on the machine. Arrays (in low-level languages) must have their size specified ahead of time. Even in languages with "dynamic arrays" that automatically resize themselves when they run out of space (like Python, Ruby and JavaScript), the operation to resize a dynamic array has a large cost which can make a single insertion unexpectedly expensive.
</li>
</ol>

<p>
<strong>
Disadvantages of linked lists:
</strong>
</p>
<ol>
<li>
To access or edit an item in a linked list, you have to <strong>take <span complexity="i" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span></span></span></span> time to walk from the head of the list to the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th item</strong> (unless of course you already have a pointer directly to that item). Arrays have <em>constant-time</em> lookups and edits to the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th item.
</li>
</ol>

<p>
Another type of linked list is a <strong>doubly linked list</strong>, which has pointers to the next <em>and the previous</em> nodes.
</p>

<div code-block="concept__linked-list__doubly-linked-node-class" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">LinkedListNode</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value    <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>next     <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>previous <span class="token operator">=</span> None</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So we could build a doubly linked list like this:
</p>

<div code-block="concept__linked-list__doubly-linked-nodes" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">a <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># put b after a</span>
a<span class="token punctuation">.</span>next <span class="token operator">=</span> b
b<span class="token punctuation">.</span>previous <span class="token operator">=</span> a

<span class="token comment" spellcheck="true"># put c after b</span>
b<span class="token punctuation">.</span>next <span class="token operator">=</span> c
c<span class="token punctuation">.</span>previous <span class="token operator">=</span> b</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<div class="diagram">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/linked_list__doubly_linked_nodes_and_pointers.svg" height="145" width="455" alt="A doubly-linked list with 3 nodes. The first node has value 5 with a &quot;next&quot; arrow pointing ahead to the second node and a &quot;previous&quot; arrow pointing back to &quot;None.&quot; The second node has value 1 with a &quot;next&quot; arrow pointing ahead to the third node and a &quot;previous&quot; arrow pointing bacl to the first node. The third node has value 9 with a &quot;next&quot; arrow pointing ahead to &quot;None&quot; and a &quot;previous&quot; arrow pointing back to the second node.">


    
</div>


<p>
Doubly linked lists allow us to traverse our list <em>backwards</em>. In a <em>singly</em> linked list, if you just had a pointer to a node in the <em>middle</em> of a list, there would be <em>no way</em> to know what its previous node was. Not a problem in a doubly linked list.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__linked-list__singly-linked-node-class": {"python": {"code": "class LinkedListNode:\n\n    def __init__(self, value):\n        self.value = value\n        self.next  = None", "tests": "test_single()"}, "cpp": "class LinkedListNode \n{\npublic:\n    int value_;\n    LinkedListNode* next_;\n\n    LinkedListNode(int value) :\n        value_(value),\n        next_(nullptr)\n    {\n    }\n};", "c": "typedef struct LinkedListNode {\n    int value;\n    LinkedListNode *next;\n} LinkedListNode;\n\nLinkedListNode *linkedListNodeNew(int value) {\n    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));\n\n    assert(newNode != NULL);\n    newNode->value = value;\n    newNode->next = NULL;\n\n    return newNode;\n}", "ruby": {"code": "class LinkedListNode\n\n    attr_accessor :value, :next\n\n    def initialize(value)\n        @value = value\n        @next  = nil\n    end\nend", "tests": "test_single()"}, "javascript": "function LinkedListNode(value) {\n    this.value = value;\n    this.next = null;\n}", "java": "public static class LinkedListNode {\n\n    public int value;\n    public LinkedListNode next;\n\n    public LinkedListNode(int value) {\n        this.value = value;\n    }\n}"}, "concept__linked-list__singly-linked-nodes": {"python": "a = LinkedListNode(5)\nb = LinkedListNode(1)\nc = LinkedListNode(9)\n\na.next = b\nb.next = c", "cpp": "LinkedListNode* a = new LinkedListNode(5);\nLinkedListNode* b = new LinkedListNode(1);\nLinkedListNode* c = new LinkedListNode(9);\n\na->next = b;\nb->next = c;", "c": "LinkedListNode* a = linkedListNodeNew(5);\nLinkedListNode* b = linkedListNodeNew(1);\nLinkedListNode* c = linkedListNodeNew(9);\n\na->next = b;\nb->next = c;", "ruby": "a = LinkedListNode.new(5)\nb = LinkedListNode.new(1)\nc = LinkedListNode.new(9)\n\na.next = b\nb.next = c", "javascript": "var a = new LinkedListNode(5);\nvar b = new LinkedListNode(1);\nvar c = new LinkedListNode(9);\n\na.next = b;\nb.next = c;", "java": "LinkedlistNode a = new LinkedListNode(5);\nLinkedlistNode b = new LinkedListNode(1);\nLinkedlistNode c = new LinkedListNode(9);\n\na.next = b;\nb.next = c;"}, "setup": {"python": "def test_single():\n    a = LinkedListNode(7)\n    b = LinkedListNode(4)\n    a.next = b\n    assertEqual(a.value, 7)\n    assertEqual(a.next.value, 4)\n\ndef test_double():\n    a = LinkedListNode(7)\n    b = LinkedListNode(4)\n    c = LinkedListNode(3)\n    d = LinkedListNode(1)\n\n    a.next = b\n\n    b.previous = a\n    b.next = c\n\n    c.previous = b\n    c.next = d\n\n    d.previous = c\n\n    assertEqual(c.next.value, 1, 'assigns next')\n    assertEqual(c.previous.value, 4, 'assigns previous')", "javascript": "function testSingle() {\n    var b = new LinkedListNode(4);\n    var a = new LinkedListNode(7);\n    a.next = b;\n    assertEqual(a.value, 7);\n    assertEqual(a.next.value, 4);\n}\n\nfunction testDouble() {\n    var a = new LinkedListNode(7);\n    var b = new LinkedListNode(4);\n    var c = new LinkedListNode(3);\n    var d = new LinkedListNode(1);\n\n    a.next = b;\n\n    b.previous = a;\n    b.next = c;\n\n    c.previous = b;\n    c.next = d;\n\n    d.previous = c;\n\n    assertEqual(c.next.value, 1, 'assigns next');\n    assertEqual(c.previous.value, 4, 'assigns previous');\n}", "ruby": "def test_single\n    b = LinkedListNode.new(4)\n    a = LinkedListNode.new(7)\n    a.next = b\n    assertEqual(a.value, 7)\n    assertEqual(a.next.value, 4)\nend\n\ndef test_double\n    a = LinkedListNode.new(7)\n    b = LinkedListNode.new(4)\n    c = LinkedListNode.new(3)\n    d = LinkedListNode.new(1)\n\n    a.next = b\n\n    b.previous = a\n    b.next = c\n\n    c.previous = b\n    c.next = d\n\n    d.previous = c\n\n    assertEqual(c.next.value, 1, 'assigns next')\n    assertEqual(c.previous.value, 4, 'assigns previous')\nend"}, "concept__linked-list__doubly-linked-node-class": {"python": {"code": "class LinkedListNode:\n\n    def __init__(self, value):\n        self.value    = value\n        self.next     = None\n        self.previous = None", "tests": "test_single()\ntest_double()"}, "cpp": "class LinkedListNode \n{\npublic:\n    int value_;\n    LinkedListNode* next_;\n    LinkedListNode* previous_;\n\n    LinkedListNode(int value) :\n        value_(value),\n        next_(nullptr),\n        previous_(nullptr)\n    {\n    }\n};", "c": "typedef struct LinkedListNode {\n    int value;\n    LinkedListNode *next;\n    LinkedListNode *previous;\n} LinkedListNode;\n\nLinkedListNode *linkedListNodeNew(int value) {\n    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));\n\n    assert(newNode != NULL);\n    newNode->value = value;\n    newNode->next = NULL;\n    newNode->previous = NULL;\n\n    return newNode;\n}", "ruby": {"code": "class LinkedListNode\n\n    attr_accessor :value, :next, :previous\n\n    def initialize(value)\n        @value    = value\n        @next     = nil\n        @previous = nil\n    end\nend", "tests": "test_single()\ntest_double()"}, "javascript": "function LinkedListNode(value) {\n    this.value = value;\n    this.next = null;\n    this.previous = null;\n}", "java": "public static class LinkedListNode {\n\n    public int value;\n    public LinkedListNode next;\n    public LinkedListNode previous;\n\n    public LinkedListNode(int value) {\n        this.value = value;\n    }\n}"}, "concept__linked-list__doubly-linked-nodes": {"python": "a = LinkedListNode(5)\nb = LinkedListNode(1)\nc = LinkedListNode(9)\n\n# put b after a\na.next = b\nb.previous = a\n\n# put c after b\nb.next = c\nc.previous = b", "cpp": "LinkedListNode* a = new LinkedListNode(5);\nLinkedListNode* b = new LinkedListNode(1);\nLinkedListNode* c = new LinkedListNode(9);\n\n// put b after a\na->next = b;\nb->previous = a;\n\n// put c after b\nb->next = c;\nc->previous = b;", "c": "LinkedListNode* a = linkedListNodeNew(5);\nLinkedListNode* b = linkedListNodeNew(1);\nLinkedListNode* c = linkedListNodeNew(9);\n\n// put b after a\na->next = b;\nb->previous = a;\n\n// put c after b\nb->next = c;\nc->previous = b;", "ruby": "a = LinkedListNode.new(5)\nb = LinkedListNode.new(1)\nc = LinkedListNode.new(9)\n\n# put b after a\na.next = b\nb.previous = a\n\n# put c after b\nb.next = c\nc.previous = b", "javascript": "var a = new LinkedListNode(5);\nvar b = new LinkedListNode(1);\nvar c = new LinkedListNode(9);\n\n// put b after a\na.next = b;\nb.previous = a;\n\n// put c after b\nb.next = c;\nc.previous = b;", "java": "LinkedListNode a = new LinkedListNode(5);\nLinkedListNode b = new LinkedListNode(1);\nLinkedListNode c = new LinkedListNode(9);\n\n// put b after a\na.next = b;\nb.previous = a;\n\n// put c after b\nb.next = c;\nc.previous = b;"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> and want to find the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node.
</strong>
</p>
<p class="ng-scope">
Write a function <span class="ic-function ng-isolate-scope" func="question__kth-to-last-node-in-singly-linked-list__kth-to-last-node"><span class="name" ng-transclude=""><span class="ng-scope">kth_to_last_node</span></span>()</span> that takes an integer <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> and the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__head-node"><span class="ng-scope">head_node</span></span> of a singly linked list, and returns the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node in the list.
</p>
<p class="ng-scope">
For example:
</p>
<div code-block="question__kth-to-last-node-in-singly-linked-list__example-input-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope" style="width: 100%;"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">LinkedListNode</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>next  <span class="token operator">=</span> None

a <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token string">"Angel Food"</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token string">"Bundt"</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token string">"Cheese"</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token string">"Devil's Food"</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token string">"Eccles"</span><span class="token punctuation">)</span>

a<span class="token punctuation">.</span>next <span class="token operator">=</span> b
b<span class="token punctuation">.</span>next <span class="token operator">=</span> c
c<span class="token punctuation">.</span>next <span class="token operator">=</span> d
d<span class="token punctuation">.</span>next <span class="token operator">=</span> e

kth_to_last_node<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># returns the node with value "Devil's Food" (the 2nd to last node)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space. If you're recursing, you're probably taking <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space on the <span concept="call-stack" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">call stack</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>call stack</strong> is what a program uses to keep track of what function it's currently running and what to do with that function's return value.
</p>

<p>
Whenever you call a function, a new <strong>frame</strong> gets pushed onto the call stack, which is popped off when the function returns. As functions call other functions, the stack gets taller. In recursive functions, the stack can get as tall as the number of times the function calls itself. This can cause a problem: the stack has a limited amount of space, and if it gets too big you can get a <strong>stack overflow</strong> error.
</p>

<!-- #illustrate -->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>!
</p>
</div>
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
It might be tempting to iterate through the list until we reach the end and then walk backwards <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> nodes.
</p>
<p class="ng-scope">
But we have a <em>singly</em> linked list! We can’t go backwards. What else can we do?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we had the <em>length</em> of the list?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Then we could calculate how far to walk, starting from the head, to reach the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node.
</p>

<p class="ng-scope">
If the list has <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> nodes:
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__n_node_list.svg" height="62" width="274" alt="A linked list represented by cirlces and arrows, with the distance from the first to the last node labelled n.">


    
</div>


<p class="ng-scope">
And our target is the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node:
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__k_from_end.svg" height="126" width="274" alt="A linked list represented by cirlces and arrows, with the distance from the first to the last node labelled n. The third-to-last node is the kth to last node, with its distance to the last node labelled k.">


    
</div>


<p class="ng-scope">
The distance from the head to the target is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.77777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>:
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__n_minus_k_from_start.svg" height="126" width="274" alt="A linked list represented by cirlces and arrows, with the distance from the first to the last node labelled n. The third-to-last node is the kth to last node, with its distance to the last node labelled k and its distance to the first node labelled n minus k.">


    
</div>


<p class="ng-scope">
Well, we <em>don't</em> know the length of the list (<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>). But can we <em>figure it out?</em>
</p>

<!--
<p>
Then we&#8217;d know <em>exactly</em> how many nodes to go ahead before stopping. Simply subtract <span math>k</span> from the length of the list. <strong>Can we get the length of the list?</strong>
</p>
-->
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
Yes, we could iterate from the head to the tail and count the nodes!
</p>

<p class="ng-scope">
Can you implement this approach in code?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">

<div code-block="question__kth-to-last-node-in-singly-linked-list__whole-list-first" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">kth_to_last_node</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># STEP 1: get the length of the list</span>
    <span class="token comment" spellcheck="true"># start at 1, not 0</span>
    <span class="token comment" spellcheck="true"># else we'd fail to count the head node!</span>
    list_length <span class="token operator">=</span> <span class="token number">1</span>
    current_node <span class="token operator">=</span> head

    <span class="token comment" spellcheck="true"># traverse the whole list,</span>
    <span class="token comment" spellcheck="true"># counting all the nodes</span>
    <span class="token keyword">while</span> current_node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
        current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>next
        list_length <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># STEP 2: walk to the target node</span>
    <span class="token comment" spellcheck="true"># calculate how far to go, from the head,</span>
    <span class="token comment" spellcheck="true"># to get to the kth to last node</span>
    how_far_to_go <span class="token operator">=</span> list_length <span class="token operator">-</span> k

    current_node <span class="token operator">=</span> head
    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>how_far_to_go<span class="token punctuation">)</span><span class="token punctuation">:</span>
        current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>next

    <span class="token keyword">return</span> current_node</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
What are our time and space costs?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the list.
</p>

<p class="ng-scope">
More precisely, it takes <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps to get the length of the list, and another <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.77777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> steps to reach the target node. In the worst case <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="mrel">=</span><span class="mord">0</span></span></span></span></span>, so we have to walk all the way from head to tail <em>again</em> to reach the target node. This is a total of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span><span class="mord mathit">n</span></span></span></span></span> steps, which is <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>.
</p>


<p class="ng-scope">
Can we do better?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Mmmmaaaaaaybe.
</p>

<p class="ng-scope">
The fact that we walk through our whole list once just to get the length, then walk through the list <em>again</em> to get to the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last element sounds like a lot of work. Perhaps we can do this in just one pass?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we had like a "stick" that was <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> nodes wide. We could start it at the beginning of the list, so that the left side of the stick was on the head and the right side was on the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th node.
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__stick_at_start.svg" height="80" width="274" alt="A linked list represented by cirlces and arrows. The third node is labelled &quot;kth,&quot; and a linear &quot;stick&quot; k nodes long extends from above the first node to above the kth node.">


    
</div>


<p class="ng-scope">
Then we could slide the stick down the list...
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__stick_shifted.svg" height="80" width="274" alt="A linked list represented by cirlces and arrows. The third node is labelled &quot;kth,&quot; and a linear &quot;stick&quot; k nodes long extends from above the second node to above the fourth node.">


    
</div>


<p class="ng-scope">
until the right side hit the end. At that point, the left side of the stick would be on the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node!
</p>

<div class="diagram ng-scope">
    <img src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/kth_last_node__stick_at_end.svg" height="93" width="274" alt="A linked list represented by cirlces and arrows. The third-to-last node is labelled &quot;kth to last,&quot; and a linear &quot;stick&quot; k nodes long extends from above the kth-to-last node to above the last node.">


    
</div>


<p class="ng-scope">
How can we implement this? Maybe it'll help to keep <em>two</em> pointers?
</p>



</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can allocate two variables that'll be references to the nodes at the left and right sides of the "stick"!
</p>

<div code-block="question__kth-to-last-node-in-singly-linked-list__stick" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">kth_to_last_node</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>

    left_node  <span class="token operator">=</span> head
    right_node <span class="token operator">=</span> head

    <span class="token comment" spellcheck="true"># move right_node to the kth node</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        right_node <span class="token operator">=</span> right_node<span class="token punctuation">.</span>next

    <span class="token comment" spellcheck="true"># starting with left_node on the head,</span>
    <span class="token comment" spellcheck="true"># move left_node and right_node down the list,</span>
    <span class="token comment" spellcheck="true"># maintaining a distance of k between them,</span>
    <span class="token comment" spellcheck="true"># until right_node hits the end of the list</span>
    <span class="token keyword">while</span> right_node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
        left_node  <span class="token operator">=</span> left_node<span class="token punctuation">.</span>next
        right_node <span class="token operator">=</span> right_node<span class="token punctuation">.</span>next

    <span class="token comment" spellcheck="true"># since left_node is k nodes behind right_node,</span>
    <span class="token comment" spellcheck="true"># left_node is now the kth to last node!</span>
    <span class="token keyword">return</span> left_node</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
This'll work, but <strong>does it actually save us any time</strong>?
</p>
</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We can think of this two ways.
</p>


<p class="ng-scope">
<strong>
First approach: use the length of the list.
</strong>
</p>

<ol class="ng-scope">
<li>
walk down the whole list, counting nodes, to get the total <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__list-length"><span class="ng-scope">list_length</span></span>.
</li>
<li>
subtract <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> from the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__list-length"><span class="ng-scope">list_length</span></span> to get the distance from the head node to the target node (the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__k"><span class="ng-scope">k</span></span>th to last node).
</li>
<li>
walk that distance from the head to arrive at the target node.
</li>
</ol>

<div code-block="question__kth-to-last-node-in-singly-linked-list__solution-whole-list-first" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">kth_to_last_node</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">if</span> k <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Impossible to find less than first to last node: %s'</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># STEP 1: get the length of the list</span>
    <span class="token comment" spellcheck="true"># start at 1, not 0</span>
    <span class="token comment" spellcheck="true"># else we'd fail to count the head node!</span>
    list_length <span class="token operator">=</span> <span class="token number">1</span>
    current_node <span class="token operator">=</span> head

    <span class="token comment" spellcheck="true"># traverse the whole list,</span>
    <span class="token comment" spellcheck="true"># counting all the nodes</span>
    <span class="token keyword">while</span> current_node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
        current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>next
        list_length <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># if k is greater than the length of the list, there can't</span>
    <span class="token comment" spellcheck="true"># be a kth-to-last node, so we'll return an error!</span>
    <span class="token keyword">if</span> k <span class="token operator">&gt;</span> list_length<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'k is larger than the length of the linked list: %s'</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># STEP 2: walk to the target node</span>
    <span class="token comment" spellcheck="true"># calculate how far to go, from the head,</span>
    <span class="token comment" spellcheck="true"># to get to the kth to last node</span>
    how_far_to_go <span class="token operator">=</span> list_length <span class="token operator">-</span> k

    current_node <span class="token operator">=</span> head
    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>how_far_to_go<span class="token punctuation">)</span><span class="token punctuation">:</span>
        current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>next

    <span class="token keyword">return</span> current_node</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
<strong>
Second approach: maintain a <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>-wide "block" in one walk down the list.
</strong>
</p>

<ol class="ng-scope">
<li>
Walk one pointer <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> nodes from the head. Call it <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__right-node"><span class="ng-scope">right_node</span></span>.
</li>
<li>
Put another pointer at the head. Call it <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__left-node"><span class="ng-scope">left_node</span></span>.
</li>
<li>
Walk both pointers, at the same speed, towards the tail. This keeps a distance of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> between them.
</li>
<li>
When <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__right-node"><span class="ng-scope">right_node</span></span> hits the tail, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__left-node"><span class="ng-scope">left_node</span></span> is on the target (since it's <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> nodes from the end of the list).
</li>
</ol>

<div code-block="question__kth-to-last-node-in-singly-linked-list__solution-stick" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">kth_to_last_node</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">if</span> k <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Impossible to find less than first to last node: %s'</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>

    left_node  <span class="token operator">=</span> head
    right_node <span class="token operator">=</span> head

    <span class="token comment" spellcheck="true"># move right_node to the kth node</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># but along the way, if a right_node doesn't have a next,</span>
        <span class="token comment" spellcheck="true"># then k is greater than the length of the list and there</span>
        <span class="token comment" spellcheck="true"># can't be a kth-to-last node! we'll raise an error</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> right_node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'k is larger than the length of the linked list: %s'</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>

        right_node <span class="token operator">=</span> right_node<span class="token punctuation">.</span>next

    <span class="token comment" spellcheck="true"># starting with left_node on the head,</span>
    <span class="token comment" spellcheck="true"># move left_node and right_node down the list,</span>
    <span class="token comment" spellcheck="true"># maintaining a distance of k between them,</span>
    <span class="token comment" spellcheck="true"># until right_node hits the end of the list</span>
    <span class="token keyword">while</span> right_node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
        left_node  <span class="token operator">=</span> left_node<span class="token punctuation">.</span>next
        right_node <span class="token operator">=</span> right_node<span class="token punctuation">.</span>next

    <span class="token comment" spellcheck="true"># since left_node is k nodes behind right_node,</span>
    <span class="token comment" spellcheck="true"># left_node is now the kth to last node!</span>
    <span class="token keyword">return</span> left_node</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
In either approach, make sure to check if <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__k"><span class="ng-scope">k</span></span> is greater than the length of the linked list! That's bad input, and we'll want to raise an error.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
Both approaches use <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>

<p class="ng-scope">
<strong>But the second approach is fewer steps, since it gets the answer "in one pass," right? <em>Wrong.</em></strong>
</p>


<p class="ng-scope">
In the first approach, we walk one pointer from head to tail (to get the list's length), then walk another pointer from the head node to the target node (the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>th to last node).
</p>

<p class="ng-scope">
In the second approach, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__right-node"><span class="ng-scope">right_node</span></span> <em>also</em> walks all the way from head to tail, and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__kth-to-last-node-in-singly-linked-list__left-node"><span class="ng-scope">left_node</span></span> <em>also</em> walks from the head to the target node.
</p>

<p class="ng-scope">
So in both cases we have two pointers taking the same steps through our list. The only difference is the <em>order</em> in which the steps are taken. The number of steps is the same either way.
</p>

<p class="ng-scope">
<strong>
However, the second approach <em>might</em> still be slightly <em>faster</em>, due to some caching and other optimizations that modern processors and memory have.</strong>
</p>

<p class="ng-scope">
Let's focus on caching. Usually when we grab some data from memory (for example, info about a linked list node), we also store that data in a small cache right on the processor. If we need to use that same data again soon after, we can quickly grab it from the cache. But if we don't use that data for a while, we're likely to replace it with other stuff we've used more recently (this is called a "least recently used" replacement policy).
</p>

<p class="ng-scope">
Both of our algorithms access a lot of nodes in our list twice, so they <em>could</em> exploit this caching. But notice that in our second algorithm there's a much shorter time between the first and second times that we access a given node (this is sometimes called "temporal locality of reference"). Thus it seems more likely that our second algorithm will save time by using the processor's cache! But this assumes our processor's cache uses something like a "least recently used" replacement policy—it might use something else. Ultimately the <em>best</em> way to really know which algorithm is faster is to implement both and time them on a few different inputs!
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Can we do better? What if we expect <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> to be huge and <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> to be pretty small. In this case our target node will be close to the end of the list...so it seems a waste that we have to walk all the way from the beginning <em>twice</em>.
</p>
<p class="ng-scope">
Can we trim down the number of steps in the "second trip"? One pointer will certainly have to travel all the way from head to tail in the list to get the total length...but can we store some "checkpoints" as we go so that the second pointer doesn't have to start all the way at the beginning? Can we store these "checkpoints" in constant space? Note: this approach only saves time if we know that our target node is towards the <em>end</em> of the list (in other words, <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is much larger than <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>).
</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We listed two good solutions. One seemed to solve the problem in one pass, while the other took two passes. But the single-pass approach didn't take half as many steps, it just took the <em>same</em> steps in a different <em>order</em>.
</p>

<p class="ng-scope">
So don't be fooled: "one pass" isn't always fewer steps than "two passes." Always ask yourself, "Have I actually changed the <em>number</em> of steps?"
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"question__kth-to-last-node-in-singly-linked-list__solution-stick": {"javascript": {"code": "function kthToLastNode(k, head) {\n\n    if (k &lt; 1) {\n        throw new Error('Impossible to find less than first to last node: ' + k);\n    }\n\n    var leftNode  = head;\n    var rightNode = head;\n\n    // move rightNode to the kth node\n    for (var x = 0; x &lt; k - 1; x++) {\n\n        // but along the way, if a rightNode doesn't have a next,\n        // then k is greater than the length of the list and there\n        // can't be a kth-to-last node! we'll raise an error\n        if (!rightNode.next) {\n            throw new Error('k is larger than the length of the linked list: ' + k);\n        }\n\n        rightNode = rightNode.next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.next) {\n        leftNode  = leftNode.next;\n        rightNode = rightNode.next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "test(testHead, testC, testD, true);"}, "python": {"code": "def kth_to_last_node(k, head):\n\n    if k &lt; 1:\n        raise ValueError('Impossible to find less than first to last node: %s' % k)\n\n    left_node  = head\n    right_node = head\n\n    # move right_node to the kth node\n    for _ in xrange(k - 1):\n\n        # but along the way, if a right_node doesn't have a next,\n        # then k is greater than the length of the list and there\n        # can't be a kth-to-last node! we'll raise an error\n        if not right_node.next:\n            raise ValueError('k is larger than the length of the linked list: %s' % k)\n\n        right_node = right_node.next\n\n    # starting with left_node on the head,\n    # move left_node and right_node down the list,\n    # maintaining a distance of k between them,\n    # until right_node hits the end of the list\n    while right_node.next:\n        left_node  = left_node.next\n        right_node = right_node.next\n\n    # since left_node is k nodes behind right_node,\n    # left_node is now the kth to last node!\n    return left_node", "tests": "test(test_head, test_c, test_d, True)"}, "ruby": {"code": "def kth_to_last_node(k, head)\n\n    if k &lt; 1\n        raise ArgumentError, \"Impossible to find less than first to last node: #{k}\"\n    end\n\n    left_node  = head\n    right_node = head\n\n    # move right_node to the kth node\n    (0...k - 1).each do |x|\n\n        # but along the way, if a right_node doesn't have a next,\n        # then k is greater than the length of the list and there\n        # can't be a kth-to-last node! we'll raise an error\n        if !right_node.next\n            raise ArgumentError, \"k is larger than the length of the linked list: #{k}\"\n        end\n\n        right_node = right_node.next\n    end\n\n    # starting with left_node on the head,\n    # move left_node and right_node down the list,\n    # maintaining a distance of k between them,\n    # until right_node hits the end of the list\n    while right_node.next\n        left_node  = left_node.next\n        right_node = right_node.next\n    end\n\n    # since left_node is k nodes behind right_node,\n    # left_node is now the kth to last node!\n    return left_node\nend", "tests": "test(test_head, test_c, test_d, true)"}, "c": {"code": "LinkedListNode* kthToLastNode(size_t k, LinkedListNode* head) {\n    size_t i;\n    LinkedListNode *leftNode  = head, *rightNode = head;\n\n    assert(k > 0);  // Impossible to find less than first to last node\n\n    // move rightNode to the kth node\n    for (i = 0; i &lt; k - 1; ++i) {\n\n        // but along the way, if a rightNode doesn't have a next,\n        // then k is greater than the length of the list and there\n        // can't be a kth-to-last node! we'll raise an error\n        // be a kth-to-last node, so we'll return an error!\n        assert(rightNode->next != NULL);  // k is larger than the length of the linked list\n\n        rightNode = rightNode->next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode->next) {\n        leftNode  = leftNode->next;\n        rightNode = rightNode->next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "setupTestData();\n\nASSERT(kthToLastNode(1, testHead) == testD);\nASSERT(kthToLastNode(2, testHead) == testC);\nASSERT(kthToLastNode(4, testHead) == testHead);\n\nASSERT_RAISES(kthToLastNode(5, testHead));\nASSERT_RAISES(kthToLastNode(0, testHead));\n\nfreeTestData();"}, "java": {"setup": "public class TryKZero implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(0, head);\n    }\n}\n\npublic class TryKNegative implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(-1, head);\n    }\n}\n\npublic class TryKLongerThanLength implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(5, head);\n    }\n}", "code": "public LinkedListNode kthToLastNode(int k, LinkedListNode head) {\n\n    if (k &lt; 1) {\n        throw new IllegalArgumentException(\"Impossible to find less than first to last node: \" + k);\n    }\n\n    LinkedListNode leftNode  = head;\n    LinkedListNode rightNode = head;\n\n    // move rightNode to the kth node\n    for (int x = 0; x &lt; k - 1; x++) {\n\n        // but along the way, if a rightNode doesn't have a next,\n        // then k is greater than the length of the list and there\n        // can't be a kth-to-last node! we'll raise an error\n        if (rightNode.next == null) {\n            throw new IllegalArgumentException(\"k is larger than the length of the linked list: \" + k);\n        }\n\n        rightNode = rightNode.next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.next != null) {\n        leftNode  = leftNode.next;\n        rightNode = rightNode.next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "assertEqual(t.kthToLastNode(1, testHead), testD);\nassertEqual(t.kthToLastNode(2, testHead), testC);\nassertEqual(t.kthToLastNode(4, testHead), testHead);\n\nassertRaisesError(t.new TryKLongerThanLength(), \"k is larger than the length\");\nassertRaisesError(t.new TryKZero(), \"less than first to last\");\nassertRaisesError(t.new TryKNegative(), \"less than first to last\");"}, "cpp": {"code": "LinkedListNode * kthToLastNode(size_t k, LinkedListNode* head)\n{\n\n    if (k &lt; 1) {\n        throw invalid_argument(\n                \"Impossible to find less than first to last node: \" \n                + to_string(k));\n    }\n\n    LinkedListNode* leftNode  = head;\n    LinkedListNode* rightNode = head;\n\n    // move rightNode to the kth node\n    for (size_t i = 0; i &lt; k - 1; ++i) {\n\n        // but along the way, if a rightNode doesn't have a next,\n        // then k is greater than the length of the list and there\n        // can't be a kth-to-last node! we'll raise an error\n        if (!rightNode->next_) {\n            throw invalid_argument(\n                    \"k is larger than the length of the linked list: \"\n                    + to_string(k));\n        }\n\n        rightNode = rightNode->next_;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode->next_) {\n        leftNode  = leftNode->next_;\n        rightNode = rightNode->next_;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "assertEqual(kthToLastNode(1, testHead), testD);\nassertEqual(kthToLastNode(2, testHead), testC);\nassertEqual(kthToLastNode(4, testHead), testHead);\nassertRaisesError<invalid_argument>(\"k is larger than the length\", &kthToLastNode, 5, testHead);\nassertRaisesError<invalid_argument>(\"less than first to last\", &kthToLastNode, 0, testHead);"}, "csharp": {"setup": "LinkedListNode CreateLinkedList()\n{\n    var head = new LinkedListNode(1);\n    var second = new LinkedListNode(2);\n    head.Next = second;\n    return head;\n}", "code": "public LinkedListNode KthToLastNode(int k, LinkedListNode head)\n{\n    if (k &lt; 1)\n    {\n        throw new ArgumentOutOfRangeException(nameof(k),\n            $\"Impossible to find less than first to last node: {k}\");\n    }\n\n    var leftNode  = head;\n    var rightNode = head;\n\n    // Move rightNode to the kth node\n    for (int i = 0; i &lt; k - 1; i++)\n    {\n        // But along the way, if a rightNode doesn't have a next,\n        // then k is greater than the length of the list and there\n        // can't be a kth-to-last node! we'll raise an error\n        if (rightNode.Next == null)\n        {\n            throw new ArgumentOutOfRangeException(nameof(k),\n                $\"k is larger than the length of the linked list: {k}\");\n        }\n\n        rightNode = rightNode.Next;\n    }\n\n    // Starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.Next != null)\n    {\n        leftNode  = leftNode.Next;\n        rightNode = rightNode.Next;\n    }\n\n    // Since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "SetupTestData();\n\nAssertEqual(KthToLastNode(1, testHead), testD);\nAssertEqual(KthToLastNode(2, testHead), testC);\nAssertEqual(KthToLastNode(4, testHead), testHead);\n\nAssertRaisesError(() => KthToLastNode(5, CreateLinkedList()), \"k is larger than the length\");\nAssertRaisesError(() => KthToLastNode(0, CreateLinkedList()), \"less than first to last\");\nAssertRaisesError(() => KthToLastNode(-1, CreateLinkedList()), \"less than first to last\");"}}, "question__kth-to-last-node-in-singly-linked-list__whole-list-first": {"javascript": {"code": "function kthToLastNode(k, head) {\n\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    var listLength = 1;\n    var currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode.next) {\n        currentNode = currentNode.next;\n        listLength += 1;\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    const howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (var x = 0; x &lt; howFarToGo; x++) {\n        currentNode = currentNode.next;\n    }\n\n    return currentNode;\n}", "tests": "test(testHead, testC, testD);"}, "python": {"code": "def kth_to_last_node(k, head):\n\n    # STEP 1: get the length of the list\n    # start at 1, not 0\n    # else we'd fail to count the head node!\n    list_length = 1\n    current_node = head\n\n    # traverse the whole list,\n    # counting all the nodes\n    while current_node.next:\n        current_node = current_node.next\n        list_length += 1\n\n    # STEP 2: walk to the target node\n    # calculate how far to go, from the head,\n    # to get to the kth to last node\n    how_far_to_go = list_length - k\n\n    current_node = head\n    for i in xrange(how_far_to_go):\n        current_node = current_node.next\n\n    return current_node", "tests": "test(test_head, test_c, test_d)"}, "ruby": {"code": "def kth_to_last_node(k, head)\n\n    # STEP 1: get the length of the list\n    # start at 1, not 0\n    # else we'd fail to count the head node!\n    list_length = 1\n    current_node = head\n\n    # traverse the whole list,\n    # counting all the nodes\n    while current_node.next\n        current_node = current_node.next\n        list_length += 1\n    end\n\n    # STEP 2: walk to the target node\n    # calculate how far to go, from the head,\n    # to get to the kth to last node\n    how_far_to_go = list_length - k\n\n    current_node = head\n    (0...how_far_to_go).each do |i|\n        current_node = current_node.next\n    end\n\n    return current_node\nend", "tests": "test(test_head, test_c, test_d)"}, "c": {"code": "LinkedListNode* kthToLastNode(size_t k, LinkedListNode* head) {\n    size_t i, listLength = 0;\n    LinkedListNode* currentNode = head;\n\n    // STEP 1: get the length of the list\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode != NULL) {\n        currentNode = currentNode->next;\n        ++listLength;\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    size_t howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (i = 0; i &lt; howFarToGo; ++i) {\n        currentNode = currentNode->next;\n    }\n\n    return currentNode;\n}", "tests": "setupTestData();\n\nASSERT(kthToLastNode(1, testHead) == testD);\nASSERT(kthToLastNode(2, testHead) == testC);\nASSERT(kthToLastNode(4, testHead) == testHead);\n\nfreeTestData();"}, "java": {"code": "public LinkedListNode kthToLastNode(int k, LinkedListNode head) {\n\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    int listLength = 1;\n    LinkedListNode currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode.next != null) {\n        currentNode = currentNode.next;\n        listLength += 1;\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    int howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (int x = 0; x &lt; howFarToGo; x++) {\n        currentNode = currentNode.next;\n    }\n\n    return currentNode;\n}", "tests": "assertEqual(t.kthToLastNode(1, testHead), testD);\nassertEqual(t.kthToLastNode(2, testHead), testC);\nassertEqual(t.kthToLastNode(4, testHead), testHead);"}, "cpp": {"code": "LinkedListNode * kthToLastNode(size_t k, LinkedListNode* head) \n{\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    size_t listLength = 1;\n    LinkedListNode* currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode->next_) {\n        currentNode = currentNode->next_;\n        ++listLength;\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    size_t howFarToGo = 0;\n    howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (size_t x = 0; x &lt; howFarToGo; ++x) {\n        currentNode = currentNode->next_;\n    }\n\n    return currentNode;\n}", "tests": "assertEqual(kthToLastNode(1, testHead), testD);\nassertEqual(kthToLastNode(2, testHead), testC);\nassertEqual(kthToLastNode(4, testHead), testHead);"}, "csharp": {"code": "public LinkedListNode KthToLastNode(int k, LinkedListNode head)\n{\n    // STEP 1: Get the length of the list.\n    // Start at 1, not 0\n    // else we'd fail to count the head node!\n    var listLength = 1;\n    var currentNode = head;\n\n    // Traverse the whole list,\n    // counting all the nodes\n    while (currentNode.Next != null)\n    {\n        currentNode = currentNode.Next;\n        listLength++;\n    }\n\n    // STEP 2: Walk to the target node.\n    // Calculate how far to go, from the head,\n    // to get to the kth to last node\n    var howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (int i = 0; i &lt; howFarToGo; i++)\n    {\n        currentNode = currentNode.Next;\n    }\n\n    return currentNode;\n}", "tests": "SetupTestData();\n\nAssertEqual(KthToLastNode(1, testHead), testD);\nAssertEqual(KthToLastNode(2, testHead), testC);\nAssertEqual(KthToLastNode(4, testHead), testHead);"}}, "question__kth-to-last-node-in-singly-linked-list__example-input-output": {"javascript": {"setup": "function kthToLastNode(k, head) {\n}", "code": "function LinkedListNode(value) {\n    this.value = value;\n    this.next = null;\n}\n\nvar a = new LinkedListNode(\"Angel Food\");\nvar b = new LinkedListNode(\"Bundt\");\nvar c = new LinkedListNode(\"Cheese\");\nvar d = new LinkedListNode(\"Devil's Food\");\nvar e = new LinkedListNode(\"Eccles\");\n\na.next = b;\nb.next = c;\nc.next = d;\nd.next = e;\n\nkthToLastNode(2, a);\n// returns the node with value \"Devil's Food\" (the 2nd to last node)", "tests": "assertEqual(a.value, \"Angel Food\");\nassertEqual(a.next.value, \"Bundt\");"}, "python": {"setup": "def kth_to_last_node(k, head):\n    pass", "code": "class LinkedListNode:\n\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\n\na = LinkedListNode(\"Angel Food\")\nb = LinkedListNode(\"Bundt\")\nc = LinkedListNode(\"Cheese\")\nd = LinkedListNode(\"Devil's Food\")\ne = LinkedListNode(\"Eccles\")\n\na.next = b\nb.next = c\nc.next = d\nd.next = e\n\nkth_to_last_node(2, a)\n# returns the node with value \"Devil's Food\" (the 2nd to last node)", "tests": "assert a.value == \"Angel Food\"\nassert a.next.value == \"Bundt\""}, "ruby": {"setup": "def kth_to_last_node(k, head)\nend", "code": "class LinkedListNode\n\n    attr_accessor :value, :next\n\n    def initialize(value)\n        @value = value\n        @next  = nil\n    end\nend\n\na = LinkedListNode.new(\"Angel Food\")\nb = LinkedListNode.new(\"Bundt\")\nc = LinkedListNode.new(\"Cheese\")\nd = LinkedListNode.new(\"Devil's Food\")\ne = LinkedListNode.new(\"Eccles\")\n\na.next = b\nb.next = c\nc.next = d\nd.next = e\n\nkth_to_last_node(2, a)\n# returns the node with value \"Devil's Food\" (the 2nd to last node)", "tests": "assert a.value == \"Angel Food\"\nassert a.next.value == \"Bundt\""}, "c": "typedef struct LinkedListNode {\n    int value;\n    struct LinkedListNode *next;\n} LinkedListNode;\n\nLinkedListNode * newLinkedListNode(int value) {\n    LinkedListNode *node = malloc(sizeof(LinkedListNode));\n    assert(node != NULL);\n    node->value = value;\n    node->next = NULL;\n    return node;\n}\n\nvoid freeLinkedListNode(LinkedListNode *node) {\n    free(node);\n}\n\nLinkedListNode* a = newLinkedListNode(1);\nLinkedListNode* b = newLinkedListNode(2);\nLinkedListNode* c = newLinkedListNode(3);\nLinkedListNode* d = newLinkedListNode(4);\nLinkedListNode* e = newLinkedListNode(5);\n\na->next = b;\nb->next = c;\nc->next = d;\nd->next = e;\n\nkthToLastNode(2, a);\n// returns the node with value 4 (the 2nd to last node)", "java": "public static class LinkedListNode {\n\n    public String value;\n    public LinkedListNode next;\n\n    public LinkedListNode(String value) {\n        this.value = value;\n    }\n}\n\nLinkedListNode a = new LinkedListNode(\"Angel Food\");\nLinkedListNode b = new LinkedListNode(\"Bundt\");\nLinkedListNode c = new LinkedListNode(\"Cheese\");\nLinkedListNode d = new LinkedListNode(\"Devil's Food\");\nLinkedListNode e = new LinkedListNode(\"Eccles\");\n\na.next = b;\nb.next = c;\nc.next = d;\nd.next = e;\n\nkthToLastNode(2, a);\n// returns the node with value \"Devil's Food\" (the 2nd to last node)", "cpp": "class LinkedListNode\n{\npublic:\n    int intValue_;\n    LinkedListNode* next_;\n\n    LinkedListNode(int intValue) :\n        intValue_(intValue),\n        next_(nullptr)\n    {\n    }\n};\n\nLinkedListNode* a = new LinkedListNode(1);\nLinkedListNode* b = new LinkedListNode(2);\nLinkedListNode* c = new LinkedListNode(3);\nLinkedListNode* d = new LinkedListNode(4);\nLinkedListNode* e = new LinkedListNode(5);\n\na->next = b;\nb->next = c;\nc->next = d;\nd->next = e;\n\nkthToLastNode(2, a);\n// returns the node with value 4 (the 2nd to last node)", "csharp": "public class LinkedListNode\n{\n    public int Value { get; set; }\n    public LinkedListNode Next { get; set; }\n\n    public LinkedListNode(int value)\n    {\n        this.Value = value;\n    }\n}\n\nvar a = new LinkedListNode(1);\nvar b = new LinkedListNode(2);\nvar c = new LinkedListNode(3);\nvar d = new LinkedListNode(4);\nvar e = new LinkedListNode(5);\n\na.Next = b;\nb.Next = c;\nc.Next = d;\nd.Next = e;\n\n// Returns the node with value 4 (the 2nd to last node)\nvar node = KthToLastNode(2, a);"}, "question__kth-to-last-node-in-singly-linked-list__solution-whole-list-first": {"javascript": {"code": "function kthToLastNode(k, head) {\n\n    if (k &lt; 1) {\n        throw new Error('Impossible to find less than first to last node: ' + k);\n    }\n\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    var listLength = 1;\n    var currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode.next) {\n        currentNode = currentNode.next;\n        listLength += 1;\n    }\n\n    // if k is greater than the length of the list, there can't\n    // be a kth-to-last node, so we'll return an error!\n    if (k > listLength) {\n        throw new Error('k is larger than the length of the linked list: ' + k);\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    var howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (var x = 0; x &lt; howFarToGo; x++) {\n        currentNode = currentNode.next;\n    }\n\n    return currentNode;\n}", "tests": "test(testHead, testC, testD, true);"}, "python": {"code": "def kth_to_last_node(k, head):\n\n    if k &lt; 1:\n        raise ValueError('Impossible to find less than first to last node: %s' % k)\n\n    # STEP 1: get the length of the list\n    # start at 1, not 0\n    # else we'd fail to count the head node!\n    list_length = 1\n    current_node = head\n\n    # traverse the whole list,\n    # counting all the nodes\n    while current_node.next:\n        current_node = current_node.next\n        list_length += 1\n\n    # if k is greater than the length of the list, there can't\n    # be a kth-to-last node, so we'll return an error!\n    if k > list_length:\n        raise ValueError('k is larger than the length of the linked list: %s' % k)\n\n    # STEP 2: walk to the target node\n    # calculate how far to go, from the head,\n    # to get to the kth to last node\n    how_far_to_go = list_length - k\n\n    current_node = head\n    for i in xrange(how_far_to_go):\n        current_node = current_node.next\n\n    return current_node", "tests": "test(test_head, test_c, test_d, True)"}, "ruby": {"code": "def kth_to_last_node(k, head)\n\n    if k &lt; 1\n        raise ArgumentError, \"Impossible to find less than first to last node: #{k}\"\n    end\n\n    # STEP 1: get the length of the list\n    # start at 1, not 0\n    # else we'd fail to count the head node!\n    list_length = 1\n    current_node = head\n\n    # traverse the whole list,\n    # counting all the nodes\n    while current_node.next\n        current_node = current_node.next\n        list_length += 1\n    end\n\n    # if k is greater than the length of the list, there can't\n    # be a kth-to-last node, so we'll return an error!\n    if k > list_length\n        raise ArgumentError, \"k is larger than the length of the linked list: #{k}\"\n    end\n\n    # STEP 2: walk to the target node\n    # calculate how far to go, from the head,\n    # to get to the kth to last node\n    how_far_to_go = list_length - k\n\n    current_node = head\n    (0...how_far_to_go).each do |i|\n        current_node = current_node.next\n    end\n\n    return current_node\nend", "tests": "test(test_head, test_c, test_d, true)"}, "c": {"code": "LinkedListNode* kthToLastNode(size_t k, LinkedListNode* head) {\n    size_t i, listLength = 0;\n    LinkedListNode* currentNode = head;\n\n    assert(k > 0);  // Impossible to find less than first to last node\n\n    // STEP 1: get the length of the list\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode != NULL) {\n        currentNode = currentNode->next;\n        ++listLength;\n    }\n\n    // if k is greater than the length of the list, there can't\n    // be a kth-to-last node, so we'll return an error!\n    assert(k &lt;= listLength);  // k is larger than the length of the linked list\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    size_t howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (i = 0; i &lt; howFarToGo; ++i) {\n        currentNode = currentNode->next;\n    }\n\n    return currentNode;\n}", "tests": "setupTestData();\n\nASSERT(kthToLastNode(1, testHead) == testD);\nASSERT(kthToLastNode(2, testHead) == testC);\nASSERT(kthToLastNode(4, testHead) == testHead);\n\nASSERT_RAISES(kthToLastNode(5, testHead));\nASSERT_RAISES(kthToLastNode(0, testHead));\n\nfreeTestData();"}, "java": {"setup": "public class TryKZero implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(0, head);\n    }\n}\n\npublic class TryKNegative implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(-1, head);\n    }\n}\n\npublic class TryKLongerThanLength implements VoidFunctionToTest {\n    public void call() {\n        LinkedListNode head = new LinkedListNode(\"A\");\n        LinkedListNode second = new LinkedListNode(\"B\");\n        head.next = second;\n        t.kthToLastNode(5, head);\n    }\n}", "code": "public LinkedListNode kthToLastNode(int k, LinkedListNode head) {\n\n    if (k &lt; 1) {\n        throw new IllegalArgumentException(\"Impossible to find less than first to last node: \" + k);\n    }\n\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    int listLength = 1;\n    LinkedListNode currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode.next != null) {\n        currentNode = currentNode.next;\n        listLength += 1;\n    }\n\n    // if k is greater than the length of the list, there can't\n    // be a kth-to-last node, so we'll return an error!\n    if (k > listLength) {\n        throw new IllegalArgumentException(\"k is larger than the length of the linked list: \" + k);\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    int howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (int x = 0; x &lt; howFarToGo; x++) {\n        currentNode = currentNode.next;\n    }\n\n    return currentNode;\n}", "tests": "assertEqual(t.kthToLastNode(1, testHead), testD);\nassertEqual(t.kthToLastNode(2, testHead), testC);\nassertEqual(t.kthToLastNode(4, testHead), testHead);\n\nassertRaisesError(t.new TryKLongerThanLength(), \"k is larger than the length\");\nassertRaisesError(t.new TryKZero(), \"less than first to last\");\nassertRaisesError(t.new TryKNegative(), \"less than first to last\");"}, "cpp": {"code": "LinkedListNode * kthToLastNode(size_t k, LinkedListNode* head)\n{\n    if (k &lt; 1) {\n        throw invalid_argument(\n                \"Impossible to find less than first to last node: \"\n                + to_string(k));\n    }\n\n    // STEP 1: get the length of the list\n    // start at 1, not 0\n    // else we'd fail to count the head node!\n    size_t listLength = 1;\n    LinkedListNode* currentNode = head;\n\n    // traverse the whole list,\n    // counting all the nodes\n    while (currentNode->next_) {\n        currentNode = currentNode->next_;\n        ++listLength;\n    }\n\n    // if k is greater than the length of the list, there can't\n    // be a kth-to-last node, so we'll return an error!\n    if (k > listLength) {\n        throw invalid_argument(\n                \"k is larger than the length of the linked list: \"\n                + to_string(k));\n    }\n\n    // STEP 2: walk to the target node\n    // calculate how far to go, from the head,\n    // to get to the kth to last node\n    size_t howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (size_t x = 0; x &lt; howFarToGo; ++x) {\n        currentNode = currentNode->next_;\n    }\n\n    return currentNode;\n}", "tests": "assertEqual(kthToLastNode(1, testHead), testD);\nassertEqual(kthToLastNode(2, testHead), testC);\nassertEqual(kthToLastNode(4, testHead), testHead);\n\nassertRaisesError<invalid_argument>(\"k is larger than the length\", &kthToLastNode, 5, testHead);\nassertRaisesError<invalid_argument>(\"less than first to last\", &kthToLastNode, 0, testHead);"}, "csharp": {"setup": "LinkedListNode CreateLinkedList()\n{\n    var head = new LinkedListNode(1);\n    var second = new LinkedListNode(2);\n    head.Next = second;\n    return head;\n}", "code": "public LinkedListNode KthToLastNode(int k, LinkedListNode head)\n{\n    if (k &lt; 1)\n    {\n        throw new ArgumentOutOfRangeException(nameof(k),\n            $\"Impossible to find less than first to last node: {k}\");\n    }\n\n    // STEP 1: Get the length of the list.\n    // Start at 1, not 0\n    // else we'd fail to count the head node!\n    var listLength = 1;\n    var currentNode = head;\n\n    // Traverse the whole list,\n    // counting all the nodes\n    while (currentNode.Next != null)\n    {\n        currentNode = currentNode.Next;\n        listLength++;\n    }\n\n    // If k is greater than the length of the list, there can't\n    // be a kth-to-last node, so we'll return an error!\n    if (k > listLength) \n    {\n        throw new ArgumentOutOfRangeException(nameof(k),\n            $\"k is larger than the length of the linked list: {k}\");\n    }\n\n    // STEP 2: Walk to the target node.\n    // Calculate how far to go, from the head,\n    // to get to the kth to last node\n    var howFarToGo = listLength - k;\n\n    currentNode = head;\n    for (int i = 0; i &lt; howFarToGo; ++i)\n    {\n        currentNode = currentNode.Next;\n    }\n\n    return currentNode;\n}", "tests": "SetupTestData();\n\nAssertEqual(KthToLastNode(1, testHead), testD);\nAssertEqual(KthToLastNode(2, testHead), testC);\nAssertEqual(KthToLastNode(4, testHead), testHead);\n\nAssertRaisesError(() => KthToLastNode(5, CreateLinkedList()), \"k is larger than the length\");\nAssertRaisesError(() => KthToLastNode(0, CreateLinkedList()), \"less than first to last\");\nAssertRaisesError(() => KthToLastNode(-1, CreateLinkedList()), \"less than first to last\");"}}, "setup": {"javascript": "var testHead;\nvar testB, testC, testD;\n\ntestHead = new LinkedListNode(\"A\");\ntestB = new LinkedListNode(\"B\");\ntestC = new LinkedListNode(\"C\");\ntestD = new LinkedListNode(\"D\");\ntestHead.next = testB;\ntestB.next = testC;\ntestC.next = testD;\n\nfunction test(head, secondLast, last, testErrors) {\n    // testErrors is optional boolean\n\n    assertEqual(kthToLastNode(1, head), last);\n    assertEqual(kthToLastNode(2, head), secondLast);\n    assertEqual(kthToLastNode(4, head), head);\n\n    function tryKLongerThanLength() {\n        kthToLastNode(5, head);\n    }\n\n    function tryKZero() {\n        kthToLastNode(0, head);\n    }\n\n    function tryKNegative() {\n        kthToLastNode(-1, head);\n    }\n\n    if (testErrors) {\n        assertRaisesError(tryKLongerThanLength, 'k is larger than the length');\n    }\n\n    if (testErrors) {\n        assertRaisesError(tryKZero, 'less than first to last');\n    }\n\n    if (testErrors) {\n        assertRaisesError(tryKNegative, 'less than first to last');\n    }\n}", "python": "test_head = LinkedListNode('A')\ntest_b = LinkedListNode('B')\ntest_c = LinkedListNode('C')\ntest_d = LinkedListNode('D')\ntest_head.next = test_b\ntest_b.next = test_c\ntest_c.next = test_d\n\ndef test(head, second_last, last, test_errors=False):\n    assertEqual(kth_to_last_node(1, head), last)\n    assertEqual(kth_to_last_node(2, head), second_last)\n    assertEqual(kth_to_last_node(4, head), head)\n\n    def try_k_longer_than_length():\n        kth_to_last_node(5, head)\n\n    def try_k_0():\n        kth_to_last_node(0, head)\n\n    def try_k_negative():\n        kth_to_last_node(-1, head)\n\n    if test_errors:\n        assertRaisesError(try_k_longer_than_length, 'k is larger than the length')\n\n    if test_errors:\n        assertRaisesError(try_k_0, 'less than first to last')\n\n    if test_errors:\n        assertRaisesError(try_k_negative, 'less than first to last')", "ruby": "test_head = LinkedListNode.new('A')\ntest_b = LinkedListNode.new('B')\ntest_c = LinkedListNode.new('C')\ntest_d = LinkedListNode.new('D')\ntest_head.next = test_b\ntest_b.next = test_c\ntest_c.next = test_d\n\ndef test(head, second_last, last, test_errors=false)\n    assertEqual(kth_to_last_node(1, head), last)\n    assertEqual(kth_to_last_node(2, head), second_last)\n    assertEqual(kth_to_last_node(4, head), head)\n\n    $head = head\n\n    def try_k_longer_than_length\n        kth_to_last_node(5, $head)\n    end\n\n    def try_k_zero\n        kth_to_last_node(0, $head)\n    end\n\n    def try_k_negative\n        kth_to_last_node(-1, $head)\n    end\n\n    if test_errors\n        assertRaisesError(method(:try_k_longer_than_length), 'k is larger than the length')\n    end\n\n    if test_errors\n        assertRaisesError(method(:try_k_zero), 'less than first to last')\n    end\n\n    if test_errors\n        assertRaisesError(method(:try_k_negative), 'less than first to last')\n    end\nend", "c": "// This questions code blocks don't rely on LinkedListNode values,\n// so we'll use \"void*\" implementation from general test setup for\n// tests, but present simpler \"int\" implementation for reference\n\nLinkedListNode *testHead, *testB, *testC, *testD;\n\nvoid setupTestData() {\n    testHead = newLinkedListNode_int(1);\n    testB = newLinkedListNode_int(2);\n    testC = newLinkedListNode_int(3);\n    testD = newLinkedListNode_int(4);\n\n    testHead->next = testB;\n    testB->next = testC;\n    testC->next = testD;\n}\n\nvoid freeTestData() {\n    freeLinkedListNode(testHead);\n    freeLinkedListNode(testB);\n    freeLinkedListNode(testC);\n    freeLinkedListNode(testD);\n}", "java": "LinkedListNode testHead = new LinkedListNode(\"A\");\nLinkedListNode testB = new LinkedListNode(\"B\");\nLinkedListNode testC = new LinkedListNode(\"C\");\nLinkedListNode testD = new LinkedListNode(\"D\");\ntestHead.next = testB;\ntestB.next = testC;\ntestC.next = testD;", "cpp": "LinkedListNode* testHead = new LinkedListNode(1);\nLinkedListNode* testB = new LinkedListNode(2);\nLinkedListNode* testC = new LinkedListNode(3);\nLinkedListNode* testD = new LinkedListNode(4);\nstruct SetupTestData \n{\n    SetupTestData()\n    {\n        testHead->next_ = testB;\n        testB->next_ = testC;\n        testC->next_ = testD;\n    }\n};\nSetupTestData setupTestDataObject;", "csharp": "LinkedListNode testHead, testB, testC, testD;\n\nvoid SetupTestData()\n{\n    testHead = new LinkedListNode(1);\n    testB = new LinkedListNode(2);\n    testC = new LinkedListNode(3);\n    testD = new LinkedListNode(4);\n\n    testHead.Next = testB;\n    testB.Next = testC;\n    testC.Next = testD;\n}"}, "question__kth-to-last-node-in-singly-linked-list__stick": {"javascript": {"code": "function kthToLastNode(k, head) {\n\n    var leftNode  = head;\n    var rightNode = head;\n\n    // move rightNode to the kth node\n    for (var x = 0; x &lt; k - 1; x++) {\n        rightNode = rightNode.next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.next) {\n        leftNode  = leftNode.next;\n        rightNode = rightNode.next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "test(testHead, testC, testD);"}, "python": {"code": "def kth_to_last_node(k, head):\n\n    left_node  = head\n    right_node = head\n\n    # move right_node to the kth node\n    for _ in xrange(k - 1):\n        right_node = right_node.next\n\n    # starting with left_node on the head,\n    # move left_node and right_node down the list,\n    # maintaining a distance of k between them,\n    # until right_node hits the end of the list\n    while right_node.next:\n        left_node  = left_node.next\n        right_node = right_node.next\n\n    # since left_node is k nodes behind right_node,\n    # left_node is now the kth to last node!\n    return left_node", "tests": "test(test_head, test_c, test_d)"}, "ruby": {"code": "def kth_to_last_node(k, head)\n\n    left_node  = head\n    right_node = head\n\n    # move right_node to the kth node\n    (0...k - 1).each do |x|\n        right_node = right_node.next\n    end\n\n    # starting with left_node on the head,\n    # move left_node and right_node down the list,\n    # maintaining a distance of k between them,\n    # until right_node hits the end of the list\n    while right_node.next\n        left_node  = left_node.next\n        right_node = right_node.next\n    end\n\n    # since left_node is k nodes behind right_node,\n    # left_node is now the kth to last node!\n    return left_node\nend", "tests": "test(test_head, test_c, test_d)"}, "c": {"code": "LinkedListNode* kthToLastNode(size_t k, LinkedListNode* head) {\n    size_t i;\n    LinkedListNode *leftNode = head, *rightNode = head;\n\n    // move rightNode to the kth node\n    for (i = 0; i &lt; k - 1; ++i) {\n        rightNode = rightNode->next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode->next) {\n        leftNode  = leftNode->next;\n        rightNode = rightNode->next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "setupTestData();\n\nASSERT(kthToLastNode(1, testHead) == testD);\nASSERT(kthToLastNode(2, testHead) == testC);\nASSERT(kthToLastNode(4, testHead) == testHead);\n\nfreeTestData();"}, "java": {"code": "public LinkedListNode kthToLastNode(int k, LinkedListNode head) {\n\n    LinkedListNode leftNode  = head;\n    LinkedListNode rightNode = head;\n\n    // move rightNode to the kth node\n    for (int x = 0; x &lt; k - 1; x++) {\n        rightNode = rightNode.next;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.next != null) {\n        leftNode  = leftNode.next;\n        rightNode = rightNode.next;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "assertEqual(t.kthToLastNode(1, testHead), testD);\nassertEqual(t.kthToLastNode(2, testHead), testC);\nassertEqual(t.kthToLastNode(4, testHead), testHead);"}, "cpp": {"code": "LinkedListNode * kthToLastNode(size_t k, LinkedListNode* head) \n{\n    LinkedListNode* leftNode  = head;\n    LinkedListNode* rightNode = head;\n\n    // move rightNode to the kth node\n    for (size_t x = 0; x &lt; k - 1; ++x) {\n        rightNode = rightNode->next_;\n    }\n\n    // starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode->next_) {\n        leftNode  = leftNode->next_;\n        rightNode = rightNode->next_;\n    }\n\n    // since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "assertEqual(kthToLastNode(1, testHead), testD);\nassertEqual(kthToLastNode(2, testHead), testC);\nassertEqual(kthToLastNode(4, testHead), testHead);"}, "csharp": {"code": "public LinkedListNode KthToLastNode(int k, LinkedListNode head)\n{\n    var leftNode  = head;\n    var rightNode = head;\n\n    // Move rightNode to the kth node\n    for (int i = 0; i &lt; k - 1; i++)\n    {\n        rightNode = rightNode.Next;\n    }\n\n    // Starting with leftNode on the head,\n    // move leftNode and rightNode down the list,\n    // maintaining a distance of k between them,\n    // until rightNode hits the end of the list\n    while (rightNode.Next != null)\n    {\n        leftNode  = leftNode.Next;\n        rightNode = rightNode.Next;\n    }\n\n    // Since leftNode is k nodes behind rightNode,\n    // leftNode is now the kth to last node!\n    return leftNode;\n}", "tests": "SetupTestData();\n\nAssertEqual(KthToLastNode(1, testHead), testD);\nAssertEqual(KthToLastNode(2, testHead), testC);\nAssertEqual(KthToLastNode(4, testHead), testHead);"}}}, "funcs": {"question__kth-to-last-node-in-singly-linked-list__kth-to-last-node": {"snake": "kth_to_last_node", "csharp": "KthToLastNode", "camel": "kthToLastNode"}}, "vars": {"question__kth-to-last-node-in-singly-linked-list__left-node": {"snake": "left_node", "camel": "leftNode"}, "question__kth-to-last-node-in-singly-linked-list__list-length": {"snake": "list_length", "camel": "listLength"}, "question__kth-to-last-node-in-singly-linked-list__right-node": {"snake": "right_node", "camel": "rightNode"}, "question__kth-to-last-node-in-singly-linked-list__head-node": {"snake": "head_node", "camel": "headNode"}, "question__kth-to-last-node-in-singly-linked-list__k": {"default": "k"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/kth-to-last-node-in-singly-linked-list&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/jquery.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/underscore-min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/angular-seo.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/base.js"></script>

    
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/prism.min.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/codemirror.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/python.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/ruby.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/javascript.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/clike.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/php.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/haskell.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="lry52r3kkrLMDUz6vyXHVvV2jrhxxN3XS0XrkweeQ03tsZLcT3c0sejKEgx0L1hc">
<div id="loading">
. . .
</div>


<link href="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default581724_provider" id="stripeXDM_default581724_provider" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket20615" src="./25.Kth to Last Node in a Singly-Linked List _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>