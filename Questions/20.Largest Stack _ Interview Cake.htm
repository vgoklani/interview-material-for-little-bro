<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0059)https://www.interviewcake.com/question/python/largest-stack -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./20.Largest Stack _ Interview Cake_files/9e57878e2e"></script><script src="./20.Largest Stack _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./20.Largest Stack _ Interview Cake_files/track"></script><script type="text/javascript" src="./20.Largest Stack _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script id="facebook-jssdk" src="./20.Largest Stack _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/conversion_async.js"></script><script type="text/javascript" async="" src="./20.Largest Stack _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./20.Largest Stack _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":0,"agent":"","applicationID":"7328113","applicationTime":407,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/largest-stack">
        <meta name="description" content="You&#39;ve implemented a Stack class, but you want to access the largest element in your stack from time to time. Write an augmented LargestStack class.">

        

        <meta property="og:title" content="Largest Stack | Interview Cake">
        <meta property="og:description" content="You&#39;ve implemented a Stack class, but you want to access the largest element in your stack from time to time. Write an augmented LargestStack class.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/largest-stack">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Largest Stack | Interview Cake">
        <meta name="twitter:description" content="You&#39;ve implemented a Stack class, but you want to access the largest element in your stack from time to time. Write an augmented LargestStack class.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Largest Stack | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./20.Largest Stack _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./20.Largest Stack _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./20.Largest Stack _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./20.Largest Stack _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./20.Largest Stack _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./20.Largest Stack _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./20.Largest Stack _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./20.Largest Stack _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./20.Largest Stack _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./20.Largest Stack _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/largest-stack" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/largest-stack" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/largest-stack" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/largest-stack" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;largest-stack&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Largest Stack" data-meta_desc="You&#39;ve implemented a Stack class, but you want to access the largest element in your stack from time to time. Write an augmented LargestStack class." data-title="" data-meta_keywords="" data-weight="10" data-difficulty="7" data-num-hints="6" data-num-gotchas="2" ng-init="setNumHints(6); setNumGotchas(2); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
<strong>
You want to be able to access the <em>largest element</em> in a stack.
</strong>
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__largest-stack__implemented-stack-class"><p class="ng-scope">
You've already implemented this <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__stack-class"><span class="ng-scope">Stack</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="class-or-structure"><span class="ng-scope">class</span></span>:
</p>
<div code-block="question__largest-stack__stack-class" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope" style="overflow: hidden; width: 100%;"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># initialize an empty list</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># push a new item to the last index</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># remove the last item</span>
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># if the stack is empty, return None</span>
        <span class="token comment" spellcheck="true"># (it would also be reasonable to throw an exception)</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>items<span class="token punctuation">:</span> 
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># see what the last item is</span>
    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>items<span class="token punctuation">:</span> 
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p class="ng-scope">
Use <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__largest-stack__your-or-built-in"><span class="ng-scope">your</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__stack-class"><span class="ng-scope">Stack</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__largest-stack__class-or-structure"><span class="ng-scope">class</span></span> to <strong>implement a <em>new</em> <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__largest-stack__class-or-structure"><span class="ng-scope">class</span></span> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max-stack-class"><span class="ng-scope">MaxStack</span></span> with a function <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> that returns the largest element in the stack.</strong> <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> should not remove the item.
</p>
<p class="ng-scope">
<small>
Your stacks will contain only integers.
</small>
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we push several items in increasing numeric order (like 1, 2, 3, 4...), so that there is a <em>new max</em> after each <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span>? What if we then <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> each of these items off, so that there is a <em>new max</em> after each <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span>? Your algorithm shouldn't pay a steep cost in these edge cases.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
You should be able to get a runtime of <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> for <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span>, <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span>, and <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>.
</p>
</div>
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
One <span concept="lazy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">lazy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>
Lazy evaluation
</strong>
is a strategy some programming languages use to save work for the last minute or avoid unnecessary work altogether. For example, suppose we had a conditional like this:
</p>

<div code-block="concept__lazy__two-booleans" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> it_is_friday <span class="token operator">and</span> it_is_raining<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"board games at my place!"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-friday"><span class="ng-scope">it_is_friday</span></span> was false. <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__c18n-language-lazy-evaluation-strategy"><span class="ng-scope">Because of the </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span><span class="ng-scope"> interpreter's lazy evaluation strategy</span></span>,
it wouldn't bother checking the value of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-raining"><span class="ng-scope">it_is_raining</span></span>—it knows that either way the result of our <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__and"><span class="ng-scope">and</span></span> will be false, so we won't print the invitation to board game night.
</p>

<p>
We can use this to our advantage. For example, suppose we have a check like this:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition-key-error" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
What happens if 'Becky' isn't in our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__hash-table"><span class="ng-scope">dictionary</span></span>? <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-bad"><span class="ng-scope">In Python, we'll get a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope"> (Java would similarly raise a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__null-pointer-exception"><span class="ng-scope">NullPointerException</span></span><span class="ng-scope">, but Ruby and JavaScript would just give us a null object).</span></span>
</p>

<p>
Instead, we could first confirm that 'Becky' and I are still on good terms:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> <span class="token string">'Becky'</span> <span class="token keyword">in</span> friends <span class="token operator">and</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This way, if 'Becky' <em>isn't</em> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span>, <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-good"><span class="ng-scope">Python will lazily ignore the rest of the conditional and avoid throwing the </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope">!</span></span>
</p>

<p class="aside">
This is all hypothetical, of course. It's not like things with Becky are weird or anything. We're totally cool. She's still in my friends dictionary for sure and I hope I'm still in hers and Becky if you're reading this I just want you to know you're still in my friends dicitionary.
</p>

<p>
Python's <strong>generators</strong> are also an example of lazy evaluation. For example, the function <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python generates a list <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__list-explanation"></span> of numbers in a specific range:
</p>

<div code-block="concept__lazy__range-print" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">print</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># prints [1,2,3,4,5,6,7,8,9,10]</span>

<span class="token comment" spellcheck="true"># (the first argument to range()</span>
<span class="token comment" spellcheck="true"># is inclusive, and the second is exclusive)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This is commonly used for looping. For example, if we wanted to count to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>, we could do this:
</p>

<div code-block="concept__lazy__range-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
But this will generate a list in memory whose size is order of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>! That could be a lot of space.
</p>

<p>
So instead, we could use a generator. It behaves like a list in that we can loop through it, but instead of building up all of its contents at once, it simply generates the <em>next</em> element right when it's needed (lazily)!
</p>

<p>
There's a generator version of <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python: <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>:
</p>

<div code-block="concept__lazy__xrange-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token comment" spellcheck="true"># much more memory efficient!</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
In Python 3 they went ahead and made <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> a generator, so there is no <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>.
</p>

<p>
We can also take a <strong>lazy approach</strong> in system design. For example, suppose we had a class for tracking temperatures:
</p>

<div code-block="concept__lazy__temp-tracker-class" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose we wanted to add a feature for getting the the highest temperature we've seen so far. We could "eagerly" keep the max up to date whenever we insert a new temperature:
</p>

<div code-block="concept__lazy__get-max-eager" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerEager</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temp

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Or we could lazily (or "just in time") calculate the max whenever it's requested:
</p>

<div code-block="concept__lazy__get-max-lazy" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerLazy</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
The best choice depends on how often you expect to run <span class="ic-function ng-isolate-scope" func="concept__lazy__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>!
</p>

<p class="aside">
Becky, I haven't hosted another board game night since the incident. I know we both said things we didn't really mean and anyway Becky just if you're reading this please know that I've been cake free for 3 whole days now and it's hard but I'm doing it for you PLEASE Becky. Please.
</p>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__lazy__friends": {"default": "friends"}, "concept__lazy__some-high-number": {"default": "some_high_number"}, "concept__lazy__it-is-raining": {"snake": "it_is_raining", "camel": "itIsRaining"}, "concept__lazy__it-is-friday": {"snake": "it_is_friday", "camel": "itIsFriday"}}, "code-blocks": {"setup": {"python": "def test(Tracker):\n    tracker = Tracker()\n    tracker.record(2)\n    tracker.record(3)\n    assertEqual(tracker.get_max(), 3)\n    tracker.record(4)\n    assertEqual(tracker.get_max(), 4)"}, "concept__lazy__two-booleans": {"java": "if (itIsFriday && itIsRaining) {\n    System.out.println(\"board games at my place!\");\n}", "python": "if it_is_friday and it_is_raining:\n    print \"board games at my place!\"", "ruby": "if it_is_friday && it_is_raining\n    puts \"board games at my place!\"\nend", "c": "if (itIsFriday && itIsRaining) {\n    printf(\"board games at my place!\\n\");\n}", "javascript": "if (itIsFriday && itIsRaining) {\n    console.log('board games at my place!');\n}", "cpp": "if (itIsFriday && itIsRaining) {\n    cout &lt;&lt; \"board games at my place!\" &lt;&lt; endl;\n}"}, "concept__lazy__xrange-for-loop": {"default": "# much more memory efficient!\nfor i in xrange(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__get-max-lazy": {"default": {"code": "class TempTrackerLazy:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n\n    def get_max(self):\n        return max(self.recorded_temps)", "tests": "test(TempTrackerLazy)"}}, "concept__lazy__in-hash-and-meets-condition": {"java": "if (friends.containsKey(\"Becky\") && friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if 'Becky' in friends and friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends.include? 'Becky' && friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (friend != NULL && isFreeThisFriday(friend)) {\n    inviteToBoardGame(friend);\n}", "javascript": "if (friends.hasOwnProperty('Becky') && friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second != friends.end() && it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-for-loop": {"default": "for i in range(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__temp-tracker-class": {"default": "class TempTracker:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)"}, "concept__lazy__get-max-eager": {"default": {"code": "class TempTrackerEager:\n\n    recorded_temps = []\n    max_temp = None\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n        if temp > self.max_temp:\n            self.max_temp = temp\n\n    def get_max(self):\n        return self.max_temp", "tests": "test(TempTrackerEager)"}}, "concept__lazy__in-hash-and-meets-condition-key-error": {"java": "if (friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (isFreeThisFriday(friend)) {\n    inviteToBoardGameNight(friend);\n}", "javascript": "if (friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-print": {"default": "print range(1,11)\n# prints [1,2,3,4,5,6,7,8,9,10]\n\n# (the first argument to range()\n# is inclusive, and the second is exclusive)"}}, "funcs": {"concept__lazy__is-free-this-friday": {"snake": "is_free_this_friday", "camel": "isFreeThisFriday"}, "concept__lazy__range": {"default": "range"}, "concept__lazy__xrange": {"default": "xrange"}, "concept__lazy__get-max": {"default": "get_max"}}, "code-inlines": {"concept__lazy__and": {"python": "and", "default": "&&"}, "concept__lazy__undefined": {"default": "undefined"}, "concept__lazy__nil": {"default": "nil"}, "concept__lazy__null-pointer-exception": {"default": "NullPointerException"}, "concept__lazy__type-error": {"default": "TypeError"}, "concept__lazy__no-method-error": {"default": "NoMethodError"}, "concept__lazy__key-error": {"default": "KeyError"}, "concept__lazy__null": {"default": "null"}}, "words": {"concept__lazy__c18n-language": {"java": "Java", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "javascript": "JavaScript", "cpp": "C++ (beta)"}, "concept__lazy__list-explanation": {"java": "", "python": "", "ruby": "(Python's term for an array)", "c": "", "default": "", "javascript": "", "cpp": ""}, "concept__lazy__c18n-language-lazy-evaluation-strategy": {"java": "Because <span words=\"c18n-language\">Java</span> short-circuits evaluation", "ruby": "Because of the <span words=\"c18n-language\">Ruby</span> interpreter's lazy evaluation strategy", "c": "Because <span words=\"c18n-language\">C (beta)</span> short-circuits evaluation", "default": "Because of the <span words=\"c18n-language\"></span> interpreter's lazy evaluation strategy", "javascript": "Because of the <span words=\"c18n-language\">JavaScript</span> interpreter's lazy evaluation strategy", "cpp": "Because <span words=\"c18n-language\">C++ (beta)</span> short-circuits evaluation", "python": "Because of the <span words=\"c18n-language\">Python</span> interpreter's lazy evaluation strategy"}, "concept__lazy__if-becky-isnt-in-friends-good": {"java": "Java will skip the second check about Becky being free and avoid throwing the <span code-inline=\"null-pointer-exception\">NullPointerException</span>!", "python": "Python will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"key-error\">KeyError</span>!", "ruby": "Ruby will lazily ignore the rest of the conditional and avoid trying to call <span func=\"is-free-this-friday\">is_free_this_friday</span> on <span code-inline=\"nil\">nil</span>!", "c": "C will skip the second check about Becky being free, preventing possible memory corruption or crashing!", "javascript": "JavaScript will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"type-error\">TypeError</span>!", "cpp": "C++ will skip the second check about Becky being free, preventing possible memory corruption or crashing!"}, "concept__lazy__if-becky-isnt-in-friends-bad": {"java": "In Java, we'll get a <span code-inline=\"null-pointer-exception\">NullPointerException</span> (Python would similarly raise a <span code-inline=\"key-error\">KeyError</span>, but Ruby and JavaScript would just give us a null object).", "python": "In Python, we'll get a <span code-inline=\"key-error\">KeyError</span> (Java would similarly raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>, but Ruby and JavaScript would just give us a null object).", "ruby": "In Ruby, we'd get <span code-inline=\"nil\">nil</span>, so when we try calling <span func=\"is-free-this-friday\">is_free_this_friday</span> we'll get a <span code-inline=\"no-method-error\">NoMethodError</span>. (In JavaScript, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "c": "In C, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object.", "javascript": "In JavaScript, we'd get <span code-inline=\"undefined\">undefined</span>, so when we try calling <span func=\"is-free-this-friday\">isFreeThisFriday</span> we'll get a <span code-inline=\"type-error\">TypeError</span>. (In Ruby, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "cpp": "In C++, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object."}, "concept__lazy__hash-table": {"php": "array", "java": "hash map", "ruby": "hash", "swift": "dictionary", "c": "hash table", "javascript": "object", "python": "dictionary", "csharp": "dictionary", "cpp": "unordered map", "objectivec": "dictionary"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> approach is to have <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> simply walk through the stack and find the max element. This takes <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time for each call to <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>. But we can do better.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    To get <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>, we could store the max integer as a member variable (call it <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span>). But how would we keep it up to date?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    For every <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span>, we can check to see if the item being pushed is larger than the current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span>, assigning it as our new <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span> if so. But what happens when we <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> the current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span>? We could re-compute the current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span> by walking through our stack in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time. So our worst-case runtime for <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> would be <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. We can do better.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    What if when we find a new current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span> (<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__new-max"><span class="ng-scope">new_max</span></span>), instead of overwriting the old one (<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__old-max"><span class="ng-scope">old_max</span></span>) we held onto it, so that once <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__new-max"><span class="ng-scope">new_max</span></span> was popped off our stack we would know that our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span> was back to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__old-max"><span class="ng-scope">old_max</span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    What data structure should we store our set of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span>s in? We want something where the last item we put in is the first item we get out ("last in, first out").
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    We can store our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max"><span class="ng-scope">max</span></span>s in another stack!
</p>
</div>
</div>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We define <em>two</em> new stacks within our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__max-stack-class"><span class="ng-scope">MaxStack</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__largest-stack__class-or-structure"><span class="ng-scope">class</span></span>—<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__stack-in-class"><span class="ng-scope">stack</span></span> holds all of our integers, and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack-in-class"><span class="ng-scope">maxs_stack</span></span> holds our "maxima." We use <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack-in-class"><span class="ng-scope">maxs_stack</span></span> to keep our max up to date in constant time as we <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> and <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span>:
</p>

<ol class="ng-scope">
<li>
Whenever we <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> a new item, we check to see if it's greater than or equal to the current max, which is at the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack-in-class"><span class="ng-scope">maxs_stack</span></span>. If it is, we also <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> it onto <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack-in-class"><span class="ng-scope">maxs_stack</span></span>.
</li>
<li>
Whenever we <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span>, we also <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> from the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack"><span class="ng-scope">maxs_stack</span></span> if the item equals the top item in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__largest-stack__maxs-stack-in-class"><span class="ng-scope">maxs_stack</span></span>.
</li>
</ol>

<div code-block="question__largest-stack__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">MaxStack</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack      <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxs_stack <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Add a new item to the top of our stack. If the item is greater</span>
    <span class="token comment" spellcheck="true"># than or equal to the last item in maxs_stack, it's</span>
    <span class="token comment" spellcheck="true"># the new max! So we'll add it to maxs_stack.</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None <span class="token operator">or</span> item <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Remove and return the top item from our stack. If it equals</span>
    <span class="token comment" spellcheck="true"># the top item in maxs_stack, they must have been pushed in together.</span>
    <span class="token comment" spellcheck="true"># So we'll pop it out of maxs_stack too.</span>
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> item

    <span class="token comment" spellcheck="true"># The last item in maxs_stack is the max item in our stack.</span>
    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>maxs_stack<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="at-a-glance ng-scope">
<span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span>, <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span>, and <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>. <span complexity="m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> additional space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> is the number of operations performed on the stack.
</p>
<!--
(click for proof)
[proof: we've added O(1) for each of push and pop, and getMax is O(1) as well. We haven't shown the underlying time cost for push and pop, because we haven't  shown how they are implemented. Here's a sample implementation of a simple stack that is O(1):]
-->
<p class="ng-scope">
Notice that our time-efficient approach takes some additional space, while a <span concept="lazy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">lazy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>
Lazy evaluation
</strong>
is a strategy some programming languages use to save work for the last minute or avoid unnecessary work altogether. For example, suppose we had a conditional like this:
</p>

<div code-block="concept__lazy__two-booleans" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> it_is_friday <span class="token operator">and</span> it_is_raining<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"board games at my place!"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-friday"><span class="ng-scope">it_is_friday</span></span> was false. <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__c18n-language-lazy-evaluation-strategy"><span class="ng-scope">Because of the </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="c18n-language"><span class="ng-scope">Python</span></span><span class="ng-scope"> interpreter's lazy evaluation strategy</span></span>,
it wouldn't bother checking the value of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__it-is-raining"><span class="ng-scope">it_is_raining</span></span>—it knows that either way the result of our <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__and"><span class="ng-scope">and</span></span> will be false, so we won't print the invitation to board game night.
</p>

<p>
We can use this to our advantage. For example, suppose we have a check like this:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition-key-error" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
What happens if 'Becky' isn't in our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__hash-table"><span class="ng-scope">dictionary</span></span>? <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-bad"><span class="ng-scope">In Python, we'll get a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope"> (Java would similarly raise a </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__null-pointer-exception"><span class="ng-scope">NullPointerException</span></span><span class="ng-scope">, but Ruby and JavaScript would just give us a null object).</span></span>
</p>

<p>
Instead, we could first confirm that 'Becky' and I are still on good terms:
</p>

<div code-block="concept__lazy__in-hash-and-meets-condition" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">if</span> <span class="token string">'Becky'</span> <span class="token keyword">in</span> friends <span class="token operator">and</span> friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_free_this_friday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    invite_to_board_game_night<span class="token punctuation">(</span>friends<span class="token punctuation">[</span><span class="token string">'Becky'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This way, if 'Becky' <em>isn't</em> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__friends"><span class="ng-scope">friends</span></span>, <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__if-becky-isnt-in-friends-good"><span class="ng-scope">Python will lazily ignore the rest of the conditional and avoid throwing the </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__lazy__key-error"><span class="ng-scope">KeyError</span></span><span class="ng-scope">!</span></span>
</p>

<p class="aside">
This is all hypothetical, of course. It's not like things with Becky are weird or anything. We're totally cool. She's still in my friends dictionary for sure and I hope I'm still in hers and Becky if you're reading this I just want you to know you're still in my friends dicitionary.
</p>

<p>
Python's <strong>generators</strong> are also an example of lazy evaluation. For example, the function <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python generates a list <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__lazy__list-explanation"></span> of numbers in a specific range:
</p>

<div code-block="concept__lazy__range-print" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">print</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># prints [1,2,3,4,5,6,7,8,9,10]</span>

<span class="token comment" spellcheck="true"># (the first argument to range()</span>
<span class="token comment" spellcheck="true"># is inclusive, and the second is exclusive)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
This is commonly used for looping. For example, if we wanted to count to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>, we could do this:
</p>

<div code-block="concept__lazy__range-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
But this will generate a list in memory whose size is order of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__lazy__some-high-number"><span class="ng-scope">some_high_number</span></span>! That could be a lot of space.
</p>

<p>
So instead, we could use a generator. It behaves like a list in that we can loop through it, but instead of building up all of its contents at once, it simply generates the <em>next</em> element right when it's needed (lazily)!
</p>

<p>
There's a generator version of <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> in Python: <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>:
</p>

<div code-block="concept__lazy__xrange-for-loop" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token comment" spellcheck="true"># much more memory efficient!</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> some_high_number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"I've eaten "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" cakes"</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
In Python 3 they went ahead and made <span class="ic-function ng-isolate-scope" func="concept__lazy__range"><span class="name" ng-transclude=""><span class="ng-scope">range</span></span>()</span> a generator, so there is no <span class="ic-function ng-isolate-scope" func="concept__lazy__xrange"><span class="name" ng-transclude=""><span class="ng-scope">xrange</span></span>()</span>.
</p>

<p>
We can also take a <strong>lazy approach</strong> in system design. For example, suppose we had a class for tracking temperatures:
</p>

<div code-block="concept__lazy__temp-tracker-class" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTracker</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Suppose we wanted to add a feature for getting the the highest temperature we've seen so far. We could "eagerly" keep the max up to date whenever we insert a new temperature:
</p>

<div code-block="concept__lazy__get-max-eager" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerEager</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    max_temp <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>max_temp<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>max_temp <span class="token operator">=</span> temp

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_temp</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Or we could lazily (or "just in time") calculate the max whenever it's requested:
</p>

<div code-block="concept__lazy__get-max-lazy" language="python" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">TempTrackerLazy</span><span class="token punctuation">:</span>

    recorded_temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_max</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recorded_temps<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
The best choice depends on how often you expect to run <span class="ic-function ng-isolate-scope" func="concept__lazy__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>!
</p>

<p class="aside">
Becky, I haven't hosted another board game night since the incident. I know we both said things we didn't really mean and anyway Becky just if you're reading this please know that I've been cake free for 3 whole days now and it's hard but I'm doing it for you PLEASE Becky. Please.
</p>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__lazy__friends": {"default": "friends"}, "concept__lazy__some-high-number": {"default": "some_high_number"}, "concept__lazy__it-is-raining": {"snake": "it_is_raining", "camel": "itIsRaining"}, "concept__lazy__it-is-friday": {"snake": "it_is_friday", "camel": "itIsFriday"}}, "code-blocks": {"setup": {"python": "def test(Tracker):\n    tracker = Tracker()\n    tracker.record(2)\n    tracker.record(3)\n    assertEqual(tracker.get_max(), 3)\n    tracker.record(4)\n    assertEqual(tracker.get_max(), 4)"}, "concept__lazy__two-booleans": {"java": "if (itIsFriday && itIsRaining) {\n    System.out.println(\"board games at my place!\");\n}", "python": "if it_is_friday and it_is_raining:\n    print \"board games at my place!\"", "ruby": "if it_is_friday && it_is_raining\n    puts \"board games at my place!\"\nend", "c": "if (itIsFriday && itIsRaining) {\n    printf(\"board games at my place!\\n\");\n}", "javascript": "if (itIsFriday && itIsRaining) {\n    console.log('board games at my place!');\n}", "cpp": "if (itIsFriday && itIsRaining) {\n    cout &lt;&lt; \"board games at my place!\" &lt;&lt; endl;\n}"}, "concept__lazy__xrange-for-loop": {"default": "# much more memory efficient!\nfor i in xrange(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__get-max-lazy": {"default": {"code": "class TempTrackerLazy:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n\n    def get_max(self):\n        return max(self.recorded_temps)", "tests": "test(TempTrackerLazy)"}}, "concept__lazy__in-hash-and-meets-condition": {"java": "if (friends.containsKey(\"Becky\") && friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if 'Becky' in friends and friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends.include? 'Becky' && friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (friend != NULL && isFreeThisFriday(friend)) {\n    inviteToBoardGame(friend);\n}", "javascript": "if (friends.hasOwnProperty('Becky') && friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second != friends.end() && it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-for-loop": {"default": "for i in range(1, some_high_number+1):\n    print \"I've eaten \" + i + \" cakes\""}, "concept__lazy__temp-tracker-class": {"default": "class TempTracker:\n\n    recorded_temps = []\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)"}, "concept__lazy__get-max-eager": {"default": {"code": "class TempTrackerEager:\n\n    recorded_temps = []\n    max_temp = None\n\n    def record(self, temp):\n        self.recorded_temps.append(temp)\n        if temp > self.max_temp:\n            self.max_temp = temp\n\n    def get_max(self):\n        return self.max_temp", "tests": "test(TempTrackerEager)"}}, "concept__lazy__in-hash-and-meets-condition-key-error": {"java": "if (friends.get(\"Becky\").isFreeThisFriday()) {\n    inviteToBoardGameNight(friends.get(\"Becky\"));\n}", "python": "if friends['Becky'].is_free_this_friday():\n    invite_to_board_game_night(friends['Becky'])", "ruby": "if friends['Becky'].is_free_this_friday()\n    invite_to_board_game_night(friends['Becky'])\nend", "c": "Friend *friend = hashTableFind(friends, \"Becky\");\nif (isFreeThisFriday(friend)) {\n    inviteToBoardGameNight(friend);\n}", "javascript": "if (friends['Becky'].isFreeThisFriday()) {\n    inviteToBoardGameNight(friends['Becky']);\n}", "cpp": "auto it = friends.find(\"Becky\");\nif (it->second->isFreeThisFriday()) {\n    inviteToBoardGameNight(it->second);\n}"}, "concept__lazy__range-print": {"default": "print range(1,11)\n# prints [1,2,3,4,5,6,7,8,9,10]\n\n# (the first argument to range()\n# is inclusive, and the second is exclusive)"}}, "funcs": {"concept__lazy__is-free-this-friday": {"snake": "is_free_this_friday", "camel": "isFreeThisFriday"}, "concept__lazy__range": {"default": "range"}, "concept__lazy__xrange": {"default": "xrange"}, "concept__lazy__get-max": {"default": "get_max"}}, "code-inlines": {"concept__lazy__and": {"python": "and", "default": "&&"}, "concept__lazy__undefined": {"default": "undefined"}, "concept__lazy__nil": {"default": "nil"}, "concept__lazy__null-pointer-exception": {"default": "NullPointerException"}, "concept__lazy__type-error": {"default": "TypeError"}, "concept__lazy__no-method-error": {"default": "NoMethodError"}, "concept__lazy__key-error": {"default": "KeyError"}, "concept__lazy__null": {"default": "null"}}, "words": {"concept__lazy__c18n-language": {"java": "Java", "python": "Python", "ruby": "Ruby", "c": "C (beta)", "javascript": "JavaScript", "cpp": "C++ (beta)"}, "concept__lazy__list-explanation": {"java": "", "python": "", "ruby": "(Python's term for an array)", "c": "", "default": "", "javascript": "", "cpp": ""}, "concept__lazy__c18n-language-lazy-evaluation-strategy": {"java": "Because <span words=\"c18n-language\">Java</span> short-circuits evaluation", "ruby": "Because of the <span words=\"c18n-language\">Ruby</span> interpreter's lazy evaluation strategy", "c": "Because <span words=\"c18n-language\">C (beta)</span> short-circuits evaluation", "default": "Because of the <span words=\"c18n-language\"></span> interpreter's lazy evaluation strategy", "javascript": "Because of the <span words=\"c18n-language\">JavaScript</span> interpreter's lazy evaluation strategy", "cpp": "Because <span words=\"c18n-language\">C++ (beta)</span> short-circuits evaluation", "python": "Because of the <span words=\"c18n-language\">Python</span> interpreter's lazy evaluation strategy"}, "concept__lazy__if-becky-isnt-in-friends-good": {"java": "Java will skip the second check about Becky being free and avoid throwing the <span code-inline=\"null-pointer-exception\">NullPointerException</span>!", "python": "Python will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"key-error\">KeyError</span>!", "ruby": "Ruby will lazily ignore the rest of the conditional and avoid trying to call <span func=\"is-free-this-friday\">is_free_this_friday</span> on <span code-inline=\"nil\">nil</span>!", "c": "C will skip the second check about Becky being free, preventing possible memory corruption or crashing!", "javascript": "JavaScript will lazily ignore the rest of the conditional and avoid throwing the <span code-inline=\"type-error\">TypeError</span>!", "cpp": "C++ will skip the second check about Becky being free, preventing possible memory corruption or crashing!"}, "concept__lazy__if-becky-isnt-in-friends-bad": {"java": "In Java, we'll get a <span code-inline=\"null-pointer-exception\">NullPointerException</span> (Python would similarly raise a <span code-inline=\"key-error\">KeyError</span>, but Ruby and JavaScript would just give us a null object).", "python": "In Python, we'll get a <span code-inline=\"key-error\">KeyError</span> (Java would similarly raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>, but Ruby and JavaScript would just give us a null object).", "ruby": "In Ruby, we'd get <span code-inline=\"nil\">nil</span>, so when we try calling <span func=\"is-free-this-friday\">is_free_this_friday</span> we'll get a <span code-inline=\"no-method-error\">NoMethodError</span>. (In JavaScript, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "c": "In C, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object.", "javascript": "In JavaScript, we'd get <span code-inline=\"undefined\">undefined</span>, so when we try calling <span func=\"is-free-this-friday\">isFreeThisFriday</span> we'll get a <span code-inline=\"type-error\">TypeError</span>. (In Ruby, we'd also get a <span code-inline=\"null\">null</span> value. Python and Java would raise an error as soon as we tried looking for 'Becky' in <span var=\"friends\">friends</span>.)", "cpp": "In C++, we'll get undefined behavior, possibly leading to the memory corruption or a program crash. Java would raise a <span code-inline=\"null-pointer-exception\">NullPointerException</span>,\nPython would raise a <span code-inline=\"key-error\">KeyError</span>, and Ruby and JavaScript would just give us a null object."}, "concept__lazy__hash-table": {"php": "array", "java": "hash map", "ruby": "hash", "swift": "dictionary", "c": "hash table", "javascript": "object", "python": "dictionary", "csharp": "dictionary", "cpp": "unordered map", "objectivec": "dictionary"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> approach (simply walking through the stack to find the max integer whenever <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> is called) took no additional space. We've traded some space efficiency for time efficiency.
</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Notice how in the solution we're <em>spending time</em> on <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> and <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> so we can <em>save time</em> on <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>. That's because we chose to optimize for the time cost of calls to <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span>.
</p>

<p class="ng-scope">
But we could've chosen to optimize for something else. For example, if we expected we'd be running <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> and <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> frequently and running <span class="ic-function ng-isolate-scope" func="question__largest-stack__get-max"><span class="name" ng-transclude=""><span class="ng-scope">get_max</span></span>()</span> rarely, we could have optimized for faster <span class="ic-function ng-isolate-scope" func="question__largest-stack__push"><span class="name" ng-transclude=""><span class="ng-scope">push</span></span>()</span> and <span class="ic-function ng-isolate-scope" func="question__largest-stack__pop"><span class="name" ng-transclude=""><span class="ng-scope">pop</span></span>()</span> functions.
</p>

<p class="ng-scope">
Sometimes the first step in algorithm design is <em>deciding what we're optimizing for</em>. Start by considering the expected characteristics of the input.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__largest-stack__stack-in-class": {"csharp": "_stack", "default": "stack", "cpp": "stack_"}, "question__largest-stack__stack": {"default": "stack"}, "question__largest-stack__new-max": {"snake": "new_max", "camel": "newMax"}, "question__largest-stack__maxs-stack-in-class": {"snake": "maxs_stack", "camel": "maxsStack", "csharp": "_maxsStack", "cpp": "maxsStack_"}, "question__largest-stack__max-stack-class": {"default": "MaxStack"}, "question__largest-stack__stack-class": {"default": "Stack"}, "question__largest-stack__old-max": {"snake": "old_max", "camel": "oldMax"}, "question__largest-stack__max": {"default": "max"}, "question__largest-stack__maxs-stack": {"snake": "maxs_stack", "camel": "maxsStack"}}, "words": {"question__largest-stack__your-or-built-in": {"java": "the built-in", "cpp": "the built-in", "c": "your", "javascript": "your", "ruby": "your", "csharp": "the built-in", "python": "your", "default": "your"}, "question__largest-stack__implemented-stack-class": {"java": "", "cpp": "", "c": "<p>\nYou've already implemented this <span var=\"stack-class\">Stack</span> <span words=\"class-or-structure\">structure</span>:\n</p>\n<div code-block=\"stack-class\" language=\"c\" translation-highlighting=\"static\">typedef struct Stack {\n    void *value;\n    struct Stack *next;\n} Stack;\n\nStack * stackNew() {\n    return NULL;\n}\n\nvoid stackFree(Stack *stack) {\n    while (stack != NULL) {\n        Stack *next = stack-&gt;next;\n        free(stack-&gt;value);\n        free(stack);\n        stack = next;\n    }\n}\n\nint stackEmpty(Stack *stack) {\n    return stack == NULL;\n}\n\nStack * stackPush(Stack *stack, void *value, size_t valueSize) {\n    Stack *top = malloc(sizeof(Stack));\n    assert(top != NULL);\n    top-&gt;value = malloc(valueSize);\n    assert(top-&gt;value != NULL);\n    memcpy(top-&gt;value, value, valueSize);\n    top-&gt;next = stack;\n    return top;\n\n}\n\nStack * stackPop(Stack *stack) {\n    assert(stack != NULL);\n    Stack *top = stack-&gt;next;\n    free(stack-&gt;value);\n    free(stack);\n    return top;\n}\n\nvoid * stackPeek(Stack *stack) {\n    assert(stack != NULL);\n    return stack-&gt;value;\n}</div>", "javascript": "<p>\nYou've already implemented this <span var=\"stack-class\">Stack</span> <span words=\"class-or-structure\">class</span>:\n</p>\n<div code-block=\"stack-class\" language=\"javascript\" translation-highlighting=\"static\">function Stack() {\n    // initialize an empty array\n    this.items = [];\n}\n\n// push a new item to the last index\nStack.prototype.push = function(item) {\n    this.items.push(item);\n};\n\n// remove the last item\nStack.prototype.pop = function() {\n    // if the stack is empty, return null\n    // (it would also be reasonable to throw an exception)\n    if (!this.items.length) {\n        return null;\n    }\n    return this.items.pop();\n};\n\n// see what the last item is\nStack.prototype.peek = function() {\n    if (!this.items.length) {\n        return null;\n    }\n    return this.items[this.items.length -1];\n};</div>", "ruby": "<p>\nYou've already implemented this <span var=\"stack-class\">Stack</span> <span words=\"class-or-structure\">class</span>:\n</p>\n<div code-block=\"stack-class\" language=\"ruby\" translation-highlighting=\"static\">class Stack\n\n    # initialize an empty array\n    def initialize\n        @items = []\n    end\n\n    # push a new item to the last index\n    def push(item)\n        @items.push(item)\n    end\n\n    # remove the last item\n    def pop()\n        # if the stack is empty, return nil\n        # (it would also be reasonable to throw an exception)\n        if @items.empty?\n            return nil\n        end\n        return @items.pop()\n    end\n\n    # see what the last item is\n    def peek()\n        if @items.empty?\n            return nil\n        end\n        return @items[-1]\n    end\nend</div>", "csharp": "", "python": "<p>\nYou've already implemented this <span var=\"stack-class\">Stack</span> <span words=\"class-or-structure\">class</span>:\n</p>\n<div code-block=\"stack-class\" language=\"python\" translation-highlighting=\"static\">class Stack:\n\n    # initialize an empty list\n    def __init__(self):\n        self.items = []\n\n    # push a new item to the last index\n    def push(self, item):\n        self.items.append(item)\n\n    # remove the last item\n    def pop(self):\n        # if the stack is empty, return None\n        # (it would also be reasonable to throw an exception)\n        if not self.items: \n            return None\n        return self.items.pop()\n\n    # see what the last item is\n    def peek(self):\n        if not self.items: \n            return None\n        return self.items[-1]</div>", "default": "<p>\nYou've already implemented this <span var=\"stack-class\"/> <span words=\"class-or-structure\"/>:\n</p>\n<div code-block=\"stack-class\">\n</div>"}, "question__largest-stack__class-or-structure": {"java": "class", "cpp": "class", "c": "structure", "javascript": "class", "ruby": "class", "python": "class", "default": "class"}}, "code-blocks": {"question__largest-stack__stack-class": {"java": "", "cpp": "", "c": "typedef struct Stack {\n    void *value;\n    struct Stack *next;\n} Stack;\n\nStack * stackNew() {\n    return NULL;\n}\n\nvoid stackFree(Stack *stack) {\n    while (stack != NULL) {\n        Stack *next = stack->next;\n        free(stack->value);\n        free(stack);\n        stack = next;\n    }\n}\n\nint stackEmpty(Stack *stack) {\n    return stack == NULL;\n}\n\nStack * stackPush(Stack *stack, void *value, size_t valueSize) {\n    Stack *top = malloc(sizeof(Stack));\n    assert(top != NULL);\n    top->value = malloc(valueSize);\n    assert(top->value != NULL);\n    memcpy(top->value, value, valueSize);\n    top->next = stack;\n    return top;\n\n}\n\nStack * stackPop(Stack *stack) {\n    assert(stack != NULL);\n    Stack *top = stack->next;\n    free(stack->value);\n    free(stack);\n    return top;\n}\n\nvoid * stackPeek(Stack *stack) {\n    assert(stack != NULL);\n    return stack->value;\n}", "javascript": {"code": "function Stack() {\n    // initialize an empty array\n    this.items = [];\n}\n\n// push a new item to the last index\nStack.prototype.push = function(item) {\n    this.items.push(item);\n};\n\n// remove the last item\nStack.prototype.pop = function() {\n    // if the stack is empty, return null\n    // (it would also be reasonable to throw an exception)\n    if (!this.items.length) {\n        return null;\n    }\n    return this.items.pop();\n};\n\n// see what the last item is\nStack.prototype.peek = function() {\n    if (!this.items.length) {\n        return null;\n    }\n    return this.items[this.items.length -1];\n};", "tests": "var testStack = new Stack();\n\nassertEqual(testStack.pop(), null);\n\ntestStack.push(3);\ntestStack.push(7);\n\nassertEqual(testStack.peek(), 7);\nassertEqual(testStack.pop(), 7);\nassertEqual(testStack.peek(), 3);\n\ntestStack.push(5);\ntestStack.pop();\ntestStack.pop();\n\nassertEqual(testStack.pop(), null);"}, "swift": {"code": "class Stack&lt;T> {\n    \n    typealias Item = T\n    \n    // initialize an empty array\n    var items: [Item] = []\n    \n    // push a new item to the last index\n    func push(_ item: Item) {\n        items.append(item)\n    }\n    \n    // remove the last item\n    func pop() -> Item? {\n        // if the stack is empty, return nil\n        // (it would also be reasonable to throw an exception)\n        if items.count == 0 {\n            return nil\n        }\n        return items.removeLast()\n    }\n    \n    // see what the last item is\n    func peek() -> Item? {\n        return items.last\n    }\n}", "tests": "let testStack = Stack<Int>()\n\ntry assertEqual(testStack.pop(), nil)\n\ntestStack.push(3)\ntestStack.push(7)\n\ntry assertEqual(testStack.peek(), 7)\ntry assertEqual(testStack.pop(), 7)\ntry assertEqual(testStack.peek(), 3)\n\ntestStack.push(5)\nlet _ = testStack.pop()\nlet _ = testStack.pop()\n\ntry assertEqual(testStack.pop(), nil)"}, "ruby": {"code": "class Stack\n\n    # initialize an empty array\n    def initialize\n        @items = []\n    end\n\n    # push a new item to the last index\n    def push(item)\n        @items.push(item)\n    end\n\n    # remove the last item\n    def pop()\n        # if the stack is empty, return nil\n        # (it would also be reasonable to throw an exception)\n        if @items.empty?\n            return nil\n        end\n        return @items.pop()\n    end\n\n    # see what the last item is\n    def peek()\n        if @items.empty?\n            return nil\n        end\n        return @items[-1]\n    end\nend", "tests": "test_stack = Stack.new()\n\nassert test_stack.pop() == nil\n\ntest_stack.push(3)\ntest_stack.push(7)\n\nassert test_stack.peek() == 7\nassert test_stack.pop() == 7\nassert test_stack.peek() == 3\n\ntest_stack.push(5)\ntest_stack.pop()\ntest_stack.pop()\n\nassert test_stack.pop() == nil"}, "python": {"code": "class Stack:\n\n    # initialize an empty list\n    def __init__(self):\n        self.items = []\n\n    # push a new item to the last index\n    def push(self, item):\n        self.items.append(item)\n\n    # remove the last item\n    def pop(self):\n        # if the stack is empty, return None\n        # (it would also be reasonable to throw an exception)\n        if not self.items: \n            return None\n        return self.items.pop()\n\n    # see what the last item is\n    def peek(self):\n        if not self.items: \n            return None\n        return self.items[-1]", "tests": "test_stack = Stack()\n\nassert test_stack.pop() == None\n\ntest_stack.push(3)\ntest_stack.push(7)\n\nassert test_stack.peek() == 7\nassert test_stack.pop() == 7\nassert test_stack.peek() == 3\n\ntest_stack.push(5)\ntest_stack.pop()\ntest_stack.pop()\n\nassert test_stack.pop() == None"}}, "question__largest-stack__solution": {"java": {"code": "import java.util.Stack;\n\npublic class MaxStack {\n\n    Stack&lt;Integer> stack     = new Stack&lt;Integer>();\n    Stack&lt;Integer> maxsStack = new Stack&lt;Integer>();\n\n    // Add a new item to the top of our stack. If the item is greater\n    // than or equal to the last item in maxsStack, it's\n    // the new max! So we'll add it to maxsStack.\n    public int push(int item) {\n        stack.push(item);\n        if (maxsStack.empty() || item >= (int) maxsStack.peek()) {\n            maxsStack.push(item);\n        }\n        return item;\n    }\n\n    // Remove and return the top item from our stack. If it equals\n    // the top item in maxsStack, they must have been pushed in together.\n    // So we'll pop it out of maxsStack too.\n    public int pop() {\n        int item = (int) stack.pop();\n        if (item == (int) maxsStack.peek()) {\n            maxsStack.pop();\n        }\n        return item;\n    }\n\n    // The last item in maxsStack is the max item in our stack.\n    public int getMax() {\n        return (int) maxsStack.peek();\n    }\n}", "tests": "MaxStack testStack = t.new MaxStack();\n\ntestStack.push(2);\nint lastA = testStack.pop();\nassertEqual(lastA, 2);\n\ntestStack.push(10);\ntestStack.push(1);\nint largestA = testStack.getMax();\nassertEqual(largestA, 10);\n\ntestStack.push(100);\ntestStack.push(5);\nint lastB = testStack.pop();\nassertEqual(lastB, 5);\nint largestB = testStack.getMax();\nassertEqual(largestB, 100);"}, "cpp": {"code": "class MaxStack\n{\nprivate:\n    stack&lt;int> stack_;\n    stack&lt;int> maxsStack_;\n\npublic:\n    // Add a new item to the top of our stack. If the item is greater\n    // than or equal to the last item in maxsStack, it's\n    // the new max! So we'll add it to maxsStack.\n    int push(int item)\n    {\n        stack_.push(item);\n        if (maxsStack_.empty() || item >= maxsStack_.top()) {\n            maxsStack_.push(item);\n        }\n        return item;\n    }\n\n    // Remove and return the top item from our stack. If it equals\n    // the top item in maxsStack, they must have been pushed in together.\n    // So we'll pop it out of maxsStack too.\n    int pop()\n    {\n        int item = stack_.top();\n        stack_.pop();\n        if (item == maxsStack_.top()) {\n            maxsStack_.pop();\n        }\n        return item;\n    }\n\n    // The last item in maxsStack is the max item in our stack.\n    int getMax() const\n    {\n        return maxsStack_.top();\n    }\n};", "tests": "MaxStack testStack;\n\ntestStack.push(2);\nint lastA = testStack.pop();\nassertEqual(lastA, 2);\n\ntestStack.push(10);\ntestStack.push(1);\nint largestA = testStack.getMax();\nassertEqual(largestA, 10);\n\ntestStack.push(100);\ntestStack.push(5);\nint lastB = testStack.pop();\nassertEqual(lastB, 5);\nint largestB = testStack.getMax();\nassertEqual(largestB, 100);"}, "c": {"code": "typedef struct MaxStack {\n    Stack *stack;\n    Stack *maxsStack;\n} MaxStack;\n\nvoid maxStackInit(MaxStack *maxStack) {\n    maxStack->stack = stackNew();\n    maxStack->maxsStack = stackNew();\n}\n\nvoid maxStackFree(MaxStack *maxStack) {\n    stackFree(maxStack->stack);\n    stackFree(maxStack->maxsStack);\n\n}\n\n// Add a new item to the top of our stack. If the item is greater\n// than or equal to the last item in maxsStack, it's\n// the new max! So we'll add it to maxsStack.\nvoid push(MaxStack *maxStack, int item) {\n    maxStack->stack = stackPush(maxStack->stack, &item, sizeof(item));\n    if (stackEmpty(maxStack->maxsStack) ||\n            item >= *(int*)stackPeek(maxStack->maxsStack)\n       ) {\n        maxStack->maxsStack = stackPush(maxStack->maxsStack, &item, sizeof(item));\n    }\n}\n\n// Remove and return the top item from our stack. If it equals\n// the top item in maxsStack, they must have been pushed in together.\n// So we'll pop it out of maxsStack too.\nint pop(MaxStack *maxStack) {\n    int item = *(int*)stackPeek(maxStack->stack);\n    maxStack->stack = stackPop(maxStack->stack);\n    if (item == *(int*)stackPeek(maxStack->maxsStack)) {\n        maxStack->maxsStack = stackPop(maxStack->maxsStack);\n    }\n    return item;\n}\n\n// The last item in maxsStack is the max item in our stack.\nint getMax(const MaxStack *maxStack) {\n    return *(int*)stackPeek(maxStack->maxsStack);\n}", "tests": "MaxStack testStack;\nmaxStackInit(&testStack);\n\npush(&testStack, 2);\nASSERT(pop(&testStack) == 2);\n\npush(&testStack, 10);\npush(&testStack, 1);\nASSERT(getMax(&testStack) == 10);\n\npush(&testStack, 100);\npush(&testStack, 5);\nASSERT(pop(&testStack) == 5);\nASSERT(getMax(&testStack) == 100);\n\nmaxStackFree(&testStack);"}, "javascript": {"setup": "function Stack() {\n    this.items = [];\n}\nStack.prototype.push = function(item) {\n    this.items.push(item);\n};\nStack.prototype.pop = function() {\n    if (!this.items.length) return null;\n    return this.items.pop();\n};\nStack.prototype.peek = function() {\n    if (!this.items.length) {\n        return null;\n    }\n    return this.items[this.items.length -1];\n}", "code": "function MaxStack() {\n    this.stack     = new Stack();\n    this.maxsStack = new Stack();\n}\n\n// Add a new item to the top of our stack. If the item is greater\n// than or equal to the last item in maxsStack, it's\n// the new max! So we'll add it to maxsStack.\nMaxStack.prototype.push = function(item) {\n    this.stack.push(item);\n    if (!this.maxsStack.peek() || item >= this.maxsStack.peek()) {\n        this.maxsStack.push(item);\n    }\n    return item;\n};\n\n// Remove and return the top item from our stack. If it equals\n// the top item in maxsStack, they must have been pushed in together.\n// So we'll pop it out of maxsStack too.\nMaxStack.prototype.pop = function() {\n    var item = this.stack.pop();\n    if (item === this.maxsStack.peek()) {\n        this.maxsStack.pop();\n    }\n    return item;\n};\n\n// The last item in maxsStack is the max item in our stack.\nMaxStack.prototype.getMax = function() {\n    return this.maxsStack.peek();\n};", "tests": "var testStack;\nvar lastA;\nvar largestA;\nvar lastB;\nvar largestB;\n\ntestStack = new MaxStack();\n\ntestStack.push(2);\nlastA = testStack.pop();\nassertEqual(lastA, 2);\n\ntestStack.push(10);\ntestStack.push(1);\nlargestA = testStack.getMax();\nassertEqual(largestA, 10);\n\ntestStack.push(100);\ntestStack.push(5);\nlastB = testStack.pop();\nassertEqual(lastB, 5);\nlargestB = testStack.getMax();\nassertEqual(largestB, 100);"}, "swift": {"code": "class MaxStack&lt;T> where T: Equatable, T: Comparable {\n    \n    typealias Item = T\n    \n    var stack = Stack&lt;Item>()\n    var maxsStack = Stack&lt;Item>()\n    \n    // Add a new item to the top of our stack. If the item is greater\n    // than or equal to the last item in maxsStack, it's\n    // the new max! So we'll add it to maxsStack.\n    func push(_ item: Item) -> Item {\n        stack.push(item)\n        if let lastItem = maxsStack.peek() {\n            if item >= lastItem {\n                maxsStack.push(item)\n            }\n        } else {\n            maxsStack.push(item)\n        }\n        return item\n    }\n    \n    // Remove and return the top item from our stack. If it equals\n    // the top item in maxsStack, they must have been pushed in together.\n    // So we'll pop it out of maxsStack too.\n    func pop() -> Item? {\n        let item: Item? = stack.pop()\n        if let maxsItem = maxsStack.peek(),\n            item == maxsItem {\n            let _ = maxsStack.pop()\n        }\n        return item\n    }\n    \n    // The last item in maxsStack is the max item in our stack.\n    func getMax() -> Item? {\n        return maxsStack.peek()\n    }\n}", "tests": "class Stack<T> {\n    \n    typealias Item = T\n    \n    // initialize an empty array\n    var items: [Item] = []\n    \n    // push a new item to the last index\n    func push(_ item: Item) {\n        items.append(item)\n    }\n    \n    // remove the last item\n    func pop() -> Item? {\n        // if the stack is empty, return nil\n        // (it would also be reasonable to throw an exception)\n        if items.count == 0 {\n            return nil\n        }\n        return items.removeLast()\n    }\n    \n    // see what the last item is\n    func peek() -> Item? {\n        return items.last\n    }\n}\n\nlet testStack = MaxStack<Int>()\n\nlet _ = testStack.push(2)\nlet lastA = testStack.pop()\ntry assertEqual(lastA, 2)\n\nlet _ = testStack.push(10)\nlet _ = testStack.push(1)\nlet largestA = testStack.getMax()\ntry assertEqual(largestA, 10)\n\nlet _ = testStack.push(100)\nlet _ = testStack.push(5)\nlet lastB = testStack.pop()\ntry assertEqual(lastB, 5)\nlet largestB = testStack.getMax()\ntry assertEqual(largestB, 100)"}, "ruby": {"setup": "class Stack\n    def initialize\n        @items = []\n    end\n    def push(item)\n        @items.push(item)\n    end\n    def pop\n        if @items.empty?\n            return nil\n        end\n        return @items.pop()\n    end\n    def peek\n        if @items.empty?\n            return nil\n        end\n        return @items[-1]\n    end\nend", "code": "class MaxStack\n\n    def initialize()\n        @stack      = Stack.new()\n        @maxs_stack = Stack.new()\n    end\n\n    # Add a new item to the top of our stack. If the item is greater\n    # than or equal to the last item in maxs_stack, it's\n    # the new max! So we'll add it to maxs_stack.\n    def push(item)\n        @stack.push(item)\n        if !@maxs_stack.peek() || item >= @maxs_stack.peek()\n            @maxs_stack.push(item)\n        end\n    end\n\n    # Remove and return the top item from our stack. If it equals\n    # the top item in maxs_stack, they must have been pushed in together.\n    # So we'll pop it out of maxs_stack too.\n    def pop()\n        item = @stack.pop()\n        if item == @maxs_stack.peek()\n            @maxs_stack.pop()\n        end\n        return item\n    end\n\n    # The last item in maxs_stack is the max item in our stack.\n    def get_max()\n        return @maxs_stack.peek()\n    end\nend", "tests": "test_stack = MaxStack.new()\n\ntest_stack.push(2)\nlastA = test_stack.pop()\nassert lastA == 2\n\ntest_stack.push(10)\ntest_stack.push(1)\nlargestA = test_stack.get_max()\nassert largestA == 10\n\ntest_stack.push(100)\ntest_stack.push(5)\nlastB = test_stack.pop()\nassert lastB == 5\nlargestB = test_stack.get_max()\nassert largestB == 100"}, "python": {"setup": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        if not self.items: \n            return None\n        return self.items.pop()\n    def peek(self):\n        if not self.items: \n            return None\n        return self.items[len(self.items)-1]", "code": "class MaxStack:\n\n    def __init__(self):\n        self.stack      = Stack()\n        self.maxs_stack = Stack()\n\n    # Add a new item to the top of our stack. If the item is greater\n    # than or equal to the last item in maxs_stack, it's\n    # the new max! So we'll add it to maxs_stack.\n    def push(self, item):\n        self.stack.push(item)\n        if self.maxs_stack.peek() is None or item >= self.maxs_stack.peek():\n            self.maxs_stack.push(item)\n\n    # Remove and return the top item from our stack. If it equals\n    # the top item in maxs_stack, they must have been pushed in together.\n    # So we'll pop it out of maxs_stack too.\n    def pop(self):\n        item = self.stack.pop()\n        if item == self.maxs_stack.peek():\n            self.maxs_stack.pop()\n        return item\n\n    # The last item in maxs_stack is the max item in our stack.\n    def get_max(self):\n        return self.maxs_stack.peek()", "tests": "test_stack = MaxStack()\n\ntest_stack.push(2)\nlastA = test_stack.pop()\nassert lastA == 2\n\ntest_stack.push(10)\ntest_stack.push(1)\nlargestA = test_stack.get_max()\nassert largestA == 10\n\ntest_stack.push(100)\ntest_stack.push(5)\nlastB = test_stack.pop()\nassert lastB == 5\nlargestB = test_stack.get_max()\nassert largestB == 100"}}}, "funcs": {"question__largest-stack__pop": {"default": "pop"}, "question__largest-stack__push": {"default": "push"}, "question__largest-stack__get-max": {"snake": "get_max", "camel": "getMax"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/largest-stack" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/largest-stack" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/largest-stack&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/largest-stack" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/largest-stack" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/largest-stack&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./20.Largest Stack _ Interview Cake_files/jquery.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./20.Largest Stack _ Interview Cake_files/underscore-min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/angular-seo.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./20.Largest Stack _ Interview Cake_files/base.js"></script>

    
    <script src="./20.Largest Stack _ Interview Cake_files/prism.min.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/codemirror.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/python.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/ruby.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/javascript.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/clike.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/php.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/haskell.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./20.Largest Stack _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./20.Largest Stack _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./20.Largest Stack _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="f1e21d3ca3dfafc" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" src="./20.Largest Stack _ Interview Cake_files/ping.html" style="display: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./20.Largest Stack _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="78g5I3snkEnT23lNmKaxAW4VdZywaY0uEHFr08DhQdFAR8xTKfpQ7FsDyOOZoceJ">
<div id="loading">
. . .
</div>


<link href="./20.Largest Stack _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default406548_provider" id="stripeXDM_default406548_provider" src="./20.Largest Stack _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./20.Largest Stack _ Interview Cake_files/saved_resource(1).html"></iframe></body></html>