<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0060)https://www.interviewcake.com/question/python/url-shortener? -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script async="" defer="true" src="./44.URL Shortener _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./44.URL Shortener _ Interview Cake_files/visits"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./44.URL Shortener _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./44.URL Shortener _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./44.URL Shortener _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":297}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/url-shortener">
        <meta name="description" content="Design a URL shortener, like bit.ly">

        

        <meta property="og:title" content="URL Shortener | Interview Cake">
        <meta property="og:description" content="Design a URL shortener, like bit.ly">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/url-shortener">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="URL Shortener | Interview Cake">
        <meta name="twitter:description" content="Design a URL shortener, like bit.ly">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>URL Shortener | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./44.URL Shortener _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./44.URL Shortener _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./44.URL Shortener _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./44.URL Shortener _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./44.URL Shortener _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./44.URL Shortener _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./44.URL Shortener _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./44.URL Shortener _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./44.URL Shortener _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="https://static.olark.com/jsclient/styles/artsy-albatross/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./44.URL Shortener _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./44.URL Shortener _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/url-shortener?" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/url-shortener?" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/url-shortener?" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/url-shortener?" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;url-shortener&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="URL Shortener" data-meta_desc="Design a URL shortener, like bit.ly" data-title="" data-meta_keywords="" data-weight="1" data-difficulty="7" data-is-single-track="true" data-num-hints="0" data-num-gotchas="9" ng-init="setNumHints(0); setNumGotchas(9); isSingleTrack = true; ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
Design a URL shortener
</strong>
</p>
<p class="ng-scope">
You know, like bit.ly.
</p>

<p class="ng-scope">
Let's call it ca.ke!
</p>

<p class="ng-scope">
<strong>
Step 1 is to scope the project.
</strong>
System design questions like this are usually intentionally left open-ended, so you have to ask some questions and make some decisions about exactly what you're building to get on the same page as your interviewer.
</p>

<p class="ng-scope">
So, what are we building? What features might we need?
</p>
</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas" hide-heading="true">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="true">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">


<h3 class="ng-scope">
Features
</h3>

<p class="ng-scope">
<strong>
Is this a full web app, with a web interface?
</strong>
No, let's just build an API to start.
</p>

<p class="ng-scope">
<strong>
Since it's an API, do we need authentication or user accounts or developer keys?
</strong>
No, let's just make it open to start.
</p>

<p class="ng-scope">
<strong>
Can people modify or delete links?
</strong>
Let's leave that out for now.
</p>

<p class="ng-scope">
<strong>
If people can't delete links...do they persist forever? Or do we automatically remove old ones?
</strong>
First, it's worth considering what policies we could use for removing old ones:
</p>

<ol class="ng-scope">
<li>
We could remove links that were <em>created</em> some length of time ago...like 6 months. 
</li>
<li>
We could remove links that haven't been <em>visited</em> in some length of time...like 6 months. 
</li>
</ol>

<p class="ng-scope">
(2) seems less frustrating than (1). Are there cases where (2) could still frustrate users? If a link is on the public web, it's likely to get hit somewhat regularly, at least by spiders. But what if it's on the private web (e.g. an internal "resources" page on a private university intranet)? Or...what if someone printed a bunch of <em>pamphlets</em> that had the URL on it, didn't give out any pamphlets for a few months, then started giving them out again? That seems like a pretty reasonable thing that might happen (putting a URL on a printed piece of paper is a great reason to use a link shortener!) and having the link suddenly stop working would be quite frustrating for the user. Worse, what if a <em>book</em> already had the shortlink printed in a million copies? So let's let links exist forever.
</p>

<p class="ng-scope">
<strong>
Should we let people <em>choose</em> their shortlink, or just always auto-generate it?
</strong>
For example, say they want <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-parkers-resume"><span class="ng-scope">ca.ke/parkers-resume</span></span>. Let's definitely support that.
</p>

<p class="ng-scope">
<strong>
Do we need analytics, so people can see how many people are clicking on a link, etc?
</strong>
Hmmm, good idea. But let's leave it out to start.
</p>

<p class="ng-scope">
It's okay if your list of features was different from ours. Let's proceed with these requirements so we're working on the same problem.
</p>

<p class="ng-scope">
<strong>Next step: Design goals</strong>. If we're designing something, we should know what we're optimizing for! What are we optimizing for?
</p>


</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">

<h3 class="ng-scope">
Design Goals
</h3>

<p class="ng-scope">
Here's what we came up with:
</p>

<ol class="ng-scope">
<li>
We should be able to store a <em>lot</em> of links, since we're not automatically expiring them.
</li>
<li>
Our shortlinks should be as short as possible. The whole point of a link shortener is to make <em>short</em> links! Having shorter links than our competition could be a business advantage.
</li>
<li>
Following a shortlink should be <em>fast</em>.
</li>
<li>
The shortlink follower should be resilient to load spikes. One of our links might be the top story on Reddit, for example.
</li>
</ol>

<p class="aside ng-scope">
It's worth taking a moment to really think about the <em>order</em> of our goals. Sometimes design goals are at odds with each other (to do a better job of one, we need to do a worse job of another). So it's helpful to know which goals are more important than others.
</p>


<p class="ng-scope">
It's okay if your list wasn't just like ours. But to get on the same page, let's move forward with these design goals.
</p>


<p class="ng-scope">
<strong>
Next step: building the data model.
</strong>
Think about the database schema or the models we'll want. What things do we need to store, and how should they relate to each other? This is the part where we answer questions like "is this a many-to-many or a one-to-many?" or "should these be in the same table or different tables?"
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">

<h3 class="ng-scope">
Data Model
</h3>

<p class="ng-scope">
It's worthwhile to be careful about how we name things. This'll help us communciate clearly with our interviewer, and it'll show that we care about using descriptive and consistent names! Many interviewers look for this.
</p>

<p class="ng-scope">
Let's call our main entity a <strong><span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__link"><span class="ng-scope">Link</span></span></strong>. A <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__link"><span class="ng-scope">Link</span></span> is a mapping between a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__short_link"><span class="ng-scope">short_link</span></span> on our site, and a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__long_link"><span class="ng-scope">long_link</span></span>, where we redirect people when they visit the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__short_link"><span class="ng-scope">short_link</span></span>.
</p>

<div code-block="question__url-shortener__models-1" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">Link
- short_link
- long_link</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
The <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__short_link"><span class="ng-scope">short_link</span></span> could be one we've randomly generated, or one a user chose.
</p>

<p class="ng-scope">
Of course, we don't need to store the <em>full</em> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span> URL (e.g. <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__mysite-shortlink"><span class="ng-scope">ca.ke/mysite</span></span>), we just need to store the "slug"—the part at the end (e.g. "<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__mysite"><span class="ng-scope">mysite</span></span>").
</p>

<p class="ng-scope">
So let's rename the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__short_link"><span class="ng-scope">short_link</span></span> field to "<span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__slug"><span class="ng-scope">slug</span></span>."
</p>

<div code-block="question__url-shortener__models-2" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">Link
- slug
- long_link</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Now the name <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__long_link"><span class="ng-scope">long_link</span></span> doesn't make as much sense without <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__short_link"><span class="ng-scope">short_link</span></span>. So let's change it to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__destination"><span class="ng-scope">destination</span></span>.
</p>

<div code-block="question__url-shortener__models-3" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">Link
- slug
- destination</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
And let's call this whole model/table <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>, to be a bit more specific.<!-- (I'm already imagining another potential future entity we might want to call a "link").-->
</p>

<div code-block="question__url-shortener__models-4" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">ShortLink
- slug
- destination</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="aside ng-scope">
Investing time in carefully naming things from the beginning is always impressive in an interview. A <em>big</em> part of code readability is how well things are named!
</p>

<p class="ng-scope">
<strong>
Next: sketching the code.
</strong>
Don't get hung up on the details here—pseudocode is fine.
</p>

<p class="ng-scope">
Think of this part as <em>sprinting to a naive first draft design</em>, so you and your interviewer can get on the same page and have a starting point for optimizing. There may be things that come up as you go that are clearly "tricky issues" that need to be thought through. Feel free to skip these as you go—just jot down a note to come back to them later.
</p>

<p class="ng-scope">
Our main goal here is to come up with a skeleton to start building things out from. Think about what endpoints/views we'll need, and what each one will have to do.
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="gotcha">
    <div class="note-content" ng-transclude="">

<h3 class="ng-scope">
Views/Pages/Endpoints
</h3>

<p class="ng-scope">
<strong>
First, let's make a way to <em>create</em> a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>.
</strong>
</p>

<p class="ng-scope">
Since we're making an API, let's make it REST-style. If REST is one of those "I've heard it a bunch but only half know what it means" things for you, I highly recommend <a href="http://www.restapitutorial.com/lessons/restquicktips.html" target="_blank">reading up on it</a>.
</p>

<p class="ng-scope">
In normal REST style, our endpoint for creating a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span> should be named after the entity we're creating. Versioning apis is also a reasonable thing to do. So let's put our creation endpoint at
<strong><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-shortlink-endpoint"><span class="ng-scope">ca.ke/api/v1/shortlink</span></span></strong>.
</p>


<p class="ng-scope">
To create a new <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>, we'll send a POST request there. Our POST request will include one required argument: the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__destination"><span class="ng-scope">destination</span></span> where our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span> will point. It'll also optionally take a slug argument. If no slug is provided, we'll generate one. The response will contain the newly-created <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>, including its <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__slug"><span class="ng-scope">slug</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__destination"><span class="ng-scope">destination</span></span>.
</p>


<div code-block="question__url-shortener__creation-request" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">$ curl --data '{"destination": "interviewcake.com"}' https://ca.ke/api/v1/shortlink
{
  "slug": "ae8uFt",
  "destination": "interviewcake.com"
}</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
In usual REST style, we should allow GET, PUT, PATCH, and DELETE requests as well to read, modify, and delete links. But since that's not a requirement yet, we'll just reject non-POST requests with an <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.2" target="_blank">error 501 ("not implemented")</a> for now.
</p>

<p class="ng-scope">
So our endpoint might look something like this (pseudocode):
</p>

<div code-block="question__url-shortener__create-endpoint" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def shortlink(request):
    if request.method is not 'POST':
        return Error501
    
    destination = request.data.destination

    # if they included a slug, use that
    if request.data.slug:
        slug = request.data.slug

    # else, make them one
    else:
        slug = generate_new_random_slug()

    DB.insert('Links', {'slug': slug, 'destination': destination})

    response_body = {
        'slug' : slug,
        }

    return Success200(json.format(response_body))</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Of course, we haven't defined exactly how <span class="ic-function ng-isolate-scope" func="question__url-shortener__generate_new_random_slug"><span class="name" ng-transclude=""><span class="ng-scope">generate_new_random_slug</span></span>()</span> works. Considering it a bit, it quickly becomes clear this is a pretty tangled issue. We'll have to figure out:
</p>

<ol class="ng-scope">
<li>
What characters can we use in randomly generated slugs? More possible characters means more possible random slugs without making our shortlinks longer. But what characters are allowed in URLs?
</li>
<li>
How do we ensure a randomly generated slug hasn't already been used? Or if there <em>is</em> such a collision, how do we handle it?
</li>
</ol>

<p class="ng-scope">
So let's jot down these questions, put them aside, and come back to them after we're done sketching our general app structure.
</p>

<p class="ng-scope">
<strong>
Second, let's make a way to <em>follow</em> a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>.
</strong>
That's the whole point, after all!
</p>

<p class="ng-scope">
Our shortened URLs should be as short as possible. So as mentioned before, we'll give them this format: <strong><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-cake-slug"><span class="ng-scope">ca.ke/$slug</span></span></strong>.
</p>

<p class="ng-scope">
Where <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__dollar-slug"><span class="ng-scope">$slug</span></span> is the slug (either auto-generated by us or specified by the user). We could make it clearer that this is a redirect endpoint, by using a format like <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-cake-r-slug"><span class="ng-scope">ca.ke/r/$slug</span></span>, for example. But that adds 2 precious characters of length to our shortlink URLs!
</p>

<p class="aside ng-scope">
One potential challenge here: if/when we build a web app for our service, we'll need some way of differentiating our own pages from shortlinks. For example, if we want an about page at <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-about"><span class="ng-scope">ca.ke/about</span></span>, our back-end will need to know "about" isn't just a shortlink slug. In fact, we might want to "reserve" or "block" shortlinks for pages we think we might need, so users don't grab URLs we might want for our own site. <em>Alternately</em> we could just say <em>our</em> pages have paths that're always prefixed with something, like <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-w"><span class="ng-scope">/w/</span></span>. For example, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-w-about"><span class="ng-scope">ca.ke/w/about</span></span>.
</p>

<p class="ng-scope">
The code for the redirection endpoint is pretty simple:
</p>

<div code-block="question__url-shortener__redirect-endpoint" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def redirect(request):
    destination = DB.get('Links', 'destination', {'slug': request.path})
    return Redirect302(destination)</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>


<p class="ng-scope">
<strong>
Next: slug generation.
</strong>
Let's return to those questions we came up with about slugs. How long should they be, what characters should we allow, and how should we handle random slug collisions?
</p>


</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="gotcha">
    <div class="note-content" ng-transclude="">
<h3 class="ng-scope">
Slug generation
</h3>

<p class="aside ng-scope">
A note about methodology: Our default process for answering questions like this is often "make a reasonable guess, brainstorm potential issues, and revise." That's fine, but sometimes it feels more organized and impressive to do something more like "brainstorm design goals, then design around those goals." So we'll do that.
</p>

<p class="ng-scope">
Let's look back up at the design goals we came up with earlier. The first two are immediately relevant to this problem:
</p>

<ol class="ng-scope">
<li>
We should be able to store a <em>lot</em> of links.
</li>
<li>
Our shortlinks should be as short as possible.
</li>
</ol>

<p class="ng-scope">
Looking at a few examples, we can quickly notice that the more characters we allow in our shortlinks, the more <em>different</em> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>s we can have without making our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span>s <em>longer</em>. Specifically, if we allow <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span></span> different characters, for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>-character-long slugs we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>c</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">c^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> distinct possibilities.
</p>


<div class="aside ng-scope">
<p>
<strong>
How did we get that math?
</strong>
</p>

<p>
We drew out a few examples and looked for patterns.
</p>


<p>
It helps to start with small numbers. Suppose we only allowed <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> different characters for our slugs: 'a' and 'b', How many possible <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span></span></span></span></span>-character slugs would we have? <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span>: 'a' and 'b'.
</p>

<p>
How many possible <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span>-character slugs? Well, we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possibilities for the first character, and for <em>each</em> of those <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possible first characters, we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possible second characters. That's <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>2</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2*2 = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span><span class="mbin">∗</span><span class="mord">2</span><span class="mrel">=</span><span class="mord">4</span></span></span></span></span> possibilities overall.
</p>

<p>
How many possible <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">3</span></span></span></span></span>-character slugs? <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possibilities for the first character, and for <em>each</em> of those <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possible first characters, we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possible second characters, and for each of those possible first and second characters, another <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span> possible third characters. That's <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>2</mn><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">2*2*2 = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span><span class="mbin">∗</span><span class="mord">2</span><span class="mbin">∗</span><span class="mord">2</span><span class="mrel">=</span><span class="mord">8</span></span></span></span></span> possibilities overall.
</p>

<p>
Looks like this is a multiplication thing. Or in fact, a <em>power</em> thing. In general, we have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> possible <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>-character slugs, if we only allow 2 possible choices (a and b) for each character.
</p>

<p>
And if we want to allow <em><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span></span></em> different possible characters, instead of just 2? <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>c</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">c^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> possibilities for an <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>-character-long slug.
</p>

<p>
</p>
</div>

<p class="ng-scope">
So if we're trying to accomodate as many slugs as possible, we should allow as many characters as we can! So let's do this:
</p>

<ol class="ng-scope">
<li>
Figure out the max set of characters we can allow in our random shortlinks.
</li>
<li>
Figure out how many distinct shortlinks we want to accomodate.
</li>
<li>
Figure out how long our shortlinks must be to accomodate that many distinct possibilities.
</li>
</ol>

<p class="aside ng-scope">
Sketching a process like this before jumping in is hugely impressive. It shows organized, methodical thinking. Whenever you're not sure how to proceed, take a step back and try to write out a process for getting to the bottom of things. It's fine if you end up straying from your plan—it'll still help you organize your thinking.
</p>

<h3 class="ng-scope">
What characters can we allow in our randomly-generated slugs?
</h3>

<p class="ng-scope">
What are the <em>constraints</em> on <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span></span>? Let's think about it:
</p>

<ol class="ng-scope">
<li>
We should only use characters that are actually allowed in URLs.
</li>
<li>
We should <em>probably</em> only pick characters that are relatively easy to type on a keyboard. Remember the use case we talked about where people are typing in a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span> that they're reading off a piece of paper?
</li>
</ol>

<p class="ng-scope">
So, what characters are allowed in URLs? It's okay to not know the answer off the top of your head. But you should be able to tell your interviewer that you know how to figure it out! Googling or searching on Stack Overflow is a fine answer. It's even cooler to say, "I'm sure this is defined in an RFC somewhere."
</p>

<p class="aside ng-scope">
What's an RFC?

<a href="https://en.wikipedia.org/wiki/Request_for_Comments" target="_blank">RFC</a> stands for "request for comments." The first ones are from 1969 (back in the day of ARPANET, the precursor to the internet), and <a href="http://www.rfc-editor.org/rfc-index.html" target="_blank">we still get new ones every year</a>. RFCs define lots of conventions for how internet communications work. Like <a href="https://tools.ietf.org/html/rfc2616#section-10.4.5" target="_blank">how status code 404 means "not found"</a>. Hilariously, some of the latest RFCs spec a custom XML vocabulary for <em>writing RFCs</em>. Yo dog. Also there's <a href="https://www.rfc-editor.org/rfc/rfc3092.txt" target="_blank">this one on the history of calling variables "Foo."</a> Easy to get lost <a href="http://www.rfc-editor.org/rfc-index.html" target="_blank">browsing these</a>...
</p>

<p class="ng-scope">
It turns out the answer is "only alphanumerics, the special characters "<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars"><span class="ng-scope">$-_.+!*'(),</span></span>", and reserved characters used for their reserved purposes may be used unencoded within a URL" (<a href="https://www.rfc-editor.org/rfc/rfc1738.txt" target="_blank">RFC 1738</a>). "Reserved characters" with "reserved purposes" are characters like '?', which marks the beginning of a query string, and '#', which marks the beginning of a fragment/anchor. We definitely shouldn't use any of those. If we allowed '?' in the beginning of our slug, the characters after it would be interpreted as part of the query string and not part of the slug!
</p>

<p class="ng-scope">
So just alphanumerics and the "special characters" <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars"><span class="ng-scope">$-_.+!*'(),</span></span>. Are accented alphabetical characters allowed? No, according to <a href="http://tools.ietf.org/html/rfc3986#section-2" target="_blank">RFC 3986</a>.
</p>

<p class="ng-scope">
What about uppercase and lowercase? <a href="http://tools.ietf.org/html/rfc3986#section-3.2.2" target="_blank">Domains aren't case-sensitive</a> (so <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-googlecom"><span class="ng-scope">google.com</span></span> and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-googlecom-cap"><span class="ng-scope">Google.com</span></span> will always go to the same place), but the <em>path</em> portion of a URL <em>is</em> case-sensitive. If I query <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-parkerfoo"><span class="ng-scope">parker.com/foo</span></span> and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__url-parkerfoo-cap"><span class="ng-scope">parker.com/Foo</span></span>, I'm requesting <em>different</em> documents (although, as a site owner, I <em>may</em> choose to return the same document in response to both requests). So yes, lowercase and capital versions of the same letter can be treated as different characters in our slugs.
</p>



<p class="ng-scope">
Okay, so it seems like the set of allowed characters is <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-zcap"><span class="ng-scope">A-Z</span></span>, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-z"><span class="ng-scope">a-z</span></span>, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__r09"><span class="ng-scope">0-9</span></span>, and "<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars"><span class="ng-scope">$-_.+!*'(),</span></span>". The apostrophe character seems a little iffy, since sometimes URLs are surrounded by single quotes in HTML documents. So let's pull that one.
</p>

<p class="ng-scope">
In fact, in keeping with point (2) above about ease of typing, let's pull <em>all</em> the "special characters" from our list. It seems like a small loss on character count (8 characters) in exchange for a big win on readability and typeability. If we find ourselves wanting those extra characters, we can add add 'em back in.
</p>

<p class="ng-scope">
Ah, but what if a user is specifying her <em>own</em> slug? She might want to use underscores, or dashes, or parentheses...so let's say for <em>user-specified</em> slugs, we allow "<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars-no-apos"><span class="ng-scope">$-_.+!*(),</span></span>" (still no apostrophe).
</p>

<p class="aside ng-scope">
While we're on the topic of making URLs easy to type, we might want to consider constraining our character set to clear up common ambiguities. For example, not allowing both uppercase letter O and number 0. Or lowercase letter l and number 1. Font choice can help reduce these ambiguities, but we don't have any control over the fonts people use to display our shortlinks. This is a worthwhile consideration, but at the moment it's adding complexity to a question we're still trying to figure out. So let's just mention it and say, "This is something we want to keep an eye on for later, but let's put it aside for now." Your interviewer understands that you can't accomodate <em>everything</em> in your initial design, but she'll appreciate you showing an ability to anticipate what problems may come up in the user experience.
</p>

<p class="ng-scope">
Okay, so with <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-z"><span class="ng-scope">a-z</span></span>, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-zcap"><span class="ng-scope">A-Z</span></span>, and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__r09"><span class="ng-scope">0-9</span></span>, we have 26 + 26 + 10 = 62 possible characters in our randomly-generated slugs. And for user-generated slugs, we have another 10 characters ("<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars-no-apos"><span class="ng-scope">$-_.+!*(),</span></span>"), for 72 total.
</p>


<h3 class="ng-scope">
How many distinct slugs do we need?
</h3>


<p class="ng-scope">
About how many slugs do we need to be able to accomodate? This is a good question to ask your interviewer. She may want you to make a reasonable choice yourself. There's no one right answer; the important thing is to show some organized thinking.
</p><span class="ng-scope">


Here's one way to come up with a ballpark estimate: about how many new slugs might we create on a busy day? Maybe 100 per minute? Hard to imagine </span><em class="ng-scope">more</em><span class="ng-scope"> than that. That's </span><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mo>∗</mo><mn>6</mn><mn>0</mn><mo>∗</mo><mn>2</mn><mn>4</mn><mo>≈</mo><mn>1</mn><mn>4</mn><mn>5</mn></mrow><annotation encoding="application/x-tex">100 * 60 * 24 \approx 145</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mbin">∗</span><span class="mord">6</span><span class="mord">0</span><span class="mbin">∗</span><span class="mord">2</span><span class="mord">4</span><span class="mrel">≈</span><span class="mord">1</span><span class="mord">4</span><span class="mord">5</span></span></span></span></span><span class="ng-scope"> thousand new links a day. 52.5 million a year. What's a number of years that feels like "almost forever"? I'd say 100. So that's 5.2 </span><em class="ng-scope">trillion</em><span class="ng-scope"> slugs. That seems sufficiently large. It's pretty dependent on the accuracy of our estimate of 100 per minute. But it seems to be a pretty reasonable ceiling, and a purposefully high one. If we can accomodate that many slugs, we expect we'll be able to keep handing out random slugs effectively indefinitely.




</span><h3 class="ng-scope">
How short can we make our slugs while still getting enough distinct possibilities?
</h3>

<p class="ng-scope">
Let's return to the formula we came up with before: with a <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span></span></span></span></span>-character-long alphabet and slugs of length <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>, we get <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>c</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">c^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> possible slugs. We want ~5 trillion possible slugs. And we decided on a 62-character alphabet.
So <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mi>n</mi></msup><mo>≈</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">62^n \approx 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mrel">≈</span><span class="mord">5</span></span></span></span></span> trillion. We just have to solve for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.
</p>



<p class="ng-scope">
We might know that we need to take a logarithm to solve for <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>. But even if we know that, this is a tricky thing to eyeball. If we're in front of a computer or phone, we can just plug it in to wolfram alpha. Turns out the answer is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≈</mo><mn>7</mn><mi mathvariant="normal">.</mi><mn>0</mn><mn>9</mn></mrow><annotation encoding="application/x-tex">\approx7.09</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mrel">≈</span><span class="mord">7</span><span class="mord">.</span><span class="mord">0</span><span class="mord">9</span></span></span></span></span>. So 7 characters gets us most of the way to our target number of distinct possibilities.
</p>

<p class="ng-scope">
It's worth checking how many characters we could save by allowing "<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__special-chars-no-apos"><span class="ng-scope">$-_.+!*(),</span></span>" as well. So <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn><msup><mn>2</mn><mi>n</mi></msup><mo>=</mo><mn>5</mn><mi mathvariant="normal">.</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">72^n = 5.2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">7</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">5</span><span class="mord">.</span><span class="mord">2</span></span></span></span></span> trillion. We get <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≈</mo><mn>6</mn><mi mathvariant="normal">.</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">n\approx6.8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">≈</span><span class="mord">6</span><span class="mord">.</span><span class="mord">8</span></span></span></span></span>. Including the special characters would save us something like <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">.</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">.3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">.</span><span class="mord">3</span></span></span></span></span> characters on our slug length.
</p>

<p class="ng-scope">
Is it worth it? Of course, there's no such thing as a fraction of a character. If we really <em>had to</em> accomodate <em>at least</em> 5.2 trillion random slugs, we'd have to round up, which would mean 7.09 would round up to 8-character slugs for our 62-character alphabet (not including special characters) and 6.8 would round up to 7-character slugs for our 72-character alphabet (including special characters).
</p>

<p class="ng-scope">
But we don't <em>really</em> have to accomodate 5.2 trillion or more slugs. 5.2 trillion was just a ballpark estimate—and it was intended to be a <em>high ceiling</em> on how many slugs we expect to get. So let's stick with our first instinct to remove those special characters for readability purposes, and let's choose 7 characters for our slugs.
</p>

<p class="aside ng-scope">
At a glance, looks like bit.ly agrees with our choices! They seem to use the same alphabet as us (<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-zcap"><span class="ng-scope">A-Z</span></span>, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-z"><span class="ng-scope">a-z</span></span>, and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__r09"><span class="ng-scope">0-9</span></span>) and use 7 characters for each randomly-generated slug.
</p>

<div class="aside ng-scope">

<p>
For some added potential brevity, and some added possible random slugs, we could also allow for random slugs with <em>fewer</em> than 7 characters. How many additional random slugs would that get us?
</p>

<p>
If you're a whiz with mathematical series,you might know intuitively that the sum of these fewer-than-7-character slugs will be <em>far</em> less than the 7-character slugs. We can actually compute this to confirm.
</p>

<p>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">62^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">6</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> (for 6-char slugs), <em>plus</em> <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">62^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">5</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> (for 5-char slugs), <em>plus</em> <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">62^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">4</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> (for 4-char slugs) + <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">62^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> + <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">62^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> + <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mn>2</mn></mrow><annotation encoding="application/x-tex">62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord">2</span></span></span></span></span>. About 57 billion random slugs. Which isn't that much in comparison to 5.2 <em>trillion</em>—it's two orders of magnitude less.
</p>

<p>
Since this doesn't win us much, let's skip it.
</p>

<p>
One interesting lesson here: going from 6 characters to 7 characters gave us a <em>two orders of magnitude</em> leap in our number of possible slugs. Going from 7 characters to 8 should have an even more dramatic effect. So if and when we <em>do</em> start running out of 7-character random slugs, allowing just 1 more character will <em>dramatically</em> push back the point where we run out of random slugs.
</p>
</div>

<p class="ng-scope">
Okay, we know the characters we'll use for slugs. And we know how many characters we'll use. <strong>Next: how do we generate a random slug?</strong>
</p>



</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="gotcha">
    <div class="note-content" ng-transclude="">




<p class="ng-scope">
We could just make a random choice for each character:
</p>

<div code-block="question__url-shortener__generate-random-slug-1" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def generate_random_slug():
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    num_chars = 7
    return ''.join([random.choice(alphabet) for char in num_chars])</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
<strong>
But how do we ensure slugs are unique?
</strong>
Two general strategies:
</p>

<ol class="ng-scope">
<li>
"Re-roll" when we hit an already-used slug
</li>
<li>
Adjust our slug generation strategy to only ever give us un-claimed slugs.
</li>
</ol>

<p class="ng-scope">
If we're serious about our first 2 design goals (short slugs, and accomodating many different slugs), option (2) is clearly better than option (1). Why? As we have more and more slugs in our database, we'll get more and more collisions. For example, when we're 3/4 of the way through our set of possible 7-character slugs, we'd expect to have to make <em>four</em> "rolls" before arriving at a slug that isn't taken already. And it'll just keep going up from there.
</p>

<p class="ng-scope">
So let's try to come with a strategy for option (2). How could we do it?
</p>

<p class="ng-scope">
The answer is base conversion. <!--This comes up in a few different coding interview questions.-->
</p>

<h3 class="ng-scope">
Using base conversion to generate slugs
</h3>

<p class="ng-scope">
We usually use base-10 numbers, which allow 10 possible numerals:
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c0"><span class="ng-scope">0</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c1"><span class="ng-scope">1</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c2"><span class="ng-scope">2</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c3"><span class="ng-scope">3</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c4"><span class="ng-scope">4</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c5"><span class="ng-scope">5</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c6"><span class="ng-scope">6</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c7"><span class="ng-scope">7</span></span>, 
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c8"><span class="ng-scope">8</span></span>, and
<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c9"><span class="ng-scope">9</span></span>.
</p>

<p class="ng-scope">
Binary is base-2 and has 2 possible numerals: <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c0"><span class="ng-scope">0</span></span> and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__c1"><span class="ng-scope">1</span></span>.
</p>

<p class="ng-scope">
Our random slug alphabet has 62 possible numerals (<span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-zcap"><span class="ng-scope">A-Z</span></span>, <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__a-z"><span class="ng-scope">a-z</span></span>, and <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__url-shortener__r09"><span class="ng-scope">0-9</span></span>). So we can think of each of our possible "random" slugs as a unique <em>number</em>, expressed in base-62!
</p>

<p class="ng-scope">
So let's keep track of a global <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span>. When a request for a new random slug comes in, we simply convert that number to base-62 (using our custom numeral set) and return it. Oh, and we <em>increment</em> the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span>, in preparation for the next request for a random slug.
</p>

<div code-block="question__url-shortener__generate-random-slug-2" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def generate_random_slug():
    global current_id
    slug = base_conversion(current_id, base_62_alphabet)
    current_id += 1
    return slug</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="aside ng-scope">
Where should we store our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span>? We can keep it in memory on our webserver, perhaps with a regular writethrough to the database, to make it persistent even if the webserver crashes. But what if we have multiple front-end webservers?<!-- More on this in the bonus section :)-->
</p>


<p class="ng-scope">
How do we do the base conversion? This is easiest to show by example.
</p>

<p class="ng-scope">
Take the number 125 in base 10.
</p>

<p class="ng-scope">
It has a 1 in the 100s place, a 2 in the 10s place, and a 5 in the 1s place. In general, the places in a base-10 number are:
</p>

<ul class="ng-scope">
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">10^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">10^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<em>
etc
</em>
</li>
</ul>

<p class="ng-scope">
The places in a base-<em>62</em> number are:
</p>

<ul class="ng-scope">
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">62^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">62^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mn>8</mn><mn>4</mn><mn>4</mn></mrow><annotation encoding="application/x-tex">62^2=3,844</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.00855em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">3</span><span class="mpunct">,</span><span class="mord">8</span><span class="mord">4</span><span class="mord">4</span></span></span></span></span>
</li>
<li>
<span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>2</mn><mn>3</mn><mn>8</mn><mo separator="true">,</mo><mn>3</mn><mn>2</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">62^3=238,328</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.00855em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">2</span><span class="mord">3</span><span class="mord">8</span><span class="mpunct">,</span><span class="mord">3</span><span class="mord">2</span><span class="mord">8</span></span></span></span></span>
</li>
<li>
<em>
etc
</em>
</li>
</ul>



<p class="ng-scope">
So to convert 125 to base-62, we distribute that 125 across these base-62 "places." The highest "place" that can take some is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">62^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>, which is 62. 125/62 is 2, with a remainder of 1. So we put a 2 in the 62's place and a 1 in the 1's place. So our answer is 21.
</p>

<p class="ng-scope">
What about a higher number—say, 7,912?
</p>

<p class="ng-scope">
Now we have enough to put something in the 3,844's place (the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">62^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span>'s place). 7,912 / 3,844 is 2 with a remainder of 224. So we put a 2 in the 3,844's place, and we distribute that remaining 224 across the remaining places—the 62's place and the 1's place. 224 / 62 is 3 with a remainder of 38. So we put a 3 in the 62's place and a 38 in the 1's place. We have this three-digit number: 2 3 38.
</p>

<p class="ng-scope">
Now, that "38" represents <em>one</em> numeral in our base-62 number. So we need to convert that 38 into a specific choice from our set of numerals: a-z, A-Z, and 0-9. 
</p>

<p class="ng-scope">
Let's number each of our 62 numerals, like so:
</p>

<div code-block="question__url-shortener__base-62-mappings" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">0: 0,
1: 1,
2: 2,
3: 3,
...
10: a,
11: b,
12: c,
...
36: A,
37: B,
38: C,
...
62: Z</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
As you can see, our "38th" numeral is "C." So we convert that 38 to a "C." That gives us 23C.
</p>


<!--
TODO:
- example that shows more different letters
- picture-ify this
-->


<p class="aside ng-scope">
Can we convert from slugs back to numbers? Yep, easy. Take 23C, for example. Translate the numerals back to their id numbers, so we get 2 3 38. That 2 is in the 3844's place, so we take 2 * 3844. That 3 is in the 62's place, so we take 3 * 62. That 38 is in the 1's place, so we take 38 * 1. We add up all those results to get our original 7,912.
</p>

<p class="ng-scope">
One potential issue: the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span> could give us something that a user has already claimed as a user-generated slug. We'll need to check for that, and if it happens we'll just increment the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span> and try again (and again, potentially, until we hit a "random" slug that hasn't been used yet).
</p>

<div code-block="question__url-shortener__generate-random-slug-3" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">def generate_random_slug():
    global current_id
    while True:
        slug = base_conversion(current_id, base_62_alphabet)
        current_id += 1

        # make sure that slug isn't already used
        existing = db.get(slug)
        if not existing:
            return slug</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Okay, this'll work! What's next? Let's look back at our design goals!
</p>

<ol class="ng-scope">
<li>
We should be able to store a <em>lot</em> of links.
</li>
<li>
Our shortlinks should be as short as possible.
</li>
<li>
Following a shortlink should be <em>fast</em>.
</li>
<li>
The shortlink follower should be resilient to load spikes.
</li>
</ol>

<p class="ng-scope">
We're all set on (1) and (2)! Let's start tackling (3) and (4). How do we scale our link follower to be fast and resilient to load spikes?
</p>

<p class="aside ng-scope">
Beware of premature optimization! That always looks bad. Don't just jump around random ideas for optimizations. Instead, focus on asking yourself <em>which thing is likely to bottleneck first</em> and optimizing around that.
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="gotcha">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
The database read to get the destination for the given slug is certainly going to be our first bottleneck. In general, database operations usually bottleneck before business logic.
</p>

<!--
TODO: we don't do this anymore
<p>
We can even say that in this specific case, the rest of what we do at our redirect endpoint (string manipulation on the slug) is all constant-time. How?
</>

<ol>
<li>
- first we check the length of the slug. if it's longer than 7 characters (which we can check in constant time), we know it's user-generated so we just do the lookup.
</li>
<li>
- if it's less than 7 characters, we know we're dealing with a small and constant number of characters, so the base conversion is quick.
</li>
</ol>
-->

<p class="ng-scope">
To figure out how to get these reads nice and fast, we should get specific about <em>how</em> we're storing our shortlinks. To start, what kind of database should we use?
</p>


</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="gotcha">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
Database choice is a very broad issue. And it's a contentious one. There are lots of different opinions about how to approach this. Here's how we'll do it:
</p>

<p class="ng-scope">
Broadly (this is definitely a simplification), there are two main types of databases these days:
</p>

<ol class="ng-scope">
<li>
Relational databases (RDBMs) like MySQL and Postgres. <!--, Oracle, and Microsoft SQL Server-->
</li>
<li>
"NoSQL"-style databases like BigTable and Cassandra. <!--, and Hadoop. -->
</li>
</ol>

<p class="ng-scope">
In general (again, this is a simplification), relational databases are great for systems where you expect to make lots of complex queries involving joins and such—in other words, they're good if you're planning to look at the <em>relationships</em> between things a lot. NoSQL databases don't handle these things quite as well, but in exchange they're faster for writes and simple key-value reads.
</p>

<p class="ng-scope">
Looking at our app, it seems like relational queries aren't likely to be a big part of our app's functionality, even if we added a few of the obvious next features we might want. So let's go with NoSQL for this.
</p>

<p class="ng-scope">
Which NoSQL database do we use? Lots of options, each with their own pros and cons. Let's keep our discussion and pseudocode generic for now.
</p>

<p class="aside ng-scope">
We might consider adding an abstraction layer between our application and the database, so that we can change over to a new one if our needs change or if some new hotness comes out.
</p>

<p class="ng-scope">
Okay, so we have our data in a NoSQL-type database. How do we un-bottleneck database reads?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="gotcha">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
The first step is to make sure we're indexing the right way. In a NoSQL context, that means carefully designing our keys. In this case, the obvious choice is right: making the key for each row in the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__shortlink"><span class="ng-scope">ShortLink</span></span> table be <em>the slug</em>.
</p>

<div class="aside ng-scope">
<p>
If we used a SQL-type database like MySQL or Postgres, we usually default to having our key field be a standard auto-incrementing integer called "id" or "index." But in this case, because we know that slugs will be unique, there's no need for an integer id—the slug is enough of a unique identifier.
</p>

<p>
BUT here's where it gets clever: what if we <em>represented the slug</em> as an auto-incrementing integer field? We'd just have to use our base conversion function to convert them to slugs! This would also give us tracking of our global <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span> for free—MySQL would keep track of the highest current id in the table when it auto increments. Careful though: user-generated slugs throw a pretty huge monkey wrench into things with this strategy! How can you maintain uniqueness across user-generated and randomly-generated slugs without breaking the auto-incrementing ids for randomly-generated slugs? 
</p>
</div>

<p class="ng-scope">
How else can we speed up database reads?
</p>

<p class="ng-scope">
We could put as much of the data <em>in memory</em> as possible, to avoid disc seeks.
</p>



<p class="ng-scope">
This becomes especially important when we start getting a heavy load of requests to a single link, like if one of our links is on the front page of Reddit. If we have the redirect URL right there in memory, we can process those redirects quickly.
</p>

<p class="ng-scope">
Depending on the database we use, it might already have an in-memory cache system. To get more links in memory, we may be able to configure our database to use more space for its cache.
</p>

<p class="ng-scope">
If reads are still slow, we could research adding a caching layer, like memcached. Importantly, this <em>might</em> not save us time on reads, if the cache on the database is already pretty robust. It adds complexity—we now have two sources of truth, and we need to be careful to keep them in sync. For example, if we let users edit their links, we need to push those edits to both the database and the cache. It could also <em>slow down</em> reads if we have lots of cache misses.
</p>

<p class="ng-scope">
If we <em>did</em> add a caching layer, there are a few things we could talk about:
</p>

<ol class="ng-scope">
<li>
The eviction strategy. If the cache is full, what do we remove to make space? The most common answer is an LRU ("least recently used") strategy.
</li>
<li>
Sharding strategy. Sharding our cache lets us store more stuff in memory, because we can use more machines. But how do we decide which things go on which shard? The common answer is a "hash and mod strategy"—hash the key, mod the result by the number of shards, and you get a shard number to send your request to. But then how do you add or remove a shard without causing an unmanageable spike in cache misses?
</li>
</ol>

<p class="ng-scope">
Of course, we could shard our underlying database instead of, or in addition to caching. If the database has a built-in in-memory cache, sharding the data would allow us to keep more of our data in working memory without an additional caching layer! Database sharding has some of the same challenges as cache sharding. Adding and removing shards can be painful, as can migrating the schema without site downtime. That said, some NoSQL databases have great sharding systems built right in, like Cassandra.
</p>

<p class="ng-scope">
This should get our database reads nice and fast.
</p>

<p class="ng-scope">
The next bottleneck might be processing the actual web requests. To remedy this, we should set up multiple webserver workers. We can put them all behind a load balancer that distributes incoming requests across the workers. Having multiple web servers adds some complexity to our database (and caching layers) that we'll need to consider. They'll need to handle more simultaneous connections, for example. Most databases are pretty good at this by default.
</p>

<p class="ng-scope">
Okay, now our redirects should go pretty quick, and should be resilient to load spikes. We have a solid system that fits all of our design goals!
</p>

<ol class="ng-scope">
<li>
We can store a <em>lot</em> of links.
</li>
<li>
Our shortlinks are as short as possible.
</li>
<li>
Following a shortlink is <em>fast</em>.
</li>
<li>
The shortlink follower is resilient to load spikes.
</li>
</ol>


</div>
</div>

















</div>

    
</div>










<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
As with all system design questions, there are a bunch more directions to go into with this one. A few ideas:
</p>
<p class="ng-scope">

</p>
<ol class="ng-scope">
<li>
At some point we'd probably want to consider splitting our link <em>creation</em> endpoint across multiple workers as well. This adds some complexity: how do they stay in sync about what the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__url-shortener__random-slug-id"><span class="ng-scope">current_random_slug_id</span></span> is?
</li>
<li>
Uptime and "single point of failure" (SPOF) are common concerns in system design. Are there any SPOFs in our current architecture? How can we ensure that an individual machine failure won't bring down our whole system?
</li>
<li>
Analytics. What if we wanted to show users some analytics about the links they've created? What anlytics could we show, and how would we store and display them?
</li>
<li>
Editing and deleting. How would we add edit and delete features?
</li>
<li>
Optimizing for implementation time. We built something optimized for scale. How would our system design be different if we were just trying to get an MVP off the ground as quickly as possible?
</li>
</ol>

















</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"question__url-shortener__r09": {"default": "0-9"}, "question__url-shortener__c1": {"default": "1"}, "question__url-shortener__mysite-shortlink": {"default": "ca.ke/mysite"}, "question__url-shortener__url-cake-slug": {"default": "ca.ke/$slug"}, "question__url-shortener__c3": {"default": "3"}, "question__url-shortener__url-parkerfoo": {"default": "parker.com/foo"}, "question__url-shortener__a-zcap": {"default": "A-Z"}, "question__url-shortener__url-googlecom": {"default": "google.com"}, "question__url-shortener__url-googlecom-cap": {"default": "Google.com"}, "question__url-shortener__slug-favorite-recipes": {"default": "parkers-favorite-recipes"}, "question__url-shortener__mysite": {"default": "mysite"}, "question__url-shortener__c0": {"default": "0"}, "question__url-shortener__url-parkers-resume": {"default": "ca.ke/parkers-resume"}, "question__url-shortener__c2": {"default": "2"}, "question__url-shortener__special-chars": {"default": "$-_.+!*'(),"}, "question__url-shortener__c4": {"default": "4"}, "question__url-shortener__c5": {"default": "5"}, "question__url-shortener__c6": {"default": "6"}, "question__url-shortener__c7": {"default": "7"}, "question__url-shortener__c8": {"default": "8"}, "question__url-shortener__c9": {"default": "9"}, "question__url-shortener__url-parkerfoo-cap": {"default": "parker.com/Foo"}, "question__url-shortener__url-w": {"default": "/w/"}, "question__url-shortener__url-about": {"default": "ca.ke/about"}, "question__url-shortener__url-shortlink-endpoint": {"default": "ca.ke/api/v1/shortlink"}, "question__url-shortener__url-w-about": {"default": "ca.ke/w/about"}, "question__url-shortener__url-cake-r-slug": {"default": "ca.ke/r/$slug"}, "question__url-shortener__a-z": {"default": "a-z"}, "question__url-shortener__url-favorite-recipes": {"default": "ca.ke/parkers-favorite-recipes"}, "question__url-shortener__special-chars-no-apos": {"default": "$-_.+!*(),"}}, "code-blocks": {"question__url-shortener__redirect-endpoint": {"default": "def redirect(request):\n    destination = DB.get('Links', 'destination', {'slug': request.path})\n    return Redirect302(destination)", "cpp": "Response redirect(const Request& request) {\n    string destination = DB.getLinkDestination(request.getPath());\n    return Response(302, destination); // HTTP 302 REDIRECT response\n}", "c": {"code": "Response * redirect(const Request *request) {\n    char *destination = dbGetLinkDestination(requestPath(request));\n    return responseNew(302, destination);  // HTTP 302 REDIRECT response\n}", "tests": "// Just make sure it does compile"}}, "question__url-shortener__models-2": {"default": "Link\n- slug\n- long_link"}, "question__url-shortener__models-3": {"default": "Link\n- slug\n- destination"}, "question__url-shortener__create-endpoint": {"default": "def shortlink(request):\n    if request.method is not 'POST':\n        return Error501\n    \n    destination = request.data.destination\n\n    # if they included a slug, use that\n    if request.data.slug:\n        slug = request.data.slug\n\n    # else, make them one\n    else:\n        slug = generate_new_random_slug()\n\n    DB.insert('Links', {'slug': slug, 'destination': destination})\n\n    response_body = {\n        'slug' : slug,\n        }\n\n    return Success200(json.format(response_body))", "cpp": "Response shortlink(const Request& request)\n{\n    if(request.method != REQUEST_METHOD_POST) {}\n        return Response(501); // HTTP 501 NOT IMPLEMENTED response\n    }\n\n    string destination = request.getData().getDestination();\n    string slug = request.getData().getSlug();\n\n    // if they not included a slug, make new one\n    if(slug.empty()) {\n        slug = generateRandomSlug();\n    }\n    \n    DB.insertLink(slug, destination);\n\n    string response_body = \"{ 'slug' : '\" + slug + \"' }\";\n\n    return Response(200, response_body); // HTTP 200 OK response\n}", "c": {"setup": "char * generateRandomSlug() { return NULL; }", "code": "char * slugToJson(const char *slug) {\n    char format[] = \"{ 'slug' : '%s'; }\";\n    size_t size = strlen(format) + strlen(slug) - 2 /* %s */ + 1 /* \\0 */;\n    char *asJson = malloc(size);  // Should check for NULL\n    snprintf(asJson, size, \"{ 'slug' : '%s'; }\", slug);\n    return asJson;\n}\n\nResponse * shortlink(const Request *request) {\n    if (requestMethod(request) != REQUEST_METHOD_POST) {\n        return responseNew(501, \"\");  // HTTP 501 NOT IMPLEMENTED response\n    }\n\n    char *destination = requestDestination(request);\n    char *slug = requestSlug(request);\n\n    // if they not included a slug, make new one\n    if (slug == NULL) {\n        slug = generateRandomSlug();\n    }\n\n    dbInsertLink(slug, destination);\n    char *response_body = slugToJson(slug);\n    return responseNew(200, response_body);  // HTTP 200 OK response\n}", "tests": "// Just make sure it does compile"}}, "question__url-shortener__models-1": {"default": "Link\n- short_link\n- long_link"}, "question__url-shortener__creation-request": {"default": "$ curl --data '{\"destination\": \"interviewcake.com\"}' https://ca.ke/api/v1/shortlink\n{\n  \"slug\": \"ae8uFt\",\n  \"destination\": \"interviewcake.com\"\n}"}, "question__url-shortener__models-4": {"default": "ShortLink\n- slug\n- destination"}, "setup": {"cpp": "// nothing to test yet", "c": "// Testing if code does compile is better than testing nothing\n\n// DB\nvoid dbInsertLink(const char *slug, const char *destination) {}\nchar * dbGetLinkDestination(const char *slug) { return NULL; }\nint dbCheckSlugExists(const char *slug) { return 0; }\n\n// Request\nconst int REQUEST_METHOD_POST = 0;\ntypedef struct Request {} Request;\nchar * requestDestination(const Request *request) { return NULL; }\nchar * requestSlug(const Request *request) { return NULL; }\nint requestMethod(const Request *request) { return REQUEST_METHOD_POST; }\nchar * requestPath(const Request *request) { return NULL; }\n\n// Response\ntypedef struct Response {} Response;\nResponse * responseNew(int status, const char *body) { return NULL; }\n\n// Slug generation utilities\nsize_t getRandomInRange(size_t lower, size_t upper) { return 0; }\nchar * baseConversion(unsigned long long number, char *alphabet) { return NULL; }\nconst char base62Alphabet[] = \"\";", "java": "int[][][] tests = new int[][][]{\n};", "ruby": "tests = [\n]", "python": "tests = [\n]"}, "question__url-shortener__base-62-mappings": {"default": "0: 0,\n1: 1,\n2: 2,\n3: 3,\n...\n10: a,\n11: b,\n12: c,\n...\n36: A,\n37: B,\n38: C,\n...\n62: Z"}, "question__url-shortener__generate-random-slug-3": {"default": "def generate_random_slug():\n    global current_id\n    while True:\n        slug = base_conversion(current_id, base_62_alphabet)\n        current_id += 1\n\n        # make sure that slug isn't already used\n        existing = db.get(slug)\n        if not existing:\n            return slug", "cpp": "unsigned long long currentId = 0;\n\nstring generateRandomSlug()\n{\n    string slug;\n    while (true) {\n        unsigned long long newId = ++currentId;\n        slug = baseConversion(newId, base62Alphabet);\n\n        // make sure that slug isn't already used\n        if(!DB.checkSlugExists(slug)) {\n            break;\n        }\n    }\n    return slug;\n}", "c": {"code": "unsigned long long currentId = 0;\nchar * generateRandomSlug() {\n    char *slug;\n    while (1) {\n        unsigned long long newId = ++currentId;\n        slug = baseConversion(newId, base62Alphabet);\n\n        // make sure that slug isn't already used\n        if(!dbCheckSlugExists(slug)) {\n            break;\n        }\n        free(slug);\n    }\n    return slug;\n}", "tests": "// Just make sure it does compile"}}, "question__url-shortener__generate-random-slug-2": {"default": "def generate_random_slug():\n    global current_id\n    slug = base_conversion(current_id, base_62_alphabet)\n    current_id += 1\n    return slug", "cpp": "unsigned long long currentId = 0;\nstring generateRandomSlug()\n{\n    unsigned long long newId = ++currentId;\n    return baseConversion(newId, base62Alphabet);\n}", "c": {"code": "unsigned long long currentId = 0;\nchar * generateRandomSlug() {\n    unsigned long long newId = ++currentId;\n    return baseConversion(newId, base62Alphabet);\n}", "tests": "// Just make sure it does compile"}}, "question__url-shortener__generate-random-slug-1": {"default": "def generate_random_slug():\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    num_chars = 7\n    return ''.join([random.choice(alphabet) for char in num_chars])", "cpp": "// defined elsewhere\nsize_t getRandomInRange(size_t lower, size_t upper);\n\nstring generateRandomSlug()\n{\n    const char * alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const size_t alphabetLength = strlen(alphabet);\n    const size_t numChars = 7;\n    string result;\n    for(size_t i = 0; i &lt; numChars; ++i) {\n        size_t randomIndex = getRandomInRange(0, alphabetLength - 1);\n        result += alphabet[randomIndex];\n    }\n    return result;\n}", "c": {"code": "char * generateRandomSlug() {\n    size_t i;\n    const char alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const size_t alphabetLength = strlen(alphabet);\n    const size_t numChars = 7;\n    char *result = malloc(numChars + 1);  // Should check for NULL\n    for(i = 0; i &lt; numChars; ++i) {\n        size_t randomIndex = getRandomInRange(0, alphabetLength - 1);\n        result[i] = alphabet[randomIndex];\n    }\n    return result;\n}", "tests": "// Just make sure it does compile"}}}, "vars": {"question__url-shortener__random-slug-id": {"snake": "current_random_slug_id", "camel": "currentRandomSlugId"}, "question__url-shortener__long_link": {"default": "long_link"}, "question__url-shortener__destination": {"default": "destination"}, "question__url-shortener__link": {"default": "Link"}, "question__url-shortener__short_link": {"default": "short_link"}, "question__url-shortener__slug": {"default": "slug"}, "question__url-shortener__shortlink": {"default": "ShortLink"}, "question__url-shortener__dollar-slug": {"default": "$slug"}}, "funcs": {"question__url-shortener__generate_new_random_slug": {"default": "generate_new_random_slug"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Try to get as far as you can before showing the answer!</p>

        <div class="btn-set btn-set-during" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during ng-hide" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I give up!</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/url-shortener" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/url-shortener" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/url-shortener&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/url-shortener" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/url-shortener" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/url-shortener&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./44.URL Shortener _ Interview Cake_files/jquery.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./44.URL Shortener _ Interview Cake_files/underscore-min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/angular-seo.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./44.URL Shortener _ Interview Cake_files/base.js"></script>

    
    <script src="./44.URL Shortener _ Interview Cake_files/prism.min.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/codemirror.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/python.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/ruby.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/javascript.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/clike.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/php.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/haskell.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./44.URL Shortener _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./44.URL Shortener _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./44.URL Shortener _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./44.URL Shortener _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="pm1gup6yJwhzdT65kxMsdNkbR70OhbTUWVqCMuhsf5zg2YibI21LKwITcWghvp79">
<div id="loading">
. . .
</div>


<link href="./44.URL Shortener _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default411793_provider" id="stripeXDM_default411793_provider" src="./44.URL Shortener _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./44.URL Shortener _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket49632" src="./44.URL Shortener _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>