<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0060)https://www.interviewcake.com/question/python/merging-ranges -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./04.Merging Meeting Times _ Interview Cake_files/track"></script><script type="text/javascript" src="./04.Merging Meeting Times _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script id="facebook-jssdk" src="./04.Merging Meeting Times _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/conversion_async.js"></script><script type="text/javascript" async="" src="./04.Merging Meeting Times _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./04.Merging Meeting Times _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":0,"agent":"","applicationID":"7328113","applicationTime":290,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/merging-ranges">
        <meta name="description" content="Write a function for merging meeting times given everyone&#39;s schedules. It&#39;s an enterprise end-to-end scheduling solution, dog.">

        

        <meta property="og:title" content="Merging Meeting Times | Interview Cake">
        <meta property="og:description" content="Write a function for merging meeting times given everyone&#39;s schedules. It&#39;s an enterprise end-to-end scheduling solution, dog.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/merging-ranges">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Merging Meeting Times | Interview Cake">
        <meta name="twitter:description" content="Write a function for merging meeting times given everyone&#39;s schedules. It&#39;s an enterprise end-to-end scheduling solution, dog.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Merging Meeting Times | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./04.Merging Meeting Times _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./04.Merging Meeting Times _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./04.Merging Meeting Times _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./04.Merging Meeting Times _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./04.Merging Meeting Times _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./04.Merging Meeting Times _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./04.Merging Meeting Times _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./04.Merging Meeting Times _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./04.Merging Meeting Times _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./04.Merging Meeting Times _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/merging-ranges" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/merging-ranges" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/merging-ranges" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/merging-ranges" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change" aria-describedby="tooltip609418">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip609418" style="top: 92px; left: 138.5px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Making Change</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: -160px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: 0px;"></div>

    <div class="scroll-on-hover left ng-hide" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;merging-ranges&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Merging Meeting Times" data-meta_desc="Write a function for merging meeting times given everyone&#39;s schedules. It&#39;s an enterprise end-to-end scheduling solution, dog." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="5" data-num-hints="7" data-num-gotchas="5" ng-init="setNumHints(7); setNumGotchas(5); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
Your company built an in-house calendar tool called HiCal. You want to add a feature to see the times in a day when <em>everyone</em> is available.
</strong>
</p>
<p class="ng-scope">
To do this, you’ll need to know when <em>any</em> team is having a meeting. In HiCal, a meeting is stored as <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__meeting-explanation"><span concept="tuple" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">tuples</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>A <strong>tuple</strong> is a list of elements:</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-example"><div code-block="concept__tuple__python-tuple-example" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"My name is Parker"</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p>
(Tuples are usually notated with parentheses to differentiate them from lists.)
</p>

<p>Like <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__standard-list"><span class="ng-scope">list</span></span>s, tuples are <strong>ordered</strong> and you can access elements by their index:</p>


<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-access-index"><div code-block="concept__tuple__python-tuple-access-index" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">cake_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'angel'</span><span class="token punctuation">,</span> <span class="token string">'bundt'</span><span class="token punctuation">)</span>

cake_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># returns: 'angel'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuples-are-mutable-or-immutable"><p class="ng-scope">But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-item-assignment"><div code-block="concept__tuple__python-tuple-item-assignment" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">cake_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'angel'</span><span class="token punctuation">,</span> <span class="token string">'bundt'</span><span class="token punctuation">)</span>
cake_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'carrot'</span>
<span class="token comment" spellcheck="true"># raises: TypeError: 'tuple' object does not support item assignment</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p>
Tuples can have <strong>any number of elements</strong> 
(the 'tu' in tuple doesn't mean 'two', it's just a generic name taken from words like 'septuple' and 'octuple').
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__cpp-tuples-number-of-elements"></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-many-elements"><div code-block="concept__tuple__python-tuple-many-elements" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__tuple__python-tuple-item-assignment": {"default": "cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment"}, "concept__tuple__cpp-tuple-many-elements": {"default": "(90, 4, 54)\n(True, False, True, True, False)"}, "concept__tuple__python-tuple-access-index": {"default": "cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'"}, "concept__tuple__cpp-tuple-example": {"default": "(17, 3, \"My name is Parker\")"}, "concept__tuple__cpp-tuple-item-assignment": {"default": "std::tuple&lt;const char*, const char*> cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\n// works fine, since \"carrot\" and \"bundt\" are both const char*s\nstd::get&lt;1>(t) = \"carrot\";\n\n// causes a compiler error, because 3.14159 is a double,\n// but our tuple has a const char * in that position\nstd::get&lt;1>(t) = 3.14159;"}, "concept__tuple__python-tuple-example": {"default": "(17, 3, \"My name is Parker\")"}, "concept__tuple__python-tuple-many-elements": {"default": "(90, 4, 54)\n(True, False, True, True, False)"}, "concept__tuple__cpp-tuple-access-index": {"default": "std::tuple&lt;const char*, const char*> cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\nstd::get&lt;0>(cakeTuple);\n// returns \"angel\""}}, "words": {"concept__tuple__tuple-example": {"c": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "javascript": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "python": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "default": "<div code-block=\"python-tuple-example\">\n</div>", "ruby": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "cpp": "<div code-block=\"cpp-tuple-example\" language=\"cpp\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "java": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>"}, "concept__tuple__cpp-tuples-number-of-elements": {"c": "", "javascript": "", "python": "", "default": "", "ruby": "", "cpp": "<p class=\"aside\">\n    In C++, there are some limitations on how large tuples can be depending on your compiler. \n    Don't stress about this limit though... tuples with a reasonable number of elements should work just fine.\n</p>", "java": ""}, "concept__tuple__tuples-are-mutable-or-immutable": {"c": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "javascript": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "python": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "default": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "ruby": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "cpp": "<p>\n    In most languages (like Python) tuples are <strong>immutable</strong>, meaning you can't change the stored values after creation. C++ tuples are a bit funky, \n    because they are not completely immutable&#8212;you can change the value of each tuple element, but only if the new element and the old element are of the same type.\n</p>", "java": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>"}, "concept__tuple__tuple-access-index": {"c": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "javascript": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "python": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "default": "<div code-block=\"python-tuple-access-index\"></div>", "ruby": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "cpp": "<div code-block=\"cpp-tuple-access-index\" language=\"cpp\" translation-highlighting=\"static\">std::tuple&lt;const char*, const char*&gt; cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\nstd::get&lt;0&gt;(cakeTuple);\n// returns \"angel\"</div>", "java": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>"}, "concept__tuple__standard-list": {"c": "array", "python": "list", "php": "array", "javascript": "array", "objectivec": "array", "csharp": "list", "default": "list", "ruby": "array", "cpp": "vector", "java": "array", "swift": "array"}, "concept__tuple__tuple-item-assignment": {"c": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "javascript": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "python": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "default": "<div code-block=\"python-tuple-item-assignment\"></div>", "ruby": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "cpp": "<div code-block=\"cpp-tuple-item-assignment\" language=\"cpp\" translation-highlighting=\"static\">std::tuple&lt;const char*, const char*&gt; cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\n// works fine, since \"carrot\" and \"bundt\" are both const char*s\nstd::get&lt;1&gt;(t) = \"carrot\";\n\n// causes a compiler error, because 3.14159 is a double,\n// but our tuple has a const char * in that position\nstd::get&lt;1&gt;(t) = 3.14159;</div>", "java": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>"}, "concept__tuple__tuple-many-elements": {"c": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "javascript": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "python": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "default": "<div code-block=\"python-tuple-many-elements\">\n</div>", "ruby": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "cpp": "<div code-block=\"cpp-tuple-many-elements\" language=\"cpp\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "java": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span><span class="ng-scope"> of integers </span><span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merging-ranges__start-time-end-time"><span class="ng-scope">(start_time, end_time)</span></span></span>. These integers represent the number of 30-minute blocks past 9:00am.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__meeting-class"></span>

<p class="ng-scope">
For example:
</p>
<div code-block="question__merging-ranges__example-meetings" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># meeting from 10:00 – 10:30 am</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># meeting from 12:00 – 1:30 pm</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Write a function <span class="ic-function ng-isolate-scope" func="question__merging-ranges__merge-ranges"><span class="name" ng-transclude=""><span class="ng-scope">merge_ranges</span></span>()</span> that takes <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__a-list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> of meeting time ranges and returns <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__a-list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> of condensed ranges.
</p>
<p class="ng-scope">
For example, given:
</p>
<div code-block="question__merging-ranges__example-input" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
your function would return:
</p>
<div code-block="question__merging-ranges__example-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
<small><strong>Do not assume the meetings are in order.</strong> The meeting times are coming from multiple teams.</small>
</p>
<p class="ng-scope">
<small><strong>Write a solution that's efficient even when we can't put a nice upper bound on the numbers representing our time ranges.</strong> Here we've simplified our times down to the number of 30-minute slots past 9:00 am. But we want the function to work even for very large numbers, like Unix timestamps. In any case, the spirit of the challenge is to merge meetings where <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merging-ranges__start-time"><span class="ng-scope">start_time</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merging-ranges__end-time"><span class="ng-scope">end_time</span></span> don't have an upper bound.
</small></p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Look at this case:
</p>
<div code-block="question__merging-ranges__meetings-touch" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
These meetings should probably be merged, although they don't exactly "overlap"—they just "touch." Does your function do this?
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Look at this case:
</p>
<div code-block="question__merging-ranges__meeting-subsumed" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Notice that although the second meeting starts later, it ends before the first meeting ends. Does your function correctly handle the case where a later meeting is "subsumed by" an earlier meeting?
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Look at this case:
</p>
<div code-block="question__merging-ranges__all-meetings-merge" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Here <em>all</em> of our meetings should be merged together into just <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merging-ranges__one-ten"><span class="ng-scope">(1, 10)</span></span>. We need keep in mind that after we've merged the first two we're not done with the result—the result of that merge <em>may itself need to be merged into other meetings as well</em>.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Make sure that your function won't "leave out" the <em>last</em> meeting.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>
</div>
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we only had two ranges? Let's take:
</p>
<div code-block="question__merging-ranges__two-ranges-input" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
These meetings clearly overlap, so we should merge them to give:
</p>
<div code-block="question__merging-ranges__two-ranges-output" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
But how did we know that these meetings overlap?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We could tell the meetings overlapped because the <em>end time</em> of the first one was after the <em>start time</em> of the second one! But our ideas of "first" and "second" are important here—this only works after we ensure that we treat the meeting that <em>starts earlier</em> as the "first" one.
</p>

<p class="ng-scope">
How would we formalize this as an algorithm? <strong>Be sure to consider these edge cases:</strong>
</p>

<ol class="ng-scope">
<li>
The end time of the first meeting and the start time of the second meeting are equal. For example: <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merging-ranges__meetings-with-equal-start-and-end-times"><span class="ng-scope">[(1, 2), (2, 3)]</span></span>
</li>
<li>
The second meeting ends before the first meeting ends. For example: <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__merging-ranges__second-meeting-inside-first-meeting"><span class="ng-scope">[(1, 5), (2, 3)]</span></span>
</li>
</ol>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Here's a formal algorithm:
</p>

<ol class="ng-scope">
<li>
We treat the meeting with earlier start time as "first," and the other as "second."
</li>
<li>
If the end time of the first meeting is <em>equal to or greater than</em> the start time of the second meeting, we merge the two meetings into one time range. The resulting time range's start time is the first meeting's start, and its end time is <em>the later of</em> the two meetings' end times.
</li>
<li>
Else, we leave them separate.
</li>
</ol>

<p class="ng-scope">
So, we could compare <em>every</em> meeting to <em>every other</em> meeting in this way, merging them or leaving them separate.
</p>

<p class="ng-scope">
Comparing <em>all pairs</em> of meetings would take <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time. We can do better!
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we're going to beat <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time, maybe we're going to get <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time? Is there a way to do this in one pass?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
It'd be great if, for each meeting, we could just try to merge it with the <em>next</em> meeting. But that's definitely not sufficient, because the ordering of our meetings is random. There might be a non-next meeting that the current meeting could be merged with.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What if we sorted our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> of meetings by start time?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Then any meetings that could be merged would always be adjacent!
</p>
<p class="ng-scope">
So we could sort our meetings, then walk through the sorted <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> and see if each meeting can be merged with the one after it.
</p>
<p class="ng-scope">
Sorting takes <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case. If we can then do the merging in one pass, that's another <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time, for <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> overall. That's not as good as <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, but it's better than <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>!
</p>
</div>
</div>

</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
First, we sort our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> of meetings by start time so any meetings that might need to be merged are now next to each other.
</p>

<p class="ng-scope">
Then we walk through our sorted meetings from left to right. At each step, either:
</p>

<ol class="ng-scope">
<li>
We <em>can</em> merge the current meeting with the previous one, so we do.
</li>
<li>
We <em>can't</em> merge the current meeting with the previous one, so we know the previous meeting can't be merged with any future meetings and we throw the current meeting into <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__merging-ranges__merged-meetings"><span class="ng-scope">merged_meetings</span></span>.
</li>
</ol>

<div code-block="question__merging-ranges__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">merge_ranges</span><span class="token punctuation">(</span>meetings<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># sort by start times</span>
    sorted_meetings <span class="token operator">=</span> sorted<span class="token punctuation">(</span>meetings<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># initialize merged_meetings with the earliest meeting</span>
    merged_meetings <span class="token operator">=</span> <span class="token punctuation">[</span>sorted_meetings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> current_meeting_start<span class="token punctuation">,</span> current_meeting_end <span class="token keyword">in</span> sorted_meetings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>

        last_merged_meeting_start<span class="token punctuation">,</span> last_merged_meeting_end <span class="token operator">=</span> merged_meetings<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># if the current and last meetings overlap, use the latest end time</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current_meeting_start <span class="token operator">&lt;=</span> last_merged_meeting_end<span class="token punctuation">)</span><span class="token punctuation">:</span>
            merged_meetings<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>last_merged_meeting_start<span class="token punctuation">,</span> max<span class="token punctuation">(</span>last_merged_meeting_end<span class="token punctuation">,</span> current_meeting_end<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># add the current meeting since it doesn't overlap</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged_meetings<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>current_meeting_start<span class="token punctuation">,</span> current_meeting_end<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> merged_meetings</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
<p class="ng-scope">
Even though we only walk through our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> of meetings once to merge them, we <em>sort</em> all the meetings first, giving us a runtime of <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span>. It's worth noting that <em>if</em> our input were sorted, we could skip the sort and do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time!
</p>
<p class="ng-scope">
We create a new <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> of merged meeting times. In the worst case, none of the meetings overlap, giving us <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__a-list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> identical to the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span>. Thus we have a worst-case space cost of <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<ol class="ng-scope">
<li>
What if we <em>did</em> have an upper bound on the input values? Could we improve our runtime? Would it cost us memory?
</li>
<li>
Could we do this "in-place" on the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> and save some space? What are the pros and cons of doing this in-place?
</li>
</ol>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
This one arguably uses a <span concept="greedy" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">greedy</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>greedy</strong> algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.
</p>

<p>
The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
</p>

<!--
This is not true, for example, in path finding.
-->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> approach as well, except this time we had to <em>sort</em> the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> first.
</p>

<p class="ng-scope">
How did we figure that out?
</p>

<p class="ng-scope">
We started off trying to solve the problem in one pass, and we noticed that it wouldn't work. We then noticed the <em>reason</em> it wouldn't work: to see if a given meeting can be merged, we have to look at <em>all</em> the other meetings! That's because the order of the meetings is random.
</p>

<p class="ng-scope">
<em>That's</em> what got us thinking: what if the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> <em>were</em> sorted? We saw that <em>then</em> a greedy approach would work. We had to spend <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time on sorting the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__merging-ranges__list-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span>, but it was better than our initial brute force approach, which cost us <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time!
</p>
</div>

    
</div>


<script type="text/javascript">
            var elTranslations = {"vars": {"question__merging-ranges__meeting-class": {"objectivec": "ICKMeeting", "default": "Meeting"}, "question__merging-ranges__start-time": {"snake": "start_time", "camel": "startTime", "csharp": "StartTime"}, "question__merging-ranges__end-time": {"snake": "end_time", "camel": "endTime", "csharp": "EndTime"}, "question__merging-ranges__merged-meetings": {"snake": "merged_meetings", "camel": "mergedMeetings"}}, "words": {"question__merging-ranges__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}, "question__merging-ranges__meeting-explanation": {"java": "an object of a <span var=\"meeting-class\">Meeting</span> class with integer variables <span var=\"start-time\">startTime</span> and <span var=\"end-time\">endTime</span>", "cpp": "an instance of a <span var=\"meeting-class\">Meeting</span> class with integer member variables <span var=\"start-time\">startTime</span> and <span var=\"end-time\">endTime</span>", "c": "an instance of a <span var=\"meeting-class\">Meeting</span> structure with integer variables <span var=\"start-time\">startTime</span> and <span var=\"end-time\">endTime</span>", "javascript": "<span concept=\"hash-map\">objects</span> with attributes <span var=\"start-time\">startTime</span> and <span var=\"end-time\">endTime</span>", "swift": "an object of a <span var=\"meeting-class\"/> class with integer properties <span var=\"start-time\"/> and <span var=\"end-time\"/>", "ruby": "<span concept=\"array\">arrays</span> of integers <span code-inline=\"start-time-end-time\">[start_time, end_time]</span>", "csharp": "an object of a <span var=\"meeting-class\"/> class with integer properties <span var=\"start-time\"/> and <span var=\"end-time\"/>", "python": "<span concept=\"tuple\">tuples</span> of integers <span code-inline=\"start-time-end-time\">(start_time, end_time)</span>"}, "question__merging-ranges__a-list-type": {"java": "a list", "cpp": "<span words=\"a-standard-list\">a vector</span>", "c": "<span words=\"a-standard-list\">an array</span>", "javascript": "<span words=\"a-standard-list\">an array</span>", "ruby": "<span words=\"a-standard-list\">an array</span>", "python": "<span words=\"a-standard-list\">a list</span>", "default": "<span words=\"a-standard-list\"/>"}, "question__merging-ranges__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__merging-ranges__list-type": {"java": "list", "cpp": "<span words=\"standard-list\">vector</span>", "c": "<span words=\"standard-list\">array</span>", "javascript": "<span words=\"standard-list\">array</span>", "ruby": "<span words=\"standard-list\">array</span>", "python": "<span words=\"standard-list\">list</span>", "default": "<span words=\"standard-list\"/>"}, "question__merging-ranges__meeting-class": {"ruby": "", "cpp": "<div code-block=\"meeting-class\" language=\"cpp\" translation-highlighting=\"static\">class Meeting {\npublic:\n    Meeting() :\n        startTime_(0),\n        endTime_(0)\n    {\n    }\n\n    Meeting(unsigned int startTime, unsigned int endTime) :\n        startTime_(startTime),\n        endTime_(endTime)\n    {\n    }\n\n    unsigned int getStartTime() const {\n        return startTime_;\n    }\n\n    void setStartTime(unsigned int startTime) {\n        startTime_ = startTime;\n    }\n\n    unsigned int getEndTime() const {\n        return endTime_;\n    }\n\n    void setEndTime(unsigned int endTime) {\n        endTime_ = endTime;\n    }\n\n    bool operator==(const Meeting&amp; other) const {\n        return\n            startTime_ == other.startTime_\n            &amp;&amp; endTime_ == other.endTime_;\n    }\n\nprivate:\n        // number of 30 min blocks past 9:00 am\n        unsigned int startTime_;\n        unsigned int endTime_;\n};</div>", "c": "<div code-block=\"meeting-class\" language=\"c\" translation-highlighting=\"static\">typedef struct {\n    unsigned startTime;\n    unsigned endTime;\n} Meeting;</div>", "javascript": "", "java": "<div code-block=\"meeting-class\" language=\"java\" translation-highlighting=\"static\">public class Meeting {\n\n    int startTime;\n    int endTime;\n\n    public Meeting(int startTime, int endTime) {\n        // number of 30 min blocks past 9:00 am\n        this.startTime = startTime;\n        this.endTime   = endTime;\n    }\n\n    public String toString() {\n        return String.format(\"(%d, %d)\", startTime, endTime);\n    }\n}</div>", "csharp": "<div code-block=\"meeting-class\">\n</div>", "python": "", "default": "", "objectivec": "<div code-block=\"meeting-class\">\n</div>"}}, "code-blocks": {"question__merging-ranges__example-meetings": {"java": "new Meeting(2, 3); // meeting from 10:00 \u2013 10:30 am\nnew Meeting(6, 9); // meeting from 12:00 \u2013 1:30 pm", "cpp": "Meeting meeting1(2, 3); // meeting from 10:00 \u2013 10:30 am\nMeeting meeting2(6, 9); // meeting from 12:00 \u2013 1:30 pm", "c": "typedef struct {\n    unsigned startTime;\n    unsigned endTime;\n} Meeting;\n\nMeeting meeting1 = {2, 3}; // meeting from 10:00 \u2013 10:30 am\nMeeting meeting2 = {6, 9}; // meeting from 12:00 \u2013 1:30 pm", "javascript": "{startTime: 2, endTime: 3} // meeting from 10:00 \u2013 10:30 am\n{startTime: 6, endTime: 9} // meeting from 12:00 \u2013 1:30 pm", "swift": "let meeting1 = Meeting(startTime: 2, endTime: 3) // meeting from 10:00 \u2013 10:30 am\nlet meeting2 = Meeting(startTime: 6, endTime: 9) // meeting from 12:00 \u2013 1:30 pm", "ruby": "[2, 3] # meeting from 10:00 \u2013 10:30 am\n[6, 9] # meeting from 12:00 \u2013 1:30 pm", "csharp": "var meeting1 = new Meeting(2, 3); // meeting from 10:00 \u2013 10:30 am\nvar meeting2 = new Meeting(6, 9); // meeting from 12:00 \u2013 1:30 pm", "python": "(2, 3) # meeting from 10:00 \u2013 10:30 am\n(6, 9) # meeting from 12:00 \u2013 1:30 pm", "objectivec": "ICKMeeting *meeting1 = [[ICKMeeting alloc] initWithStartTime:@(2) endTime:@(3)];\nICKMeeting *meeting2 = [[ICKMeeting alloc] initWithStartTime:@(6) endTime:@(9)];"}, "question__merging-ranges__all-meetings-merge": {"java": "[ Meeting(1, 10), Meeting(2, 6), Meeting(3, 5), Meeting(7, 9) ]", "cpp": "[ Meeting(1, 10), Meeting(2, 6), Meeting(3, 5), Meeting(7, 9) ]", "c": "[ {1, 10}, {2, 6}, {3, 5}, {7, 9} ]", "javascript": "[\n    {startTime: 1, endTime: 10},\n    {startTime: 2, endTime: 6},\n    {startTime: 3, endTime: 5},\n    {startTime: 7, endTime: 9},\n]", "swift": "[ Meeting(1, 10), Meeting(2, 6), Meeting(3, 5), Meeting(7, 9) ]", "ruby": "[ [1, 10], [2, 6], [3, 5], [7, 9] ]", "csharp": "[ Meeting(1, 10), Meeting(2, 6), Meeting(3, 5), Meeting(7, 9) ]", "default": "[(1, 10), (2, 6), (3, 5), (7, 9)]"}, "question__merging-ranges__meetings-touch": {"java": "[ Meeting(1, 2), Meeting(2, 3) ]", "cpp": "[ Meeting(1, 2), Meeting(2, 3) ]", "c": "[ {1, 2}, {2, 3} ]", "javascript": "[{startTime: 1, endTime: 2}, {startTime: 2, endTime: 3}]", "swift": "[ Meeting(1, 2), Meeting(2, 3) ]", "ruby": "[ [1, 2], [2, 3] ]", "csharp": "[ Meeting(1, 2), Meeting(2, 3) ]", "default": "[(1, 2), (2, 3)]"}, "question__merging-ranges__meeting-subsumed": {"java": "[ Meeting(1, 5), Meeting(2, 3) ]", "cpp": "[ Meeting(1, 5), Meeting(2, 3) ]", "c": "[ {1, 5}, {2, 3} ]", "javascript": "[{startTime: 1, endTime: 5}, {startTime: 2, endTime: 3}]", "swift": "[ Meeting(1, 5), Meeting(2, 3) ]", "ruby": "[ [1, 5], [2, 3] ]", "csharp": "[ Meeting(1, 5), Meeting(2, 3) ]", "default": "[(1, 5), (2, 3)]"}, "question__merging-ranges__example-output": {"java": "[ Meeting(0, 1), Meeting(3, 8), Meeting(9, 12) ]", "cpp": "[ Meeting(0, 1), Meeting(3, 8), Meeting(9, 12) ]", "c": "[ {0, 1}, {3, 8}, {9, 12} ]", "javascript": "[\n    {startTime: 0, endTime: 1},\n    {startTime: 3, endTime: 8},\n    {startTime: 9, endTime: 12},\n]", "swift": "[ Meeting(0, 1), Meeting(3, 8), Meeting(9, 12) ]", "ruby": "[ [0, 1], [3, 8], [9, 12] ]", "csharp": "[ Meeting(0, 1), Meeting(3, 8), Meeting(9, 12) ]", "default": "[(0, 1), (3, 8), (9, 12)]"}, "question__merging-ranges__solution": {"java": {"setup": "public class Meeting {\n\n    int startTime;\n    int endTime;\n\n    public Meeting(int startTime, int endTime) {\n        // number of 30 min blocks past 9:00 am\n        this.startTime = startTime;\n        this.endTime   = endTime;\n    }\n\n    public String toString() {\n        return String.format(\"(%d, %d)\", startTime, endTime);\n    }\n}", "code": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\npublic List&lt;Meeting> mergeRanges(List&lt;Meeting> meetings) {\n\n    // sort by start times\n    List&lt;Meeting> sortedMeetings = new ArrayList&lt;Meeting>(meetings);\n    Collections.sort(sortedMeetings, new Comparator&lt;Meeting>() {\n        public int compare(Meeting m1, Meeting m2)  {\n            return m1.startTime - m2.startTime;\n        }\n    });\n\n    // initialize mergedMeetings with the earliest meeting\n    List&lt;Meeting> mergedMeetings = new ArrayList&lt;Meeting>();\n    mergedMeetings.add(sortedMeetings.get(0));\n\n    for (Meeting currentMeeting : sortedMeetings) {\n\n        Meeting lastMergedMeeting = mergedMeetings.get(mergedMeetings.size() - 1);\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting.startTime &lt;= lastMergedMeeting.endTime) {\n            lastMergedMeeting.endTime = Math.max(lastMergedMeeting.endTime, currentMeeting.endTime);\n\n        // add the current meeting since it doesn't overlap\n        } else {\n            mergedMeetings.add(currentMeeting);\n        }\n    }\n\n    return mergedMeetings;\n}", "tests": "List<Meeting> inputMeetings = new ArrayList<Meeting>();\nList<Meeting> outputMeetings = new ArrayList<Meeting>();\n\ninputMeetings  = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(3, 5), t.new Meeting(4, 8), t.new Meeting(10, 12), t.new Meeting(9, 10));\noutputMeetings = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(3, 8), t.new Meeting(9, 12));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(0, 1), t.new Meeting(0, 1));\noutputMeetings = Arrays.asList(t.new Meeting(0, 1));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(1, 2), t.new Meeting(0, 1), t.new Meeting(0, 1));\noutputMeetings = Arrays.asList(t.new Meeting(0, 2));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(2, 3), t.new Meeting(0, 1), t.new Meeting(0, 1));\noutputMeetings = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(2, 3));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(0, 1), t.new Meeting(1, 2), t.new Meeting(2, 3));\noutputMeetings = Arrays.asList(t.new Meeting(0, 3));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(1, 2), t.new Meeting(0, 4), t.new Meeting(0, 2), t.new Meeting(3, 4));\noutputMeetings = Arrays.asList(t.new Meeting(0, 4));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\ninputMeetings  = Arrays.asList(t.new Meeting(1, 2), t.new Meeting(0, 2), t.new Meeting(0, 4), t.new Meeting(3, 4));\noutputMeetings = Arrays.asList(t.new Meeting(0, 4));\nassertEqual(t.mergeRanges(inputMeetings).toString(), outputMeetings.toString());\n\n// ensure not in-place\nList<Meeting> unsortedInput = Arrays.asList(t.new Meeting(9, 10), t.new Meeting(4, 5), t.new Meeting(3, 7));\nList<Meeting> sortedInput   = Arrays.asList(t.new Meeting(3, 7), t.new Meeting(4, 5), t.new Meeting(9, 10));\nt.mergeRanges(unsortedInput);\nassertEqual(unsortedInput.toString().equals(sortedInput.toString()), false);"}, "cpp": {"setup": "class Meeting {\npublic:\n    Meeting() :\n        startTime_(0),\n        endTime_(0)\n    {\n    }\n\n    Meeting(unsigned int startTime, unsigned int endTime) :\n        startTime_(startTime),\n        endTime_(endTime)\n    {\n    }\n\n    unsigned int getStartTime() const {\n        return startTime_;\n    }\n\n    void setStartTime(unsigned int startTime) {\n        startTime_ = startTime;\n    }\n\n    unsigned int getEndTime() const {\n        return endTime_;\n    }\n\n    void setEndTime(unsigned int endTime) {\n        endTime_ = endTime;\n    }\n\n    bool operator==(const Meeting& other) const {\n        return\n            startTime_ == other.startTime_\n            && endTime_ == other.endTime_;\n    }\n\nprivate:\n        // number of 30 min blocks past 9:00 am\n        unsigned int startTime_;\n        unsigned int endTime_;\n};", "code": "// supplementary function for arranging Meeting objects by ascending start time\nbool meetingComparisonFunction(\n    const Meeting& firstMeeting,\n    const Meeting& secondMeeting)\n{\n    return firstMeeting.getStartTime() &lt; secondMeeting.getStartTime();\n}\n\nvector&lt;Meeting> mergeRanges(const vector&lt;Meeting>& meetings)\n{\n    // sort by start times\n    vector&lt;Meeting> sortedMeetings(meetings);\n    sort(sortedMeetings.begin(), sortedMeetings.end(), meetingComparisonFunction);\n\n    // initialize mergedMeetings with the earliest meeting\n    vector&lt;Meeting> mergedMeetings;\n    mergedMeetings.push_back(sortedMeetings.front());\n\n    for (const Meeting& currentMeeting : sortedMeetings) {\n\n        Meeting& lastMergedMeeting = mergedMeetings.back();\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting.getStartTime()\n            &lt;= lastMergedMeeting.getEndTime()) {\n            lastMergedMeeting.setEndTime(max(lastMergedMeeting.getEndTime(),\n                currentMeeting.getEndTime()));\n        }\n        else {\n            // add the current meeting since it doesn't overlap\n            mergedMeetings.push_back(currentMeeting);\n        }\n    }\n\n    return mergedMeetings;\n}", "tests": "const vector<vector<Meeting>> inputs {\n    vector<Meeting>{ Meeting(0, 1), Meeting(3, 5), Meeting(4, 8), Meeting(10, 12), Meeting(9, 10) },\n    vector<Meeting>{ Meeting(0, 1), Meeting(0, 1), Meeting(0, 1) },\n    vector<Meeting>{ Meeting(0, 1), Meeting(1, 2), Meeting(0, 1), Meeting(0, 1) },\n    vector<Meeting>{ Meeting(0, 1), Meeting(2, 3), Meeting(0, 1), Meeting(0, 1) },\n    vector<Meeting>{ Meeting(0, 1), Meeting(1, 2), Meeting(2, 3) },\n    vector<Meeting>{ Meeting(1, 2), Meeting(0, 4), Meeting(0, 2), Meeting(3, 4) },\n    vector<Meeting>{ Meeting(1, 2), Meeting(0, 2), Meeting(0, 4), Meeting(3, 4) },\n};\n\nconst vector<vector<Meeting>> expectedOutputs {\n    vector<Meeting>{ Meeting(0, 1), Meeting(3, 8), Meeting(9, 12) },\n    vector<Meeting>{ Meeting(0, 1) },\n    vector<Meeting>{ Meeting(0, 2) },\n    vector<Meeting>{ Meeting(0, 1), Meeting(2, 3) },\n    vector<Meeting>{ Meeting(0, 3) },\n    vector<Meeting>{ Meeting(0, 4) },\n    vector<Meeting>{ Meeting(0, 4) },\n};\n\nfor(size_t i = 0; i < inputs.size(); ++i) {\n    assertEqual(mergeRanges(inputs[i]), expectedOutputs.at(i));\n}\n\n// ensure not in-place\n{\n    const vector<Meeting> unsortedInput { Meeting(9, 10), Meeting(4, 5), Meeting(3, 7) };\n    const vector<Meeting> sortedInput { Meeting(3, 7), Meeting(4, 5), Meeting(9, 10) };\n    vector<Meeting> resultForUnsortedInput = mergeRanges(unsortedInput);\n    vector<Meeting> resultForSortedInput = mergeRanges(sortedInput);\n    assertEqual(resultForUnsortedInput, resultForSortedInput, \"Ensure not in-place test failed\");\n}"}, "c": {"setup": "typedef struct {\n    unsigned startTime;\n    unsigned endTime;\n} Meeting;", "code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\nint meetingSortFunc(const void *meetingA, const void *meetingB)\n{\n    Meeting *a = (Meeting *) meetingA;\n    Meeting *b = (Meeting *) meetingB;\n    return (a->startTime - b->startTime);\n}\n\nvoid mergeRanges(const Meeting *input, size_t inputLength,\n                 Meeting *output, size_t maxOutputLength, size_t *outputLength)\n{\n    Meeting *sortedInput;\n    size_t i;\n    size_t currentOutputLength = 0;\n\n    // output array must be large enough to hold all input meetings\n    assert(maxOutputLength >= inputLength);\n\n    // create new input to sort (prevent modifying input)\n    sortedInput = malloc(sizeof(Meeting) * inputLength);\n    assert(sortedInput != NULL);\n    memcpy(sortedInput, input, sizeof(Meeting) * inputLength);\n\n    // sort by start times\n    qsort(sortedInput, inputLength, sizeof(Meeting), meetingSortFunc);\n\n    // initialize output with the earliest meeting\n    output[0] = sortedInput[0];\n    currentOutputLength++;\n\n    // merge iteration\n    for (i = 0; i &lt; inputLength; i++) {\n        Meeting *currentMeeting = &sortedInput[i];\n        Meeting *lastMergedMeeting = &output[currentOutputLength - 1];\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting->startTime &lt;= lastMergedMeeting->endTime) {\n            lastMergedMeeting->endTime = MAX(lastMergedMeeting->endTime, currentMeeting->endTime);\n\n        // add the current meeting since it doesn't overlap\n        }\n        else {\n            currentOutputLength++;\n            output[currentOutputLength - 1] = *currentMeeting;\n        }\n    }\n\n    // set output merged length\n    *outputLength = currentOutputLength;\n\n    // free memory allocation\n    free(sortedInput);\n}", "tests": "{\n    const Meeting testInputs[7][5] = {\n        {\n            {0, 1}, {3, 5}, {4, 8}, {10, 12}, {9, 10}\n        },\n        {\n            {0, 1}, {0, 1}, {0, 1}\n        },\n        {\n            {0, 1}, {1, 2}, {0, 1}, {0, 1}\n        },\n        {\n            {0, 1}, {2, 3}, {0, 1}, {0, 1}\n        },\n        {\n            {0, 1}, {1, 2}, {2, 3}\n        },\n        {\n            {1, 2}, {0, 4}, {0, 2}, {3, 4}\n        },\n        {\n            {1, 2}, {0, 2}, {0, 4}, {3, 4}\n        }\n    };\n\n    const size_t testInputLenghts[7] = {\n        5,\n        3,\n        4,\n        4,\n        3,\n        4,\n        4\n    };\n\n    const Meeting expectedOutputs[7][5] = {\n        {\n            {0, 1}, {3, 8}, {9, 12}\n        },\n        {\n            {0, 1}\n        },\n        {\n            {0, 2}\n        },\n        {\n            {0, 1}, {2, 3}\n        },\n        {\n            {0, 3}\n        },\n        {\n            {0, 4}\n        },\n        {\n            {0, 4}\n        }\n    };\n\n    const Meeting unsortedInputs[3] = {\n        {9, 10}, {4, 5}, {3, 7}\n    };\n\n    const Meeting sortedInputs[3] = {\n        {3, 7}, {4, 5}, {9, 10}\n    };\n\n    // test input against expected output\n    Meeting output[5];\n\n    int i;\n    int j;\n    size_t mergedLength;\n\n    for (i = 0; i < 7; i++) {\n        mergeRanges(testInputs[i], testInputLenghts[i], output, 5, &mergedLength);\n        for (j = 0; j < mergedLength; j++) {\n            ASSERT_EQUAL(&output[j], &expectedOutputs[i][j],\n                         sizeof(Meeting), \"assertion failure\");\n        }\n    }\n\n    // ensure not in-place test\n    Meeting unsortedOutput[5];\n    Meeting sortedOutput[5];\n    size_t unsortedOutputLength;\n    size_t sortedOutputLength;\n\n    mergeRanges(unsortedInputs, sizeof(unsortedInputs) / sizeof(Meeting),\n                unsortedOutput, sizeof(sortedOutput) / sizeof(Meeting),\n                &unsortedOutputLength);\n    mergeRanges(sortedInputs, sizeof(sortedInputs) / sizeof(Meeting),\n                sortedOutput, sizeof(sortedOutput) / sizeof(Meeting),\n                &sortedOutputLength);\n\n    ASSERT(unsortedOutputLength == sortedOutputLength);\n    ASSERT_EQUAL(unsortedOutput, sortedOutput,\n                 sizeof(Meeting) * unsortedOutputLength, \"assertion failure\");\n}"}, "javascript": {"code": "function mergeRanges(meetings) {\n\n    // sort by start times\n    var sortedMeetings = meetings.slice().sort(function(a, b) {\n        return a.startTime > b.startTime ? 1 : -1;\n    });\n\n    // initialize mergedMeetings with the earliest meeting\n    var mergedMeetings = [sortedMeetings[0]];\n\n    for (var i = 1; i &lt; sortedMeetings.length; i++) {\n\n        var currentMeeting    = sortedMeetings[i];\n        var lastMergedMeeting = mergedMeetings[mergedMeetings.length - 1];\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting.startTime &lt;= lastMergedMeeting.endTime) {\n            lastMergedMeeting.endTime = Math.max(lastMergedMeeting.endTime, currentMeeting.endTime);\n\n        // add the current meeting since it doesn't overlap\n        } else {\n            mergedMeetings.push(currentMeeting);\n        }\n    }\n\n    return mergedMeetings;\n}", "tests": "testInputAndOutputLists(mergeRanges, tests);\nensureNotInPlace(mergeRanges);"}, "swift": {"code": "func mergeRanges(meetings: [Meeting]) -> [Meeting] {\n\n    // sort by start times\n    let sortedMeetings = meetings.sorted { (meeting1, meeting2) -> Bool in\n        return meeting1.startTime &lt; meeting2.startTime\n    }\n\n    // initialize mergedMeetings with the earliest meeting\n    var mergedMeetings = [sortedMeetings[0]]\n\n    for i in 1..&lt;sortedMeetings.count {\n        let currentMeeting = sortedMeetings[i]\n        let lastMergedMeeting = mergedMeetings[mergedMeetings.count - 1]\n\n        // if the current and last meetings overlap, use the latest end time\n        if currentMeeting.startTime &lt;= lastMergedMeeting.endTime {\n            lastMergedMeeting.endTime = max(lastMergedMeeting.endTime, currentMeeting.endTime)\n\n            // add the current meeting since it doesn't overlap\n        } else {\n            mergedMeetings.append(currentMeeting)\n        }\n    }\n\n    return mergedMeetings\n}", "tests": "class Meeting {\n    var startTime: Int\n    var endTime: Int\n\n    init(startTime: Int, endTime: Int) {\n        // number of 30 min blocks past 9:00 am\n        self.startTime = startTime\n        self.endTime = endTime\n    }\n\n    func toString() -> String {\n        return \"(\\(startTime), \\(endTime))\"\n    }\n}\n\nextension Array where Element: Meeting {\n    func toString() -> String {\n        var result = \"\"\n        for meeting in self {\n            result += meeting.toString()\n        }\n        return result\n    }\n}\n\nvar inputMeetings: [Meeting] = []\nvar outputMeetings: [Meeting] = []\n\ninputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 3, endTime: 5),\n                  Meeting(startTime: 4, endTime: 8), Meeting(startTime: 10, endTime: 12),\n                  Meeting(startTime: 9, endTime: 10) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 3, endTime: 8),\n                   Meeting(startTime: 9, endTime: 12) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 0, endTime: 1),\n                  Meeting(startTime: 0, endTime: 1) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 1) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 1, endTime: 2),\n                  Meeting(startTime: 0, endTime: 1), Meeting(startTime: 0, endTime: 1) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 2) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 2, endTime: 3),\n                  Meeting(startTime: 0, endTime: 1), Meeting(startTime: 0, endTime: 1) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 2, endTime: 3) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 0, endTime: 1), Meeting(startTime: 1, endTime: 2),\n                  Meeting(startTime: 2, endTime: 3) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 3) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 1, endTime: 2), Meeting(startTime: 0, endTime: 4),\n                  Meeting(startTime: 0, endTime: 2), Meeting(startTime: 3, endTime: 4) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 4) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\ninputMeetings = [ Meeting(startTime: 1, endTime: 2), Meeting(startTime: 0, endTime: 2),\n                  Meeting(startTime: 0, endTime: 4), Meeting(startTime: 3, endTime: 4) ]\noutputMeetings = [ Meeting(startTime: 0, endTime: 4) ]\ntry assertEqual(mergeRanges(meetings: inputMeetings).toString(), outputMeetings.toString())\n\n// ensure not in-place\nlet unsortedInput = [ Meeting(startTime: 9, endTime: 10), Meeting(startTime: 4, endTime: 5),\n                      Meeting(startTime: 3, endTime: 7) ]\nlet sortedInput = [ Meeting(startTime: 3, endTime: 7), Meeting(startTime: 4, endTime: 5),\n                    Meeting(startTime: 9, endTime: 10) ]\nlet _ = mergeRanges(meetings: unsortedInput)\ntry assertEqual(unsortedInput.toString() == sortedInput.toString(), false)"}, "ruby": {"code": "def merge_ranges(meetings)\n\n    # sort by start times\n    sorted_meetings = meetings.sort\n\n    # initialize merged_meetings with the earliest meeting\n    merged_meetings = [sorted_meetings[0]]\n\n    sorted_meetings[1..-1].each do |current_meeting_start, current_meeting_end|\n\n        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]\n\n        # if the current and last meetings overlap, use the latest end time\n        if current_meeting_start &lt;= last_merged_meeting_end\n            merged_meetings[-1] = [last_merged_meeting_start, [last_merged_meeting_end, current_meeting_end].max]\n\n        # add the current meeting since it doesn't overlap\n        else\n            merged_meetings.push([current_meeting_start, current_meeting_end])\n        end\n    end\n\n    return merged_meetings\nend", "tests": "testInputAndOutputLists(method(:merge_ranges), tests)\nensure_not_in_place(method(:merge_ranges))"}, "csharp": {"setup": "public class Meeting\n{\n    public int StartTime { get; set; }\n\n    public int EndTime { get; set; }\n\n    public Meeting(int startTime, int endTime)\n    {\n        // Number of 30 min blocks past 9:00 am\n        StartTime = startTime;\n        EndTime = endTime;\n    }\n\n    public override string ToString()\n    {\n        return $\"({StartTime}, {EndTime})\";\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (ReferenceEquals(this, obj))\n            return true;\n\n        var other = obj as Meeting;\n        if (other == null)\n            return false;\n\n        return StartTime == other.StartTime && EndTime == other.EndTime;\n    }\n\n    public override int GetHashCode()\n    {\n        return StartTime ^ EndTime;\n    }\n}", "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic List&lt;Meeting> MergeRanges(List&lt;Meeting> meetings)\n{\n    // sort by start times\n    var sortedMeetings = meetings.OrderBy(m => m.StartTime).ToList();\n\n    // initialize mergedMeetings with the earliest meeting\n    var mergedMeetings = new List&lt;Meeting> { sortedMeetings[0] };\n\n    foreach (var currentMeeting in sortedMeetings)\n    {\n        var lastMergedMeeting = mergedMeetings[mergedMeetings.Count - 1];\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting.StartTime &lt;= lastMergedMeeting.EndTime)\n        {\n            lastMergedMeeting.EndTime = Math.Max(lastMergedMeeting.EndTime, currentMeeting.EndTime);\n        }\n        else\n        {\n            // add the current meeting since it doesn't overlap\n            mergedMeetings.Add(currentMeeting);\n        }\n    }\n\n    return mergedMeetings;\n}", "tests": "var inputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(3, 5), new Meeting(4, 8), new Meeting(10, 12), new Meeting(9, 10) };\nvar outputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(3, 8), new Meeting(9, 12) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 1 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(0, 1), new Meeting(0, 1) };\noutputMeetings = new List<Meeting> { new Meeting(0, 1) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 2 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(1, 2), new Meeting(0, 1), new Meeting(0, 1) };\noutputMeetings = new List<Meeting> { new Meeting(0, 2) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 3 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(2, 3), new Meeting(0, 1), new Meeting(0, 1) };\noutputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(2, 3) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 4 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(0, 1), new Meeting(1, 2), new Meeting(2, 3) };\noutputMeetings = new List<Meeting> { new Meeting(0, 3) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 5 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(1, 2), new Meeting(0, 4), new Meeting(0, 2), new Meeting(3, 4) };\noutputMeetings = new List<Meeting> { new Meeting(0, 4) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 6 failed\");\n\ninputMeetings = new List<Meeting> { new Meeting(1, 2), new Meeting(0, 2), new Meeting(0, 4), new Meeting(3, 4) };\noutputMeetings = new List<Meeting> { new Meeting(0, 4) };\nAssertEqual(MergeRanges(inputMeetings), outputMeetings, \"test case 7 failed\");\n\n// Ensure not in-place\nvar unsortedInput = new List<Meeting> { new Meeting(9, 10), new Meeting(4, 5), new Meeting(3, 7) };\nvar sortedInput = new List<Meeting> { new Meeting(3, 7), new Meeting(4, 5), new Meeting(9, 10) };\nMergeRanges(unsortedInput);\nAssertNotEqual(unsortedInput, sortedInput, \"test case 8 failed\");"}, "python": {"code": "def merge_ranges(meetings):\n\n    # sort by start times\n    sorted_meetings = sorted(meetings)\n\n    # initialize merged_meetings with the earliest meeting\n    merged_meetings = [sorted_meetings[0]]\n\n    for current_meeting_start, current_meeting_end in sorted_meetings[1:]:\n\n        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]\n\n        # if the current and last meetings overlap, use the latest end time\n        if (current_meeting_start &lt;= last_merged_meeting_end):\n            merged_meetings[-1] = (last_merged_meeting_start, max(last_merged_meeting_end, current_meeting_end))\n\n        # add the current meeting since it doesn't overlap\n        else:\n            merged_meetings.append((current_meeting_start, current_meeting_end))\n\n    return merged_meetings", "tests": "testInputAndOutputLists(merge_ranges, tests)\nensure_not_in_place(merge_ranges)"}, "objectivec": {"code": "NSArray&lt;ICKMeeting *> *ICKMergeRanges(NSArray&lt;ICKMeeting *> *input) {\n    NSUInteger currentOutputLength = 0;\n    NSMutableArray *output = [NSMutableArray new];\n\n    // Initialize the array before applying sort\n    NSMutableArray&lt;ICKMeeting *> *sortedInput = [NSMutableArray arrayWithArray:input];\n\n    // sort by start times\n    [sortedInput sortUsingComparator: ^(ICKMeeting *m1, ICKMeeting *m2) {\n        return [m1.startTime compare:m2.startTime];\n    }];\n\n    // initialize output with the earliest meeting\n    [output addObject:sortedInput[0]];\n    currentOutputLength++;\n\n    // merge iteration\n    for (ICKMeeting *currentMeeting in sortedInput) {\n        ICKMeeting *lastMergedMeeting = output[currentOutputLength - 1];\n\n        // if the current and last meetings overlap, use the latest end time\n        if (currentMeeting.startTime.integerValue &lt;= lastMergedMeeting.endTime.integerValue) {\n            lastMergedMeeting.endTime = @(MAX(lastMergedMeeting.endTime.integerValue,\n                                              currentMeeting.endTime.integerValue));\n\n        } else {\n            // add the current meeting since it doesn't overlap\n            currentOutputLength++;\n            [output addObject:currentMeeting];\n        }\n    }\n\n    // return immutable copy\n    return output.copy;\n}", "tests": ""}}, "question__merging-ranges__two-ranges-input": {"java": "[ Meeting(1, 3), Meeting(2, 4) ]", "cpp": "[ Meeting(1, 3), Meeting(2, 4) ]", "c": "[ {1, 3}, {2, 4} ]", "javascript": "[{startTime: 1, endTime: 3}, {startTime: 2, endTime: 4}]", "swift": "[ Meeting(1, 3), Meeting(2, 4) ]", "ruby": "[ [1, 3], [2, 4] ]", "csharp": "[ Meeting(1, 3), Meeting(2, 4) ]", "default": "[(1, 3), (2, 4)]"}, "setup": {"javascript": "var tests = [\n    [\n        [{startTime: 0, endTime: 1}, {startTime: 3, endTime: 5}, {startTime: 4, endTime: 8}, {startTime: 10, endTime: 12}, {startTime: 9, endTime: 10}],\n        [{startTime: 0, endTime: 1}, {startTime: 3, endTime: 8}, {startTime: 9, endTime: 12}],\n    ], [\n        [{startTime: 0, endTime: 1}, {startTime: 0, endTime: 1}, {startTime: 0, endTime: 1}],\n        [{startTime: 0, endTime: 1}],\n    ], [\n        [{startTime: 0, endTime: 1}, {startTime: 1, endTime: 2}, {startTime: 0, endTime: 1}, {startTime: 0, endTime: 1}],\n        [{startTime: 0, endTime: 2}],\n    ], [\n        [{startTime: 0, endTime: 1}, {startTime: 2, endTime: 3}, {startTime: 0, endTime: 1}, {startTime: 0, endTime: 1}],\n        [{startTime: 0, endTime: 1}, {startTime: 2, endTime: 3}],\n    ], [\n        [{startTime: 0, endTime: 1}, {startTime: 1, endTime: 2}, {startTime: 2, endTime: 3}],\n        [{startTime: 0, endTime: 3}],\n    ], [\n        [{startTime: 1, endTime: 2}, {startTime: 0, endTime: 4}, {startTime: 0, endTime: 2}, {startTime: 3, endTime: 4}],\n        [{startTime: 0, endTime: 4}],\n    ], [\n        [{startTime: 1, endTime: 2}, {startTime: 0, endTime: 2}, {startTime: 0, endTime: 4}, {startTime: 3, endTime: 4}],\n        [{startTime: 0, endTime: 4}],\n    ],\n];\n\nfunction ensureNotInPlace(functionToTest) {\n    var unsortedInput = [ {startTime: 9, endTime: 10}, {startTime: 4, endTime: 5}, {startTime: 3, endTime: 7} ];\n    var sortedInput   = [ {startTime: 3, endTime: 7}, {startTime: 4, endTime: 5}, {startTime: 9, endTime: 10} ];\n    functionToTest(unsortedInput);\n    var areArraysEqual = true;\n    for (var i=0; i < unsortedInput.length; i++) {\n        if (JSON.stringify(unsortedInput[i]) !== JSON.stringify(sortedInput[i])) {\n            areArraysEqual = false;\n        }\n    }\n    assert(!areArraysEqual);\n}", "ruby": "tests = [\n    [ [ [0, 1], [3, 5], [4, 8], [10, 12], [9, 10] ], [ [0, 1], [3, 8], [9, 12] ] ],\n    [ [ [0, 1], [0, 1], [0, 1] ], [ [0, 1] ] ],\n    [ [ [0, 1], [1, 2], [0, 1], [0, 1] ], [ [0, 2] ] ],\n    [ [ [0, 1], [2, 3], [0, 1], [0, 1] ], [ [0, 1], [2, 3] ] ],\n    [ [ [0, 1], [1, 2], [2, 3] ], [ [0, 3] ] ],\n    [ [ [1, 2], [0, 4], [0, 2], [3, 4] ], [ [0, 4] ] ],\n    [ [ [1, 2], [0, 2], [0, 4], [3, 4] ], [ [0, 4] ] ],\n]\n\ndef ensure_not_in_place(function)\n    unsorted_input = [ [9, 10], [4, 5], [3, 7] ]\n    sorted_input   = [ [3, 7], [4, 5], [9, 10] ]\n    function.call(unsorted_input)\n    assert unsorted_input != sorted_input\nend", "python": "tests = [\n    [ [(0, 1), (3, 5), (4, 8), (10, 12), (9, 10)], [(0, 1), (3, 8), (9, 12)] ],\n    [ [(0, 1), (0, 1), (0, 1)], [(0, 1)] ],\n    [ [(0, 1), (1, 2), (0, 1), (0, 1)], [(0, 2)] ],\n    [ [(0, 1), (2, 3), (0, 1), (0, 1)], [(0, 1), (2, 3)] ],\n    [ [(0, 1), (1, 2), (2, 3)], [(0, 3)] ],\n    [ [(1, 2), (0, 4), (0, 2), (3, 4)], [(0, 4)] ],\n    [ [(1, 2), (0, 2), (0, 4), (3, 4)], [(0, 4)] ],\n]\n\ndef ensure_not_in_place(function):\n    unsorted_input = [(9, 10), (4, 5), (3, 7)]\n    sorted_input   = [(3, 7), (4, 5), (9, 10)]\n    function(unsorted_input)\n    assert unsorted_input != sorted_input"}, "question__merging-ranges__example-input": {"java": "[ Meeting(0, 1), Meeting(3, 5), Meeting(4, 8), Meeting(10, 12), Meeting(9, 10) ]", "cpp": "[ Meeting(0, 1), Meeting(3, 5), Meeting(4, 8), Meeting(10, 12), Meeting(9, 10) ]", "c": "[ {0, 1}, {3, 5}, {4, 8}, {10, 12}, {9, 10} ]", "javascript": "[\n    {startTime: 0,  endTime: 1},\n    {startTime: 3,  endTime: 5},\n    {startTime: 4,  endTime: 8},\n    {startTime: 10, endTime: 12},\n    {startTime: 9,  endTime: 10},\n]", "swift": "[ Meeting(0, 1), Meeting(3, 5), Meeting(4, 8), Meeting(10, 12), Meeting(9, 10) ]", "ruby": "[ [0, 1], [3, 5], [4, 8], [10, 12], [9, 10] ]", "csharp": "[ Meeting(0, 1), Meeting(3, 5), Meeting(4, 8), Meeting(10, 12), Meeting(9, 10) ]", "default": "[(0, 1), (3, 5), (4, 8), (10, 12), (9, 10)]"}, "question__merging-ranges__meeting-class": {"cpp": "class Meeting {\npublic:\n    Meeting() :\n        startTime_(0),\n        endTime_(0)\n    {\n    }\n\n    Meeting(unsigned int startTime, unsigned int endTime) :\n        startTime_(startTime),\n        endTime_(endTime)\n    {\n    }\n\n    unsigned int getStartTime() const {\n        return startTime_;\n    }\n\n    void setStartTime(unsigned int startTime) {\n        startTime_ = startTime;\n    }\n\n    unsigned int getEndTime() const {\n        return endTime_;\n    }\n\n    void setEndTime(unsigned int endTime) {\n        endTime_ = endTime;\n    }\n\n    bool operator==(const Meeting& other) const {\n        return\n            startTime_ == other.startTime_\n            && endTime_ == other.endTime_;\n    }\n\nprivate:\n        // number of 30 min blocks past 9:00 am\n        unsigned int startTime_;\n        unsigned int endTime_;\n};", "c": "typedef struct {\n    unsigned startTime;\n    unsigned endTime;\n} Meeting;", "swift": "class Meeting {\n    var startTime: Int\n    var endTime: Int\n\n    init(startTime: Int, endTime: Int) {\n        // number of 30 min blocks past 9:00 am\n        self.startTime = startTime\n        self.endTime = endTime\n    }\n\n    func toString() -> String {\n        return \"(\\(startTime), \\(endTime))\"\n    }\n}", "csharp": "public class Meeting\n{\n    public int StartTime { get; set; }\n\n    public int EndTime { get; set; }\n\n    public Meeting(int startTime, int endTime)\n    {\n        // Number of 30 min blocks past 9:00 am\n        StartTime = startTime;\n        EndTime = endTime;\n    }\n\n    public override string ToString()\n    {\n        return $\"({StartTime}, {EndTime})\";\n    }\n}", "default": "public class Meeting {\n\n    int startTime;\n    int endTime;\n\n    public Meeting(int startTime, int endTime) {\n        // number of 30 min blocks past 9:00 am\n        this.startTime = startTime;\n        this.endTime   = endTime;\n    }\n\n    public String toString() {\n        return String.format(\"(%d, %d)\", startTime, endTime);\n    }\n}", "objectivec": "@interface ICKMeeting : NSObject\n@property (nonatomic) NSNumber *startTime;\n@property (nonatomic) NSNumber *endTime;\n- (id)initWithStartTime:(NSNumber *)aStartTime endTime:(NSNumber *)aEndTime;\n@end\n\n@implementation ICKMeeting\n\n- (id)initWithStartTime:(NSNumber *)aStartTime endTime:(NSNumber *)aEndTime {\n    if (self = [super init]) {\n        self.startTime = @(aStartTime.integerValue);\n        self.endTime   = @(aEndTime.integerValue);\n    }\n    return self;\n}\n\n@end"}, "question__merging-ranges__two-ranges-output": {"java": "[ Meeting(1, 4) ]", "cpp": "[ Meeting(1, 4) ]", "c": "[ {1, 4} ]", "javascript": "[{startTime: 1, endTime: 4}]", "swift": "[ Meeting(1, 4) ]", "ruby": "[ [1, 4] ]", "csharp": "[ Meeting(1, 4) ]", "default": "[(1, 4)]"}}, "code-inlines": {"question__merging-ranges__start-time-end-time": {"ruby": "[start_time, end_time]", "default": "", "python": "(start_time, end_time)"}, "question__merging-ranges__meetings-with-equal-start-and-end-times": {"java": "[ Meeting(1, 2), Meeting(2, 3) ]", "cpp": "[ Meeting(1, 2), Meeting(2, 3) ]", "c": "[ {1, 2}, {2, 3} ]", "javascript": "[{startTime: 1, endTime: 2}, {startTime: 2, endTime: 3}]", "swift": "[ Meeting(1, 2), Meeting(2, 3) ]", "ruby": "[ [1, 2], [2, 3] ]", "csharp": "[ Meeting(1, 2), Meeting(2, 3) ]", "default": "[(1, 2), (2, 3)]"}, "question__merging-ranges__second-meeting-inside-first-meeting": {"java": "[ Meeting(1, 5), Meeting(2, 3) ]", "cpp": "[ Meeting(1, 5), Meeting(2, 3) ]", "c": "[ {1, 5}, {2, 3} ]", "javascript": "[{startTime: 1, endTime: 5}, {startTime: 2, endTime: 3}]", "swift": "[ Meeting(1, 5), Meeting(2, 3) ]", "ruby": "[ [1, 5], [2, 3] ]", "csharp": "[ Meeting(1, 5), Meeting(2, 3) ]", "default": "[(1, 5), (2, 3)]"}, "question__merging-ranges__one-ten": {"java": "Meeting(1, 10)", "cpp": "Meeting(1, 10)", "c": "{1, 10}", "javascript": "{startTime: 1, endTime: 10}", "swift": "Meeting(1, 10)", "ruby": "[1, 10]", "csharp": "Meeting(1, 10)", "default": "(1, 10)"}}, "funcs": {"question__merging-ranges__merge-ranges": {"snake": "merge_ranges", "camel": "mergeRanges", "csharp": "MergeRanges"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/merging-ranges" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/merging-ranges" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/merging-ranges&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/merging-ranges" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/merging-ranges" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/merging-ranges&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./04.Merging Meeting Times _ Interview Cake_files/jquery.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./04.Merging Meeting Times _ Interview Cake_files/underscore-min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/angular-seo.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./04.Merging Meeting Times _ Interview Cake_files/base.js"></script>

    
    <script src="./04.Merging Meeting Times _ Interview Cake_files/prism.min.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/codemirror.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/python.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/ruby.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/javascript.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/clike.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/php.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/haskell.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./04.Merging Meeting Times _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./04.Merging Meeting Times _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./04.Merging Meeting Times _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./04.Merging Meeting Times _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="VL8jURSApWxUnr1qKrUSDgJZeqsWtUP7skxFcW3uVvPBcwdw8W9baZ7HzfIpH83m">
<div id="loading">
. . .
</div>


<link href="./04.Merging Meeting Times _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default347600_provider" id="stripeXDM_default347600_provider" src="./04.Merging Meeting Times _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./04.Merging Meeting Times _ Interview Cake_files/saved_resource(1).html"></iframe></body></html>