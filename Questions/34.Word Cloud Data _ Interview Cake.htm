<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0056)https://www.interviewcake.com/question/python/word-cloud -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./34.Word Cloud Data _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./34.Word Cloud Data _ Interview Cake_files/visits"></script><script src="./34.Word Cloud Data _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./34.Word Cloud Data _ Interview Cake_files/track"></script><script type="text/javascript" src="./34.Word Cloud Data _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./34.Word Cloud Data _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./34.Word Cloud Data _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./34.Word Cloud Data _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":5,"agent":"","applicationID":"7328113","applicationTime":340,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/word-cloud">
        <meta name="description" content="You&#39;re building a word cloud. Write a function to figure out how many times each word appears so we know how big to make each word in the cloud.">

        

        <meta property="og:title" content="Word Cloud Data | Interview Cake">
        <meta property="og:description" content="You&#39;re building a word cloud. Write a function to figure out how many times each word appears so we know how big to make each word in the cloud.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/word-cloud">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Word Cloud Data | Interview Cake">
        <meta name="twitter:description" content="You&#39;re building a word cloud. Write a function to figure out how many times each word appears so we know how big to make each word in the cloud.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Word Cloud Data | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./34.Word Cloud Data _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./34.Word Cloud Data _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./34.Word Cloud Data _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./34.Word Cloud Data _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./34.Word Cloud Data _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./34.Word Cloud Data _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./34.Word Cloud Data _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./34.Word Cloud Data _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./34.Word Cloud Data _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./34.Word Cloud Data _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./34.Word Cloud Data _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./34.Word Cloud Data _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/word-cloud" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/word-cloud" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/word-cloud" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/word-cloud" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              done                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;word-cloud&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Word Cloud Data" data-meta_desc="You&#39;re building a word cloud. Write a function to figure out how many times each word appears so we know how big to make each word in the cloud." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="5" data-num-hints="22" data-num-gotchas="5" ng-init="setNumHints(22); setNumGotchas(5); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
You want to build a word cloud, an infographic where the size of a word corresponds to how often it appears in the body of text.
</strong>
</p>
<p class="ng-scope">
To do this, you'll need data. Write code that takes a long string and builds its word cloud data in a <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map-concept"><span concept="hash-map" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">dictionary</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>hash table</strong> (also called a <strong>hash</strong>, <strong>hash map</strong>, <strong>map</strong>, <strong>unordered map</strong> or <strong>dictionary</strong>) is a data structure that pairs keys to values.
</p>

<div code-block="concept__hash-map__hash-map" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">lightbulb_to_hours_of_light <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'incandescent'</span><span class="token punctuation">:</span> <span class="token number">1200</span><span class="token punctuation">,</span>
    <span class="token string">'compact fluorescent'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    <span class="token string">'LED'</span><span class="token punctuation">:</span> <span class="token number">50000</span>
<span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__javascript-object"></span>

<p>
Hash tables:
</p>
<ul>
<li>take <em>on average</em> <strong><span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for insertions and lookups</strong>
</li>
<li>are <strong>unordered</strong> (the keys are not guaranteed to stay in the same order)</li>
<li>can use <strong>many types of objects as keys</strong> (<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__commonly-strings"><span class="ng-scope">commonly strings</span></span>)</li>
</ul>

<p>
Hash tables can be thought of as arrays, if you think of array indices as keys!
</p>

<p>
In fact, hash tables are <em>built on</em> arrays. So if you ever want to use a hash table but know your keys will be sequential integers (like <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>1</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">1..100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span>), you can probably save time and space by just using an array instead.
</p>

<p>
<strong>Note:</strong> hash tables have an <strong>average case</strong> insertion and lookup cost of <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>. In industry, we often confuse the average-case cost with <em>worst case</em> cost, but they're not really the same. Because of hash collisions and rebalancing, a hash table insertion or lookup can cost as much as <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case. But usually in industry we assume hashing and resizing algorithms are clever enough that collisions are rare and cheap.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__hash-map__javascript-object": {"default": "var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};"}, "concept__hash-map__hash-map": {"c": "// Assume we've implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key, int value);\n\nHashTable *lightbulbToHoursOfLight = hashTableNew();\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"incandescent\", 1200);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"compact fluorescent\", 10000);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"LED\", 50000);", "javascript": "var lightbulbToHoursOfLight = new Map();\n\nlightBulbToHoursOfLight.set('incandescent', 1200);\nlightbulbToHoursOfLight.set('compact fluorescent', 10000);\nlightbulbToHoursOfLight.set('LED', 50000);", "python": "lightbulb_to_hours_of_light = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000\n}", "ruby": "lightbulb_to_hours_of_light = {\n    'incandescent' => 1200,\n    'compact fluorescent' => 10000,\n    'LED' => 50000\n}", "cpp": "unordered_map&lt;string, int> lightbulbToHoursOfLight;\n\nlightbulbToHoursOfLight.insert(make_pair(\"incandescent\", 1200));\nlightbulbToHoursOfLight.insert(make_pair(\"compact fluorescent\", 10000));\nlightbulbToHoursOfLight.insert(make_pair(\"LED\", 50000));", "java": "Map&lt;String, Integer> lightbulbToHoursOfLight = new HashMap&lt;String, Integer>();\n\nlightbulbToHoursOfLight.put(\"incandescent\", 1200);\nlightbulbToHoursOfLight.put(\"compact fluorescent\", 10000);\nlightbulbToHoursOfLight.put(\"LED\", 50000);"}}, "words": {"concept__hash-map__commonly-strings": {"c": "commonly strings", "javascript": "JavaScript <em>object</em> keys are always <strong>strings</strong>", "python": "commonly strings", "default": "commonly strings", "ruby": "commonly strings", "cpp": "commonly strings", "java": "commonly strings"}, "concept__hash-map__javascript-object": {"c": "", "javascript": "<p>\n    In JavaScript, <strong>objects</strong> are also commonly used for storing key-value pairs:\n</p>\n\n<div code-block=\"javascript-object\" language=\"javascript\" translation-highlighting=\"static\">var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};</div>\n\n<p class=\"aside\">\n    <strong>How do you know when to use a map or object in JavaScript?</strong> Objects are used almost always, but maps might be helpful if your keys aren't strings or you need to iterate over your data. Maps aren't fully supported by all modern browsers yet.\n</p>", "python": "", "default": "", "ruby": "", "cpp": "", "java": ""}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span></span>, where the keys are words and the values are the number of times the words occurred.
</p>
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__why-we-use-a-javascript-map-aside"></span>
<p class="ng-scope">
<strong>Think about capitalized words</strong>. For example, look at these sentences:
</p>
<div code-block="question__word-cloud__example-sentences-capitalized-words" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">'After beating the eggs, Dana read the next step:'
'Add milk and eggs, then add flour and sugar.'</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
What do we want to do with "After", "Dana", and "add"? In this example, your final <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> should include <em>one</em> "Add" or "add" with a value of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">2</span></span></span></span></span>. Make <em>reasonable</em> (not necessarily <em>perfect</em>) decisions about cases like "After" and "Dana".
</p>
<p class="ng-scope">
Assume the input will only contain words and standard punctuation.
</p>

<p class="aside ng-scope">
You could make a reasonable argument to use <strong>regex</strong> in your solution. We won't, mainly because performance is difficult to measure and <a href="http://blog.codinghorror.com/regex-performance/" target="_blank">can get pretty bad</a>.
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Are you sure your code handles hyphenated words and standard punctuation?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Are you sure your code <strong>reasonably handles the same word with different capitalization?</strong>
</p>
<p class="ng-scope">Try these sentences:</p>
<div code-block="question__word-cloud__same-word-different-capitalization" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">'We came, we saw, we conquered...then we ate Bill's (Mille-Feuille) cake.'
'The bill came to five dollars.'</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> runtime and space.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
The final <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> we return should be the <strong><em>only</em></strong> data structure whose length is tied to <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We should only iterate through our input string <strong>once</strong>.
</p>
</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We'll have to go through the entire input string, and we're returning <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span> with every unique word. In the worst case every word is different, so our runtime and space cost will both be at least <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
This challenge has several parts. Let's break them down.
</p>
<ol class="ng-scope">
<li>
<strong>Splitting the words</strong> from the input string</li>
<li>
<strong>Populating the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> with each word</li>
<li>
<strong>Handling words that are both uppercase and lowercase</strong> in the input string</li>
</ol>
<p class="ng-scope">
How would you start the first part?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__could-use-built-in-split"><span class="ng-scope">We could use a built-in </span><span class="ic-function ng-isolate-scope" func="question__word-cloud__split"><span class="name" ng-transclude=""><span class="ng-scope">split</span></span>()</span><span class="ng-scope"> function</span></span> to separate our words, but if we just split on spaces we'd have to iterate over all the words before or after splitting to clean up the punctuation. And consider <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__em-dashes-or-nothing"><span class="ng-scope">em dashes or</span></span> ellipses, which <em>aren't</em> surrounded by spaces but nonetheless separate words. Instead, we'll make our <em>own</em> <span class="ic-function ng-isolate-scope" func="question__word-cloud__split"><span class="name" ng-transclude=""><span class="ng-scope">split</span></span>()</span> function, which will let us iterate over the input string only once.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__check-if-character-is-letter"><p class="ng-scope">
How can we check if a character in our input string is a letter?
</p></span>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__is-letter-helper-function"><p class="ng-scope">
Two good options are to build a helper function or to use regular expressions. Either will work for this problem. We'll build our own helper function <span class="ic-function ng-isolate-scope" func="question__word-cloud__is-letter"><span class="name" ng-transclude=""><span class="ng-scope">is_letter</span></span>()</span>:
</p>

<div code-block="question__word-cloud__is-letter" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># character is a variable holding a string with length 1</span>

<span class="token keyword">def</span> <span class="token function">is_letter</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> character <span class="token keyword">in</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p class="ng-scope">
Now how can we split each word? Let's assume, for now, that our helper function will return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> of words.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We'll iterate over all the characters in the input string. How can we identify when we've reached the end of a word?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can store <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__word-cloud__current-word"><span class="ng-scope">current_word</span></span> in a variable, and append its value to the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> every time we hit a space.
</p>
<p class="ng-scope">
Here's a simple example. It doesn't work perfectly yet—you'll need to add code to handle the end of the input string, hyphenated words, punctuation, and edge cases.
</p>
<div code-block="question__word-cloud__split-words" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">split_words</span><span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    current_word <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> character <span class="token keyword">in</span> input_string<span class="token punctuation">:</span>
        <span class="token keyword">if</span> character <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>
            words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_word<span class="token punctuation">)</span>
            current_word <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">elif</span> is_letter<span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">:</span>
            current_word <span class="token operator">+=</span> character
    <span class="token keyword">return</span> words</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Now we've solved the first part of the challenge, splitting the words. The next part is <strong>populating our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> with unique words.</strong> What do we do with each word?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If the word is in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>, we'll increment its count. Otherwise, we'll add it to the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> with a count of 1.
</p>
<div code-block="question__word-cloud__add-word-to-hash" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">words_to_counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">add_word_to_dictionary</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> word <span class="token keyword">in</span> words_to_counts<span class="token punctuation">:</span>
        words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Alright, last part! <strong>How should we handle words that are uppercase and lowercase?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Consider these sentences:
</p>
<div code-block="question__word-cloud__uppercase-and-lowercase-words" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">'We came, we saw, we ate cake.'
'Friends, Romans, countrymen! Let us eat cake.'
'New tourists in New York often wait in long lines for cronuts.'</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
<strong>Take some time to think of possible approaches.</strong> What are some other sentences you might run into. What are all your options?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
When are words that <em>should be</em> lowercase <em>not</em>? <br>
<em>Why</em> not? <br>
What are the <em>ideal</em> cases we'd want in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>?
</p>
</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">Here are a few options:</p>
<ol class="ng-scope">
<li>Only make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is <em>always</em> uppercase in the original string.</li>
<li>Make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is <em>ever</em> uppercase in the original string.</li>
<li>Make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is ever uppercase in the original string <em>in a position that is not the first word of a sentence.</em>
</li>
<li>Use an API or other tool that identifies proper nouns.</li>
<li>Ignore case entirely and make every word lowercase.</li>
</ol>
<p class="ng-scope">
<strong>What are the pros and cons for each one?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">Pros and cons include:</p>
<ol class="ng-scope">
<li>
<strong>Only make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is <em>always</em> uppercase in the original string:</strong> this will have reasonable accuracy in very long strings where words are more likely to be included multiple times, but words that <em>only</em> ever occur as the first word in a sentence will always be included as uppercase.</li>
<li>
<strong>Make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is <em>ever</em> uppercase in the original string:</strong> this will ensure proper nouns are <em>always</em> uppercase, but any words that are <em>ever</em> at the start of sentences will always be uppercase too.</li>
<li>
<strong>Make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if it is ever uppercase in the original string <em>in a position that is not the first word of a sentence:</em></strong> this addresses the problem with option (2), but proper nouns that are <em>only</em> ever at the start of sentences will be made lowercase.</li>
<li>
<strong>Use an API or other tool that identifies proper nouns:</strong> this has a lot of potential to give us a high level of accuracy, but we'll give up control over decisions, we'll be relying on code we didn't write, and our practical runtime may be significantly increased.</li>
<li>
<strong>Ignore case entirely and make every word lowercase:</strong> this will give us simplicity and consistency, but we'll lose all accuracy for words that should be uppercase.</li>
</ol>

<p class="ng-scope">
Any of these could be considered reasonable. Importantly, <strong>none of them are perfect</strong>. They all have tradeoffs, and it is very difficult to write a highly accurate algorithm. Consider "cliff" and "bill" in these sentences:
</p>

<div code-block="question__word-cloud__cliff-and-bill" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">'Cliff finished his cake and paid the bill.'
'Bill finished his cake at the edge of the cliff.'</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
You can choose whichever of the options you'd like, or another option you thought of. For this breakdown, we're going to choose option (1).
</p>

<p class="ng-scope">
Now, how do we update our <span class="ic-function ng-isolate-scope" func="question__word-cloud__add-word-to-hash"><span class="name" ng-transclude=""><span class="ng-scope">add_word_to_dictionary</span></span>()</span> function to avoid duplicate words?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="13" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Think about the different possibilities:
</p>
<ol class="ng-scope">
<li>
The word is <strong>uppercase or lowercase.</strong>
</li>
<li>
The word is <strong>already in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> or not.
</li>
<li>
<strong>A different case of the word is already in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> or not.
</li>
</ol>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="14" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Moving forward, we can either:
</p>
<ol class="ng-scope">
<li>
Check for words that are in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> in <strong>both</strong> cases <em>when we're done populating the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>.</em> If we add "Vanilla" three times and "vanilla" eight times, we'll combine them into <em>one</em> "vanilla" at the end with a value <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>1</mn></mrow><annotation encoding="application/x-tex">11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">1</span></span></span></span></span>.
</li>
<li>
<em>Avoid <strong>ever</strong> having a word in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> that's both uppercase and lowercase.</em> As we add "Vanilla"s and "vanilla"s, we'd <em>always only ever have one version</em> in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>.
</li>
</ol>
<p class="ng-scope">
We'll choose the second method since it will save us a walk through our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>. How should we start?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="15" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If the word we're adding is already in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> in its current case, let's increment its count. What if it's <em>not</em> in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="16" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
There are three possibilities:
</p>
<ol class="ng-scope">
<li>
<strong>A lowercase version is in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> (in which case we <em>know</em> our input word is uppercase, because if it is lowercase and already in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> it would have passed our first check and we'd have just incremented its count)
</li>
<li>
<strong>An uppercase version is in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> (so we <em>know</em> our input word is lowercase)
</li>
<li>
<strong>The word is not in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> in any case
</li>
</ol>
<p class="ng-scope">
Let's start with the first possibility. What do we want to do?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="17" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Because we only include a word as uppercase if it is always uppercase, we simply increment the lowercase version's count.
</p>
<div code-block="question__word-cloud__adding-uppercase-and-lowercase-version-already-in-hash" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># current dictionary</span>
<span class="token punctuation">{</span><span class="token string">'blue'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># adding</span>
<span class="token string">'Blue'</span>

<span class="token comment" spellcheck="true"># code</span>
words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token comment" spellcheck="true"># new dictionary</span>
<span class="token punctuation">{</span><span class="token string">'blue'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
What about the second possibility?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="18" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
This is a little more complicated. We need to remove the uppercase version from our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> if we encounter a lowercase version. <strong>But we still need the uppercase version's count!</strong>
</p>
<div code-block="question__word-cloud__adding-lowercase-and-uppercase-version-already-in-hash" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># current dictionary</span>
<span class="token punctuation">{</span><span class="token string">'Yellow'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># adding</span>
<span class="token string">'yellow'</span>

<span class="token comment" spellcheck="true"># code</span>
words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># new dictionary</span>
<span class="token punctuation">{</span><span class="token string">'yellow'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Finally, what if the word is not in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> at all?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="19" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Easy—we add it and give it a count of 1.
</p>
<div code-block="question__word-cloud__not-in-hash-yet" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token comment" spellcheck="true"># current dictionary</span>
<span class="token punctuation">{</span><span class="token string">'purple'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># adding</span>
<span class="token string">'indigo'</span>

<span class="token comment" spellcheck="true"># code</span>
words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment" spellcheck="true"># new dictionary</span>
<span class="token punctuation">{</span><span class="token string">'purple'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'indigo'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<p class="ng-scope">
Now we have all our pieces! We can split words, add them to <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span>, and track the number of times each word occurs without having duplicate words of the same case. Can we improve our solution?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="20" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's look at our runtime and space cost. We iterate through every character in the input string once and then every word in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> once. That's a runtime of <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which is the best we can achieve for this challenge (we <em>have</em> to look at the entire input string). The space we're using includes <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> for each word and <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span> for every unique word. Our worst case is that every word is different, so our space cost is also <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which is also the best we can achieve for this challenge (we <em>have</em> to return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span> of words).
</p>
<p class="ng-scope">
<strong>But we can still make some optimizations!</strong>
</p>
<p class="ng-scope">
How can we make our <em>space cost</em> even smaller?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="21" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We're storing all our split words in a separate <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span>. That at least doubles the memory we use! How can we eliminate the need for that <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="22" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Right now, we store each word in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__splitwords-return-type"><span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span></span> <em>as we split them</em>. Instead, let's just immediately populate each word in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span>!
</p>
</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__solution-decisions"><p class="ng-scope">
In our solution, we made four decisions:
</p>
<ol class="ng-scope">
<li>
<strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>
<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="map"><span class="ng-scope">dictionary</span></span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like "Bill" and "bill").</li>
<li>
<strong>We built our own <span class="ic-function ng-isolate-scope" func="question__word-cloud__split"><span class="name" ng-transclude=""><span class="ng-scope">split</span></span>()</span> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span class="ic-function ng-isolate-scope" func="question__word-cloud__add-word-to-hash"><span class="name" ng-transclude=""><span class="ng-scope">add_word_to_dictionary</span></span>()</span> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.
</li>
<li>
<strong>We made our own <span class="ic-function ng-isolate-scope" func="question__word-cloud__is-letter"><span class="name" ng-transclude=""><span class="ng-scope">is_letter</span></span>()</span> function</strong> instead of using regular expressions. Either approach would work for this challenge.</li>
</ol></span>

<p class="ng-scope">
To split the words in the input string and populate <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span> of the unique words to the number of times they occurred, we:
</p>
<ol class="ng-scope">
<li>
<strong>Split words</strong> by <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__split-criteria-decision"><span class="ng-scope">spaces, em dashes, and ellipses</span></span>—making sure to include hyphens surrounded by characters. We also include all apostrophes (which will handle contractions nicely but will break possessives into separate words).</li>
<li>
<strong>Populate the words in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></strong> as they are identified, checking if the word is already in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span> in its current case or another case.</li>
</ol>

<p class="ng-scope">
If the input word is <em>uppercase</em> and <em>there's a lowercase version in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></em>, we increment the lowercase version's count. If the input word is <em>lowercase</em> and <em>there's an uppercase version in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__map"><span class="ng-scope">dictionary</span></span></em>, we "demote" the uppercase version by adding the lowercase version and giving it the uppercase version's count.
</p>

<div code-block="question__word-cloud__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">WordCloudData</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>words_to_counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>populate_words_to_counts<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">populate_words_to_counts</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># iterates over each character in the input string, splitting</span>
        <span class="token comment" spellcheck="true"># words and passing them to add_word_to_dictionary()</span>

        current_word <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

            character <span class="token operator">=</span> input_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

            <span class="token comment" spellcheck="true"># if we reached the end of the string we check if the last</span>
            <span class="token comment" spellcheck="true"># character is a letter and add the last word to our dictionary</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> len<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_letter<span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">:</span> current_word <span class="token operator">+=</span> character
                <span class="token keyword">if</span> current_word<span class="token punctuation">:</span> self<span class="token punctuation">.</span>add_word_to_dictionary<span class="token punctuation">(</span>current_word<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if we reach a space or emdash we know we're at the end of a word</span>
            <span class="token comment" spellcheck="true"># so we add it to our dictionary and reset our current word</span>
            <span class="token keyword">elif</span> character <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">or</span> character <span class="token operator">==</span> u<span class="token string">'\u2014'</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> current_word<span class="token punctuation">:</span> self<span class="token punctuation">.</span>add_word_to_dictionary<span class="token punctuation">(</span>current_word<span class="token punctuation">)</span>
                current_word <span class="token operator">=</span> <span class="token string">''</span>

            <span class="token comment" spellcheck="true"># we want to make sure we split on ellipses so if we get two periods in</span>
            <span class="token comment" spellcheck="true"># a row we add the current word to our dictionary and reset our current word</span>
            <span class="token keyword">elif</span> character <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> input_string<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> current_word<span class="token punctuation">:</span> self<span class="token punctuation">.</span>add_word_to_dictionary<span class="token punctuation">(</span>current_word<span class="token punctuation">)</span>
                    current_word <span class="token operator">=</span> <span class="token string">''</span>

            <span class="token comment" spellcheck="true"># if the character is a letter or an apostrophe, we add it to our current word</span>
            <span class="token keyword">elif</span> self<span class="token punctuation">.</span>is_letter<span class="token punctuation">(</span>character<span class="token punctuation">)</span> <span class="token operator">or</span> character <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>
                current_word <span class="token operator">+=</span> character

            <span class="token comment" spellcheck="true"># if the character is a hyphen, we want to check if it's surrounded by letters</span>
            <span class="token comment" spellcheck="true"># if it is, we add it to our current word</span>
            <span class="token keyword">elif</span> character <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>is_letter<span class="token punctuation">(</span>input_string<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> \
                        self<span class="token punctuation">.</span>is_letter<span class="token punctuation">(</span>input_string<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    current_word <span class="token operator">+=</span> character

    <span class="token keyword">def</span> <span class="token function">add_word_to_dictionary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># if the word is already in the dictionary we increment its count</span>
        <span class="token keyword">if</span> word <span class="token keyword">in</span> self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># if a lowercase version is in the dictionary, we know our input word must be uppercase</span>
        <span class="token comment" spellcheck="true"># but we only include uppercase words if they're always uppercase</span>
        <span class="token comment" spellcheck="true"># so we just increment the lowercase version's count</span>
        <span class="token keyword">elif</span> word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># if an uppercase version is in the dictionary, we know our input word must be lowercase.</span>
        <span class="token comment" spellcheck="true"># since we only include uppercase words if they're always uppercase, we add the</span>
        <span class="token comment" spellcheck="true"># lowercase version and give it the uppercase version's count</span>
        <span class="token keyword">elif</span> word<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">del</span> self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># otherwise, the word is not in the dictionary at all, lowercase or uppercase</span>
        <span class="token comment" spellcheck="true"># so we add it to the dictionary</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>words_to_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">is_letter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> character<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> character <span class="token keyword">in</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
Runtime and memory cost are both <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>. This is the best we can do because we have to look at <em>every</em> character in the input string and we have to return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__a-map"><span class="ng-scope">a dictionary</span></span> of <em>every</em> unique word. We optimized to only make <em>one</em> pass over our input and have only <em>one</em> <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> data structure.
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
    <ol class="ng-scope">
        <li>
            <p>
                We haven't explicitly talked about how to handle more complicated
                character sets. How would you make your solution work with
                <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__word-cloud__unicode-input"><span class="ng-scope">more unicode characters</span></span>? What changes need to be made
                to handle silly sentences like these:
            </p>
            <p>
                I'm singing ♬ on a ☔ day. 
            </p>
            <p>
                ☹ + ☕ = ☺.
            </p>
        </li>
        <li>
            We limited our input to letters, hyphenated words and
            punctuation. How would you expand your functionality to
            include numbers, email addresses, twitter handles, etc.?</li>
        <li>
            How would you add functionality to identify phrases or words
            that belong together but aren't hyphenated? ("Fire truck" or
            "Interview Cake")</li>
        <li>
            How could you improve your capitalization algorithm?
        </li>
        <li>
            How would you avoid having duplicate words that are just
            plural or singular possessives?
        </li>
    </ol>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
To handle capitalized words, there were lots of heuristics and approaches we could have used, each with their own strengths and weaknesses. Open-ended questions like this can really separate good engineers from great engineers.
</p>

<p class="ng-scope">
Good engineers will come up with <em>a solution</em>, but great engineers will come up with <em>several solutions</em>, weigh them carefully, and choose the best solution for the given context. So as you're running practice questions, challenge yourself to keep thinking even after you have a first solution. See how many solutions you can come up with. This will grow your ability to quickly see multiple ways to solve a problem, so you can figure out the <em>best</em> solution. And use the hints and gotchas on each Interview Cake question—they're designed to help you cultivate this skill.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__word-cloud__current-word": {"snake": "current_word", "camel": "currentWord"}}, "words": {"question__word-cloud__em-dashes-or-nothing": {"java": "em dashes or", "cpp": "", "c": "", "javascript": "em dashes or", "ruby": "em dashes or", "python": "em dashes or", "default": "em dashes or"}, "question__word-cloud__unicode-input": {"java": "more unicode characters", "cpp": "unicode input", "c": "unicode input", "javascript": "more unicode characters", "ruby": "more unicode characters", "python": "more unicode characters", "default": "more unicode characters"}, "question__word-cloud__map-concept": {"java": "<span concept=\"hash-map\">hash map</span>", "cpp": "<span concept=\"hash-map\">unordered map</span>", "c": "<span concept=\"hash-map\">hash table</span>", "javascript": "<span concept=\"hash-map\">map</span>", "swift": "<span concept=\"hash-map\">dictionary</span>", "ruby": "<span concept=\"hash-map\">hash</span>", "python": "<span concept=\"hash-map\">dictionary</span>"}, "question__word-cloud__split-criteria-decision": {"java": "spaces, em dashes, and ellipses", "cpp": "spaces and ellipses", "c": "spaces and ellipses", "javascript": "spaces, em dashes, and ellipses", "ruby": "spaces, em dashes, and ellipses", "python": "spaces, em dashes, and ellipses", "default": "spaces, em dashes, and ellipses"}, "question__word-cloud__could-use-built-in-split": {"java": "We could use a built-in <span func=\"split\">split</span> function", "cpp": "If <span words=\"c18n-language\">C++ (beta)</span> had a built-in split function, we could use it", "c": "If <span words=\"c18n-language\">C (beta)</span> had a built-in split function, we could use it", "javascript": "We could use a built-in <span func=\"split\">split</span> function", "ruby": "We could use a built-in <span func=\"split\">split</span> function", "python": "We could use a built-in <span func=\"split\">split</span> function", "default": "We could use a built-in <span func=\"split\"/> function"}, "question__word-cloud__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__word-cloud__c18n-language": {"java": "Java", "cpp": "C++ (beta)", "c": "C (beta)", "javascript": "JavaScript", "ruby": "Ruby", "python": "Python"}, "question__word-cloud__a-splitwords-return-type": {"java": "a list", "cpp": "<span words=\"a-standard-list\">a vector</span>", "c": "a linked list", "javascript": "<span words=\"a-standard-list\">an array</span>", "ruby": "<span words=\"a-standard-list\">an array</span>", "python": "<span words=\"a-standard-list\">a list</span>", "default": "<span words=\"a-standard-list\"/>"}, "question__word-cloud__solution-decisions": {"ruby": "<p>\nIn our solution, we made four decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">hash</span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n<li><strong>We built our own <span func=\"split\">split</span> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span func=\"add-word-to-hash\">add_word_to_hash</span> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.\n</li>\n<li><strong>We made our own <span func=\"is-letter\">is_letter</span> function</strong> instead of using regular expressions. Either approach would work for this challenge.</li>\n</ol>", "cpp": "<p>\nIn our solution, we made two decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">unordered map</span> only if it is <em>always</em> uppercase in the original string</strong>. \nWhile this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n</ol>", "c": "<p>\nIn our solution, we made the following decision:\n</p>\n<ol>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">hash table</span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n\n</ol>", "javascript": "<p>\nIn our solution, we made four decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">map</span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n<li><strong>We built our own <span func=\"split\">split</span> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span func=\"add-word-to-hash\">addWordToMap</span> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.\n</li>\n<li><strong>We made our own <span func=\"is-letter\">isLetter</span> function</strong> instead of using regular expressions. Either approach would work for this challenge.</li>\n</ol>", "java": "<p>\nIn our solution, we made three decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">hash map</span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n<li><strong>We built our own <span func=\"split\">split</span> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span func=\"add-word-to-hash\">addWordToHashMap</span> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.\n</li>\n</ol>", "python": "<p>\nIn our solution, we made four decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\">dictionary</span> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n<li><strong>We built our own <span func=\"split\">split</span> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span func=\"add-word-to-hash\">add_word_to_dictionary</span> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.\n</li>\n<li><strong>We made our own <span func=\"is-letter\">is_letter</span> function</strong> instead of using regular expressions. Either approach would work for this challenge.</li>\n</ol>", "default": "<p>\nIn our solution, we made four decisions:\n</p>\n<ol>\n<li><strong>We used a class.</strong> This allowed us to tie our functions together, calling them on instances of our class instead of passing references.</li>\n<li>For our method of avoiding duplicate words with different cases, <strong>we chose to make a word uppercase in our <span words=\"map\"/> only if it is <em>always</em> uppercase in the original string</strong>. While this is a reasonable approach, it is <em>imperfect</em> (consider proper nouns that are also lowercase words, like \"Bill\" and \"bill\").</li>\n<li><strong>We built our own <span func=\"split\"/> function</strong> instead of using a built-in one. This allowed us to pass each word to our <span func=\"add-word-to-hash\"/> function <em>as it was split</em>, and to split words and eliminate punctuation in <em>one</em> iteration.\n</li>\n<li><strong>We made our own <span func=\"is-letter\"/> function</strong> instead of using regular expressions. Either approach would work for this challenge.</li>\n</ol>"}, "question__word-cloud__map": {"java": "hash map", "cpp": "unordered map", "c": "hash table", "javascript": "map", "swift": "dictionary", "ruby": "hash", "python": "dictionary"}, "question__word-cloud__check-if-character-is-letter": {"ruby": "<p>\nHow can we check if a character in our input string is a letter?\n</p>", "cpp": "<p>\nWe'll check if each character is a letter with <span func=\"character-is-letter\">isalpha</span>.\n</p>", "c": "<p>\nWe'll check if each character is a letter with <span func=\"character-is-letter\">isalpha</span>.\n</p>", "javascript": "<p>\nHow can we check if a character in our input string is a letter?\n</p>", "java": "<p>\nWe'll check if each character is a letter with <span func=\"character-is-letter\">Character.isLetter</span>.\n</p>", "python": "<p>\nHow can we check if a character in our input string is a letter?\n</p>", "default": "<p>\nHow can we check if a character in our input string is a letter?\n</p>"}, "question__word-cloud__splitwords-return-type": {"java": "list", "cpp": "<span words=\"standard-list\">vector</span>", "c": "linked list", "javascript": "<span words=\"standard-list\">array</span>", "ruby": "<span words=\"standard-list\">array</span>", "python": "<span words=\"standard-list\">list</span>", "default": "<span words=\"standard-list\"/>"}, "question__word-cloud__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}, "question__word-cloud__is-letter-helper-function": {"ruby": "<p>\nTwo good options are to build a helper function or to use regular expressions. Either will work for this problem. We'll build our own helper function <span func=\"is-letter\">is_letter</span>:\n</p>\n\n<div code-block=\"is-letter\" language=\"ruby\" translation-highlighting=\"static\"># character is a variable holding a string with length 1\n\ndef is_letter(character)\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.include? character\nend</div>", "cpp": "", "c": "", "javascript": "<p>\nTwo good options are to build a helper function or to use regular expressions. Either will work for this problem. We'll build our own helper function <span func=\"is-letter\">isLetter</span>:\n</p>\n\n<div code-block=\"is-letter\" language=\"javascript\" translation-highlighting=\"static\">function isLetter(character) {\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(character) &gt;= 0;\n}</div>", "java": "", "python": "<p>\nTwo good options are to build a helper function or to use regular expressions. Either will work for this problem. We'll build our own helper function <span func=\"is-letter\">is_letter</span>:\n</p>\n\n<div code-block=\"is-letter\" language=\"python\" translation-highlighting=\"static\"># character is a variable holding a string with length 1\n\ndef is_letter(character):\n    return character in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</div>", "default": "<p>\nTwo good options are to build a helper function or to use regular expressions. Either will work for this problem. We'll build our own helper function <span func=\"is-letter\"/>:\n</p>\n\n<div code-block=\"is-letter\">\n</div>"}, "question__word-cloud__a-map": {"java": "a hash map", "cpp": "an unordered map", "c": "a hash table", "javascript": "a map", "swift": "a dictionary", "ruby": "a hash", "python": "a dictionary"}, "question__word-cloud__why-we-use-a-javascript-map-aside": {"java": "", "cpp": "", "c": "", "javascript": "<p class=\"aside\">\n    We'll use a JavaScript <span code-inline=\"javascript-map\">Map</span> instead of an object because it's more explicit&#8212;we're mapping words to counts. And it'll be easier and cleaner when we want to iterate over our data.\n</p>", "ruby": "", "python": "", "default": ""}}, "code-blocks": {"question__word-cloud__solution": {"java": {"code": "import java.util.Map;\nimport java.util.HashMap;\n\nclass WordCloudData {\n\n    Map&lt;String, Integer> wordsToCounts = new HashMap&lt;String, Integer>();\n\n    public WordCloudData (String inputString) {\n        populateWordsToCounts(inputString);\n    }\n\n    private void populateWordsToCounts(String inputString) {\n        // iterates over each character in the input string, splitting\n        // words and passing them to addWordToHashMap()\n\n        String currentWord = \"\";\n        for (int i = 0; i &lt; inputString.length(); i++) {\n            char character = inputString.charAt(i);\n\n            // if we reached the end of the string we check if the last\n            // character is a letter and add the last word to our hash map\n            if (i == inputString.length() - 1) {\n                if (Character.isLetter(character)) currentWord += character;\n                if (!currentWord.isEmpty()) addWordToHashMap(currentWord);\n\n            // if we reach a space or emdash we know we're at the end of a word\n            // so we add it to our hash map and reset our current word\n            } else if (character == ' ' || character == '\\u2014') {\n                if (!currentWord.isEmpty()) addWordToHashMap(currentWord);\n                currentWord = \"\";\n\n            // we want to make sure we split on ellipses so if we get two periods in\n            // a row we add the current word to our hash map and reset our current word\n            } else if (character == '.') {\n                if (i &lt; inputString.length() - 1 && inputString.charAt(i + 1) == '.') {\n                    if (!currentWord.isEmpty()) addWordToHashMap(currentWord);\n                    currentWord = \"\";\n                }\n\n            // if the character is a letter or an apostrophe, we add it to our current word\n            } else if (Character.isLetter(character) || character == '\\'') {\n                currentWord += character;\n\n            // if the character is a hyphen, we want to check if it's surrounded by letters\n            // if it is, we add it to our current word\n            } else if (character == '-') {\n                if (i > 0 && Character.isLetter(inputString.charAt(i-1))\n                        && Character.isLetter(inputString.charAt(i+1))) {\n                    currentWord += character;\n                }\n            }\n        }\n    }\n\n    private void addWordToHashMap(String word) {\n\n        // if the word is already in the hash map we increment its count\n        if (wordsToCounts.containsKey(word)) {\n            wordsToCounts.put(word, wordsToCounts.get(word) + 1);\n\n        // if a lowercase version is in the hash map, we know our input word must be uppercase\n        // but we only include uppercase words if they're always uppercase\n        // so we just increment the lowercase version's count\n        } else if (wordsToCounts.containsKey(word.toLowerCase())) {\n            int newCount = wordsToCounts.get(word.toLowerCase()) + 1;\n            wordsToCounts.put(word.toLowerCase(), newCount);\n\n        // if an uppercase version is in the hash map, we know our input word must be lowercase.\n        // since we only include uppercase words if they're always uppercase, we add the\n        // lowercase version and give it the uppercase version's count\n        } else if (wordsToCounts.containsKey(capitalize(word))) {\n            int newCount = wordsToCounts.get(capitalize(word)) + 1;\n            wordsToCounts.put(word, newCount);\n            wordsToCounts.remove(capitalize(word));                                \n\n        // otherwise, the word is not in the hash map at all, lowercase or uppercase\n        // so we add it to the hash map\n        } else {\n            wordsToCounts.put(word, 1);\n        }\n    }\n\n    private String capitalize(String word) {\n        return word.substring(0, 1).toUpperCase() + word.substring(1);\n    }\n}", "tests": "for (int n = 0; n < inputs.length; n++) {\n    assertEqual(t.new WordCloudData(inputs[n]).wordsToCounts, expectedOutputs.get(n));\n}"}, "cpp": {"code": "class WordCloudData \n{\nprivate:\n    unordered_map&lt;string, size_t> wordsToCounts_;\n\n    void populateWordsToCounts(const string& inputString) \n    {\n        // iterates over each character in the input string, splitting\n        // words and passing them to addWordToHashMap()\n\n        string currentWord;\n        for (size_t i = 0; i &lt; inputString.length(); ++i) {\n            char character = inputString[i];\n\n            // if we reached the end of the string we check if the last\n            // character is a letter and add the last word to our hash map\n            if (i == inputString.length() - 1) {\n                if (isalpha(character)) {\n                    currentWord += character;\n                }\n                if (!currentWord.empty()) {\n                    addWordToHashMap(currentWord);\n                }\n\n            // if we reach a space we know we're at the end of a word\n            // so we add it to our hash map and reset our current word\n            }\n            else if (character == ' ') {\n                if (!currentWord.empty()) {\n                    addWordToHashMap(currentWord);\n                }\n                currentWord.clear();\n\n            // we want to make sure we split on ellipses so if we get two periods in\n            // a row we add the current word to our hash map and reset our current word\n            }\n            else if (character == '.') {\n                if (i &lt; inputString.length() - 1 && inputString[i + 1] == '.') {\n                    if (!currentWord.empty()) {\n                        addWordToHashMap(currentWord);\n                    }\n                    currentWord.clear();\n                }\n\n            // if the character is a letter or an apostrophe, we add it to our current word\n            }\n            else if (isalpha(character) || character == '\\'') {\n                currentWord += character;\n\n            // if the character is a hyphen, we want to check if it's surrounded by letters\n            // if it is, we add it to our current word\n            }\n            else if (character == '-') {\n                if (i > 0 && isalpha(inputString[i - 1])\n                        && isalpha(inputString[i + 1])) {\n                    currentWord += character;\n                }\n            }\n        }\n    }\n\n    void addWordToHashMap(const string& word)\n    {\n        // if the word is already in the hash map we increment its count\n        auto it = wordsToCounts_.find(word);\n        if (it != wordsToCounts_.end()) {\n            ++it->second;\n        }\n        else if ((it = wordsToCounts_.find(toLowerCase(word))) != wordsToCounts_.end()) {\n            // if a lowercase version is in the hash map, we know our input word must be uppercase\n            // but we only include uppercase words if they're always uppercase\n            // so we just increment the lowercase version's count\n            ++it->second;\n        }\n        else if ((it = wordsToCounts_.find(capitalize(word))) != wordsToCounts_.end()) {\n            // if an uppercase version is in the hash map, we know our input word must be lowercase.\n            // since we only include uppercase words if they're always uppercase, we add the\n            // lowercase version and give it the uppercase version's count\n            size_t newCount = it->second + 1;\n            wordsToCounts_.erase(it);\n            wordsToCounts_.insert(make_pair(word, newCount));\n        }\n        else {\n            // otherwise, the word is not in the hash map at all, lowercase or uppercase\n            // so we add it to the hash map\n            wordsToCounts_.insert(make_pair(word, 1));\n        }\n    }\n    \n    static string toLowerCase(const string& word)\n    {\n        string result = word;\n        transform(result.begin(), result.end(), result.begin(), ::tolower);\n        return result;\n    }\n\n    static string capitalize(const string& word)\n    {\n        string result = word;\n        result[0] = toupper(result[0]);\n        return result;\n    }\n\npublic:\n    WordCloudData (const string& inputString)\n    {\n        populateWordsToCounts(inputString);\n    }\n\n    const unordered_map&lt;string, size_t> getWordsToCounts() const\n    {\n        return wordsToCounts_;\n    }\n\n};", "tests": "for (size_t i = 0; i < inputs.size(); ++i) {\n    WordCloudData data(inputs[i]);\n    assertEqual(data.getWordsToCounts(), expectedOutputs[i]);\n}"}, "c": {"code": "// Assume we've already implemented a hash table\nHashTable * hashTableNew(void);\nvoid hashTableFree(HashTable *hashTable);\nHashTable * hashTableInsert_int(HashTable *hashTable, const char *key, int value);\nvoid * hashTableFind(HashTable *hashTable, const char *key);\nHashTable * hashTableErase(HashTable *hashTable, const char *key);\n\n// Helper funcions declarations\nHashTable * addWordToHashTable(HashTable *hashTable, const char *word);\nchar * toLowerCase(const char *word);\nchar * capitalize(const char *word);\n\nHashTable * getWordsToCounts(const char* inputString)\n{\n    // iterates over each character in the input string, splitting\n    // words and passing them to addWordToHashTable()\n\n    HashTable *wordsToCounts = hashTableNew();\n    size_t i, wordLength = 0, inputLength = strlen(inputString);\n    char *currentWord = malloc(inputLength + 1);\n\n    assert(currentWord != NULL);\n\n    for (i = 0; i &lt; inputLength; i++) {\n        char character = inputString[i];\n\n        // if we reached the end of the string we check if the last\n        // character is a letter and add the last word to our hash map\n        if (i == inputLength - 1) {\n            if (isalpha(character)) {\n                currentWord[wordLength] = character;\n                wordLength++;\n            }\n            if (wordLength > 0) {\n                currentWord[wordLength] = '\\0';\n                wordsToCounts = addWordToHashTable(wordsToCounts, currentWord);\n            }\n        }\n        // if we reach a space we know we're at the end of a word\n        // so we add it to our hash map and reset our current word\n        else if (character == ' ') {\n          if (wordLength > 0) {\n                currentWord[wordLength] = '\\0';\n                wordsToCounts = addWordToHashTable(wordsToCounts, currentWord);\n            }\n            wordLength = 0;\n        }\n        // we want to make sure we split on ellipses so if we get two periods in\n        // a row we add the current word to our hash map and reset our current word\n        else if (character == '.') {\n            if (i &lt; inputLength - 1 && inputString[i + 1] == '.') {\n                if (wordLength > 0) {\n                    currentWord[wordLength] = '\\0';\n                    wordsToCounts = addWordToHashTable(wordsToCounts, currentWord);\n                }\n                wordLength = 0;\n            }\n        }\n        // if the character is a letter or an apostrophe, we add it to our current word\n        else if (isalpha(character) || character == '\\'') {\n            currentWord[wordLength] = character;\n            wordLength++;\n        }\n        // if the character is a hyphen, we want to check if it's surrounded by letters\n        // if it is, we add it to our current word\n        else if (character == '-') {\n            if (i > 0 && isalpha(inputString[i - 1])\n                    && isalpha(inputString[i + 1])) {\n\n                currentWord[wordLength] = character;\n                wordLength++;\n            }\n        }\n    }\n    free(currentWord);\n    return wordsToCounts;\n}\n\nHashTable * addWordToHashTable(HashTable *hashTable, const char *word)\n{\n    // if the word is already in the hash map we increment its count\n    int *value = hashTableFind(hashTable, word);\n\n    if (value != NULL) {\n        (*value)++;\n        return hashTable;\n    }\n\n    // if a lowercase version is in the hash map, we know our input word must be uppercase\n    // but we only include uppercase words if they're always uppercase\n    // so we just increment the lowercase version's count\n    char *lowerCaseWord = toLowerCase(word);\n    value = hashTableFind(hashTable, lowerCaseWord);\n    free(lowerCaseWord);\n    if (value != NULL) {\n      (*value)++;\n      return hashTable;\n    }\n\n    // if an uppercase version is in the hash map, we know our input word must be lowercase.\n    // since we only include uppercase words if they're always uppercase, we add the\n    // lowercase version and give it the uppercase version's count\n    char *capitalizedWord = capitalize(word);\n    value = hashTableFind(hashTable, capitalizedWord);\n    if (value != NULL) {\n        int newCount = (*value) + 1;\n        hashTable = hashTableErase(hashTable, capitalizedWord);\n        free(capitalizedWord);\n        hashTable = hashTableInsert_int(hashTable, word, newCount);\n        return hashTable;\n    }\n    free(capitalizedWord);\n\n    // otherwise, the word is not in the hash map at all, lowercase or uppercase\n    // so we add it to the hash map\n    hashTable = hashTableInsert_int(hashTable, word, 1);\n    return hashTable;\n}\n\nchar * toLowerCase(const char *word)\n{\n    size_t i, length = strlen(word);\n    char *newWord = malloc(length + 1);\n    assert(newWord != NULL);\n    for (i = 0; i &lt; length; i++) {\n        newWord[i] = tolower(word[i]);\n    }\n    newWord[length] = '\\0';\n    return newWord;\n}\n\nchar * capitalize(const char *word)\n{\n    size_t i, length = strlen(word);\n    char *newWord = strdup(word);\n    assert(newWord != NULL);\n    assert(length > 0);\n    newWord[0] = toupper(newWord[0]);\n    return newWord;\n}", "tests": "for (size_t i = 0; i < sizeof(inputs) / sizeof(inputs[0]); ++i) {\n    HashTable *actual = getWordsToCounts(inputs[i]);\n    ASSERT(hashTableSize(actual) == expectedWordsNumber[i]);\n    for (size_t j = 0; j < expectedWordsNumber[i]; ++j) {\n        int *count = hashTableFind(actual, expectedWords[i][j]);\n        ASSERT(count != NULL);\n        ASSERT(*count == expectedCounts[i][j]);\n    }\n    hashTableFree(actual);\n}"}, "javascript": {"code": "function WordCloudData(inputString) {\n\n    this.wordsToCounts = new Map();\n    this.populateWordsToCounts(inputString);\n}\n\nWordCloudData.prototype.populateWordsToCounts = function(inputString) {\n    // iterates over each character in the input string, splitting\n    // words and passing them to this.addWordToMap()\n\n    var currentWord = '';\n    for (var i = 0; i &lt; inputString.length; i++) {\n        var character = inputString.charAt(i);\n\n        // if we reached the end of the string we check if the last\n        // character is a letter and add the last word to our map\n        if (i === inputString.length - 1) {\n            if (this.isLetter(character)) currentWord += character;\n            if (currentWord.length) this.addWordToMap(currentWord);\n\n        // if we reach a space or emdash we know we're at the end of a word\n        // so we add it to our map and reset our current word\n        } else if (character === ' ' || character === '\\u2014') {\n            if (currentWord.length) this.addWordToMap(currentWord);\n            currentWord = '';\n\n        // we want to make sure we split on ellipses so if we get two periods in\n        // a row we add the current word to our map and reset our current word\n        } else if (character === '.') {\n            if (i &lt; inputString.length - 1 && inputString.charAt(i + 1) === '.') {\n                if (currentWord.length) this.addWordToMap(currentWord);\n                currentWord = '';\n            }\n\n        // if the character is a letter or an apostrophe, we add it to our current word\n        } else if (this.isLetter(character) || character === '\\'') {\n            currentWord += character;\n\n        // if the character is a hyphen, we want to check if it's surrounded by letters\n        // if it is, we add it to our current word\n        } else if (character === '-') {\n            if (i > 0 && this.isLetter(inputString.charAt(i-1)) &&\n                    this.isLetter(inputString.charAt(i+1))) {\n                currentWord += character;\n            }\n        }\n    }\n};\n\nWordCloudData.prototype.addWordToMap = function(word) {\n\n    var newCount;\n\n    // if the word is already in the map we increment its count\n    if (this.wordsToCounts.has(word)) {\n        newCount = this.wordsToCounts.get(word) + 1;\n        this.wordsToCounts.set(word, newCount);\n\n    // if a lowercase version is in the map, we know our input word must be uppercase\n    // but we only include uppercase words if they're always uppercase\n    // so we just increment the lowercase version's count\n    } else if (this.wordsToCounts.has(word.toLowerCase())) {\n        newCount = this.wordsToCounts.get(word.toLowerCase()) + 1;\n        this.wordsToCounts.set(word.toLowerCase(), newCount);\n\n    // if an uppercase version is in the map, we know our input word must be lowercase.\n    // since we only include uppercase words if they're always uppercase, we add the\n    // lowercase version and give it the uppercase version's count\n    } else if (this.wordsToCounts.has(this.capitalize(word))) {\n        newCount = this.wordsToCounts.get(this.capitalize(word)) + 1;\n        this.wordsToCounts.set(word, newCount);\n        this.wordsToCounts.delete(this.capitalize(word));\n\n    // otherwise, the word is not in the map at all, lowercase or uppercase\n    // so we add it to the map\n    } else {\n        this.wordsToCounts.set(word, 1);\n    }\n};\n\nWordCloudData.prototype.capitalize = function(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n};\n\nWordCloudData.prototype.isLetter = function(character) {\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(character) >= 0;\n};", "tests": "test(testInputsToExpectedResults);"}, "swift": {"code": "class WordCloudData {\n    \n    var wordsToCounts: [String: Int] = [:]\n    \n    init(inputString: String) {\n        populateWordsToCounts(inputString)\n    }\n    \n    private func populateWordsToCounts(_ inputString: String) {\n        \n        // iterates over each character in the input string, splitting\n        // words and passing them to addWordToHashMap()\n        \n        var currentWord = \"\"\n        for (i, character) in inputString.characters.enumerated() {\n            \n            // if we reached the end of the string we check if the last\n            // character is a letter and add the last word to our hash map\n            if i == inputString.characters.count - 1 {\n                if Character.isLetter(character) {\n                    currentWord += String(character)\n                }\n                if !currentWord.isEmpty {\n                    addWordToDictionary(currentWord)\n                }\n                \n                // if we reach a space or emdash we know we're at the end of a word\n                // so we add it to our hash map and reset our current word\n            } else if character == \" \" || character == \"\\u{2014}\" {\n                if !currentWord.isEmpty {\n                    addWordToDictionary(currentWord)\n                }\n                currentWord = \"\"\n                \n                // we want to make sure we split on ellipses so if we get two periods in\n                // a row we add the current word to our hash map and reset our current word\n            } else if character == \".\" {\n                let index = inputString.index(inputString.startIndex, offsetBy: i + 1)\n                if i &lt; inputString.characters.count - 1 && inputString.characters[index] == \".\" {\n                    if !currentWord.isEmpty {\n                        addWordToDictionary(currentWord)\n                    }\n                    currentWord = \"\"\n                }\n                \n                // if the character is a letter or an apostrophe, we add it to our current word\n            } else if Character.isLetter(character) || character == \"'\" {\n                currentWord += String(character)\n                \n                // if the character is a hyphen, we want to check if it's surrounded by letters\n                // if it is, we add it to our current word\n            } else if character == \"-\" {\n                if i > 0 {\n                    let beforeIndex = inputString.index(inputString.startIndex, offsetBy: i - 1)\n                    let afterIndex = inputString.index(inputString.startIndex, offsetBy: i + 1)\n                    if Character.isLetter(inputString.characters[beforeIndex]) &&\n                        Character.isLetter(inputString.characters[afterIndex]) {\n                        currentWord += String(character)\n                    }\n                }\n            }\n        }\n    }\n    \n    private func addWordToDictionary(_ word: String) {\n        \n        // if the word is already in the hash map we increment its count\n        if let value = wordsToCounts[word] {\n            wordsToCounts[word] = value + 1\n            \n            // if a lowercase version is in the hash map, we know our input word must be uppercase\n            // but we only include uppercase words if they're always uppercase\n            // so we just increment the lowercase version's count\n        } else if let value = wordsToCounts[word.lowercased()] {\n            let newCount = value + 1\n            wordsToCounts[word.lowercased()] = newCount\n            \n            // if an uppercase version is in the hash map, we know our input word must be lowercase.\n            // since we only include uppercase words if they're always uppercase, we add the\n            // lowercase version and give it the uppercase version's count\n        } else if let value = wordsToCounts[word.capitalized] {\n            let newCount = value + 1\n            wordsToCounts[word] = newCount\n            wordsToCounts[word.capitalized] = nil\n            \n            // otherwise, the word is not in the hash map at all, lowercase or uppercase\n            // so we add it to the hash map\n        } else {\n            wordsToCounts[word] = 1\n        }\n    }\n}", "tests": "for (input, result) in testInputsToExpectedResults {\n    try assertEqual(WordCloudData(inputString: input).wordsToCounts, result)\n}"}, "ruby": {"code": "class WordCloudData\n\n    attr_accessor :words_to_counts\n\n    def initialize(input_string)\n        @words_to_counts = {}\n        self.populate_words_to_counts(input_string)\n    end\n\n    def populate_words_to_counts(input_string)\n        # iterates over each character in the input string, splitting\n        # words and passing them to add_word_to_hash()\n\n        current_word = ''\n        (0...input_string.length).each do |i|\n\n            character = input_string[i]\n\n            # if we reached the end of the string we check if the last\n            # character is a letter and add the last word to our hash\n            if i == input_string.length-1\n                current_word += character if self.is_letter(character)\n                self.add_word_to_hash(current_word) if !current_word.empty?\n\n            # if we reach a space or emdash we know we're at the end of a word\n            # so we add it to our hash and reset our current word\n            elsif character == ' ' || character == \"\\u2014\"\n                self.add_word_to_hash(current_word) if !current_word.empty?\n                current_word = ''\n\n            # we want to make sure we split on ellipses so if we get two periods in\n            # a row we add the current word to our hash and reset our current word\n            elsif character == '.'\n                if i &lt; input_string.length-1 && input_string[i+1] == '.'\n                    self.add_word_to_hash(current_word) if !current_word.empty?\n                    current_word = ''\n                end\n\n            # if the character is a letter or an apostrophe, we add it to our current word\n            elsif self.is_letter(character) || character == '\\''\n                current_word += character\n\n            # if the character is a hyphen, we want to check if it's surrounded by letters\n            # if it is, we add it to our current word\n            elsif character == '-'\n                if i > 0 && self.is_letter(input_string[i-1]) && \\\n                        self.is_letter(input_string[i+1])\n                    current_word += character\n                end\n            end\n        end\n    end\n\n    def add_word_to_hash(word)\n\n        # if the word is already in the hash we increment its count\n        if @words_to_counts.include? word\n            @words_to_counts[word] += 1\n\n        # if a lowercase version is in the hash, we know our input word must be uppercase\n        # but we only include uppercase words if they're always uppercase\n        # so we just increment the lowercase version's count\n        elsif @words_to_counts.include? word.downcase\n            @words_to_counts[word.downcase] += 1\n\n        # if an uppercase version is in the hash, we know our input word must be lowercase.\n        # since we only include uppercase words if they're always uppercase, we add the\n        # lowercase version and give it the uppercase version's count\n        elsif @words_to_counts.include? word.capitalize\n            @words_to_counts[word] = 1\n            @words_to_counts[word] += @words_to_counts[word.capitalize]\n            @words_to_counts.delete(word.capitalize)\n\n        # otherwise, the word is not in the hash at all, lowercase or uppercase\n        # so we add it to the hash\n        else\n            @words_to_counts[word] = 1\n        end\n    end\n\n    def is_letter(character)\n        return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.include? character\n    end\nend", "tests": "test(test_inputs_to_expected_results)"}, "python": {"code": "class WordCloudData:\n\n    def __init__(self, input_string):\n        self.words_to_counts = {}\n        self.populate_words_to_counts(input_string)\n\n    def populate_words_to_counts(self, input_string):\n        # iterates over each character in the input string, splitting\n        # words and passing them to add_word_to_dictionary()\n\n        current_word = ''\n        for i in range(0, len(input_string)):\n\n            character = input_string[i]\n\n            # if we reached the end of the string we check if the last\n            # character is a letter and add the last word to our dictionary\n            if i == len(input_string)-1:\n                if self.is_letter(character): current_word += character\n                if current_word: self.add_word_to_dictionary(current_word)\n\n            # if we reach a space or emdash we know we're at the end of a word\n            # so we add it to our dictionary and reset our current word\n            elif character == ' ' or character == u'\\u2014':\n                if current_word: self.add_word_to_dictionary(current_word)\n                current_word = ''\n\n            # we want to make sure we split on ellipses so if we get two periods in\n            # a row we add the current word to our dictionary and reset our current word\n            elif character == '.':\n                if i &lt; len(input_string)-1 and input_string[i+1] == '.':\n                    if current_word: self.add_word_to_dictionary(current_word)\n                    current_word = ''\n\n            # if the character is a letter or an apostrophe, we add it to our current word\n            elif self.is_letter(character) or character == '\\'':\n                current_word += character\n\n            # if the character is a hyphen, we want to check if it's surrounded by letters\n            # if it is, we add it to our current word\n            elif character == '-':\n                if i > 0 and self.is_letter(input_string[i-1]) and \\\n                        self.is_letter(input_string[i+1]):\n                    current_word += character\n\n    def add_word_to_dictionary(self, word):\n\n        # if the word is already in the dictionary we increment its count\n        if word in self.words_to_counts:\n            self.words_to_counts[word] += 1\n\n        # if a lowercase version is in the dictionary, we know our input word must be uppercase\n        # but we only include uppercase words if they're always uppercase\n        # so we just increment the lowercase version's count\n        elif word.lower() in self.words_to_counts:\n            self.words_to_counts[word.lower()] += 1\n\n        # if an uppercase version is in the dictionary, we know our input word must be lowercase.\n        # since we only include uppercase words if they're always uppercase, we add the\n        # lowercase version and give it the uppercase version's count\n        elif word.capitalize() in self.words_to_counts:\n            self.words_to_counts[word] = 1\n            self.words_to_counts[word] += self.words_to_counts[word.capitalize()]\n            del self.words_to_counts[word.capitalize()]\n\n        # otherwise, the word is not in the dictionary at all, lowercase or uppercase\n        # so we add it to the dictionary\n        else:\n            self.words_to_counts[word] = 1\n\n    def is_letter(self, character):\n        return character in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "tests": "test(test_inputs_to_expected_results)"}}, "question__word-cloud__not-in-hash-yet": {"java": "// current hash map\n{purple=2}\n\n// adding\n\"indigo\"\n\n// code\nwordsToCounts.put(word, 1);\n\n// new hash map\n{purple=2, indigo=1}", "cpp": "// current hash map\n{purple=2}\n\n// adding\n\"indigo\"\n\n// code\nwordsToCounts.insert(make_pair(word, 1));\n\n// new hash map\n{purple=2, indigo=1}", "c": "// current hash map\n// {purple=2}\n\n// adding\n// \"indigo\"\n\n// code\nhashTable = hashTableInsert_int(hashTable, word, 1);\n\n// new hash map\n// {purple=2, indigo=1}", "javascript": "// current map\n{\"purple\" => 2}\n\n// adding\n\"indigo\"\n\n// code\nwordsToCounts.set(word, 1);\n\n// new map\n{\"purple\" => 2, \"indigo\" => 1}", "swift": "// current dictionary\n[\"purple\": 2]\n\n// adding\n\"indigo\"\n\n// code\nwordsToCounts[word] = 1\n\n// new dictionary\n[\"purple\": 2, \"indigo\": 1]", "ruby": "# current hash\n{'purple' => 2}\n\n# adding\n'indigo'\n\n# code\nwords_to_counts[word] = 1\n\n# new hash\n{'purple' => 2, 'indigo' => 1}", "python": "# current dictionary\n{'purple': 2}\n\n# adding\n'indigo'\n\n# code\nwords_to_counts[word] = 1\n\n# new dictionary\n{'purple': 2, 'indigo': 1}"}, "question__word-cloud__is-letter": {"java": "", "cpp": "", "c": {"code": "", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "javascript": "function isLetter(character) {\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(character) >= 0;\n}", "swift": "extension Character {\n    static func isLetter(_ character: Character) -> Bool {\n        return \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".characters.contains(character)\n    }\n}", "ruby": "# character is a variable holding a string with length 1\n\ndef is_letter(character)\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.include? character\nend", "python": "# character is a variable holding a string with length 1\n\ndef is_letter(character):\n    return character in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"}, "question__word-cloud__adding-lowercase-and-uppercase-version-already-in-hash": {"java": "// current hash map\n{Yellow=6}\n\n// adding\n\"yellow\"\n\n// code\nint capitalizedCount = wordsToCounts.get(capitalize(word));\nwordsToCounts.put(word, capitalizedCount + 1);\nwordsToCounts.remove(capitalize(word));\n\n// new hash map\n{yellow=7}", "cpp": "// current hash map\n{Yellow=6}\n\n// adding\n\"yellow\"\n\n// code\nstring key = capitalize(word);\nsize_t capitalizedCount = wordsToCounts[key];\nwordsToCounts.erase(key);\nwordsToCounts.insert(make_pair(word, capitalizedCount + 1));\n\n// new hash map\n{yellow=7}", "c": "// current hash map\n// {Yellow=6}\n\n// adding\n// \"yellow\"\n\n// code\nchar *capitalizedWord = capitalize(word);\nvalue = hashTableFind(hashTable, capitalizedWord);\nassert(value != NULL);\nint newCount = (*value) + 1;\nhashTable = hashTableErase(hashTable, capitalizedWord);\nfree(capitalizedWord);\nhashTable = hashTableInsert_int(hashTable, word, newCount);\n\n// new hash map\n// {yellow=7}", "javascript": "// current map\n{\"Yellow\" => 6}\n\n// adding\n\"yellow\"\n\n// code\nvar capitalizedCount = wordsToCounts.get(capitalize(word));\nwordsToCounts.put(word, capitalizedCount + 1);\nwordsToCounts.delete(capitalize(word));\n\n// new map\n{\"yellow\" => 7}", "swift": "// current dictionary\n[\"Yellow\": 6]\n\n// adding\n\"yellow\"\n\n// code\nif let capitalizedCount = wordsToCounts[word.capitalized] {\n    wordsToCounts[word] = capitalizedCount + 1\n    wordsToCounts[word.capitalized] = nil\n}\n\n// new dictionary\n[\"yellow\": 7]", "ruby": "# current hash\n{'Yellow' => 6}\n\n# adding\n'yellow'\n\n# code\nwords_to_counts[word] = 1\nwords_to_counts[word] += words_to_counts[word.capitalize]\nwords_to_counts.delete(word.capitalize)\n\n# new hash\n{'yellow' => 7}", "python": "# current dictionary\n{'Yellow': 6}\n\n# adding\n'yellow'\n\n# code\nwords_to_counts[word] = 1\nwords_to_counts[word] += words_to_counts[word.capitalize()]\ndel words_to_counts[word.capitalize()]\n\n# new dictionary\n{'yellow': 7}"}, "question__word-cloud__same-word-different-capitalization": {"default": "\"We came, we saw, we conquered...then we ate Bill's (Mille-Feuille) cake.\"\n\"The bill came to five dollars.\"", "python": "'We came, we saw, we conquered...then we ate Bill's (Mille-Feuille) cake.'\n'The bill came to five dollars.'"}, "question__word-cloud__add-word-to-hash": {"java": "Map&lt;String, Integer> wordsToCounts = new HashMap&lt;String, Integer>();\n\npublic void addWordToHashMap(String word) {\n    if (wordsToCounts.containsKey(word)) {\n        wordsToCounts.put(word, wordsToCounts.get(word) + 1);\n    } else {\n        wordsToCounts.put(word, 1);\n    }\n}", "cpp": "void addWordToHashMap(unordered_map&lt;string, size_t>& wordsToCounts, const string& word) {\n    // attempt to find word in the map and update count or add\n    auto it = wordsToCounts.find(word);\n    if (it != wordsToCounts.end()) {\n        ++it->second;\n    } else {\n        wordsToCounts.insert(make_pair(word, 1));\n    }\n}", "c": "HashTable * addWordToHashTable(HashTable *hashTable, const char *word) {\n    // attempt to find word in the map and update count or add\n    int *value = hashTableFind(hashTable, word);\n    if (value != NULL) {\n        ++(*value);\n    }\n    else {\n        hashTable = hashTableInsert_int(hashTable, word, 1);\n    }\n    return hashTable;\n}", "javascript": "var wordsToCounts = new Map();\n\nfunction addWordToHashMap(word) {\n    if (wordsToCounts.has(word)) {\n        wordsToCounts.set(word, wordsToCounts.get(word) + 1);\n    } else {\n        wordsToCounts.set(word, 1);\n    }\n}", "swift": "var wordsToCounts: [String: Int] = [:]\n\nfunc addWordToDictionary(_ word: String) {\n    if let count = wordsToCounts[word] {\n        wordsToCounts[word] = count + 1\n    } else {\n        wordsToCounts[word] = 1\n    }\n}", "ruby": "words_to_counts = {}\n\ndef add_word_to_hash(word)\n    if words_to_counts.include? word\n        words_to_counts[word] += 1\n    else\n        words_to_counts[word] = 1\n    end\nend", "python": "words_to_counts = {}\n\ndef add_word_to_dictionary(word):\n    if word in words_to_counts:\n        words_to_counts[word] += 1\n    else:\n        words_to_counts[word] = 1"}, "question__word-cloud__uppercase-and-lowercase-words": {"default": "\"We came, we saw, we ate cake.\"\n\"Friends, Romans, countrymen! Let us eat cake.\"\n\"New tourists in New York often wait in long lines for cronuts.\"", "python": "'We came, we saw, we ate cake.'\n'Friends, Romans, countrymen! Let us eat cake.'\n'New tourists in New York often wait in long lines for cronuts.'"}, "setup": {"java": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\nString[] inputs = new String[]{\n    \"Hello hello\",\n    \"Hello & world\",\n    \"Hello\" + \"\\u2014\" + \"world\",\n    \"   hello   \",\n    \"-world- hello-world - -- -hello-\",\n    \"cake\\'s\",\n    \"...hello...world ... cake...\",\n    \"\\\"Hello!\\\" she yelled\",\n    \"We ate (Mille-Feuille) cake.\",\n};\n\nList<Map<String, Integer>> expectedOutputs = new ArrayList<Map<String, Integer>>();\nMap<String, Integer> expectedOutput = new HashMap<String, Integer>();\n\n// capitalized word\nexpectedOutput.put(\"hello\", 2);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// stranded punctuation\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"Hello\", 1);\nexpectedOutput.put(\"world\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// em dash\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"Hello\", 1);\nexpectedOutput.put(\"world\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// surrounding spaces\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"hello\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// hyphens\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"hello\", 1);\nexpectedOutput.put(\"hello-world\", 1);\nexpectedOutput.put(\"world\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// apostrophe\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"cake\\'s\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// ellipses\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"hello\", 1);\nexpectedOutput.put(\"world\", 1);\nexpectedOutput.put(\"cake\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// quotation marks\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"Hello\", 1);\nexpectedOutput.put(\"she\", 1);\nexpectedOutput.put(\"yelled\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();\n\n// parenthesis and hyphenated words\nexpectedOutput = new HashMap<String, Integer>();\nexpectedOutput.put(\"We\", 1);\nexpectedOutput.put(\"ate\", 1);\nexpectedOutput.put(\"Mille-Feuille\", 1);\nexpectedOutput.put(\"cake\", 1);\nexpectedOutputs.add(new HashMap<String, Integer>(expectedOutput));\nexpectedOutput.clear();", "cpp": "const vector<string> inputs {\n    \"Hello hello\",\n    \"Hello & world\",\n// Unicode test commented out, maybe we revisit this later\n#if 0\n    L\"Hello\\u2014world\",\n#endif\n    \"   hello   \",\n    \"-world- hello-world - -- -hello-\",\n    \"cake\\'s\",\n    \"...hello...world ... cake...\",\n    \"\\\"Hello!\\\" she yelled\",\n    \"We ate (Mille-Feuille) cake.\",\n};\n\nvector<unordered_map<string, size_t>> expectedOutputs;\n\nstruct SetupTestData\n{\n    SetupTestData();\n\n    void put(const char* key, size_t value)\n    {\n        expectedOutput_.insert(make_pair(string(key), value));\n    }\n\n    unordered_map<string, size_t> expectedOutput_;\n};\n\nSetupTestData::SetupTestData()\n{\n\n    // capitalized word\n    put(\"hello\", 2);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // stranded punctuation\n    expectedOutput_.clear();\n    put(\"Hello\", 1);\n    put(\"world\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n// Unicode test commented out, maybe we revisit this later\n#if 0\n    // em dash\n    expectedOutput_.clear();\n    put(\"Hello\", 1);\n    put(\"world\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n#endif\n\n    // surrounding spaces\n    expectedOutput_.clear();\n    put(\"hello\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // hyphens\n    expectedOutput_.clear();\n    put(\"hello\", 1);\n    put(\"hello-world\", 1);\n    put(\"world\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // apostrophe\n    expectedOutput_.clear();\n    put(\"cake\\'s\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // ellipses\n    expectedOutput_.clear();\n    put(\"hello\", 1);\n    put(\"world\", 1);\n    put(\"cake\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // quotation marks\n    expectedOutput_.clear();\n    put(\"Hello\", 1);\n    put(\"she\", 1);\n    put(\"yelled\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // parenthesis and hyphenated words\n    expectedOutput_.clear();\n    put(\"We\", 1);\n    put(\"ate\", 1);\n    put(\"Mille-Feuille\", 1);\n    put(\"cake\", 1);\n    expectedOutputs.push_back(expectedOutput_);\n\n    // finish\n    expectedOutput_.clear();\n}\n\nSetupTestData setupTestDataObject;", "c": "char *inputs[8] = {\n    \"Hello hello\",\n    \"Hello & world\",\n    \"   hello   \",\n    \"-world- hello-world - -- -hello-\",\n    \"cake\\'s\",\n    \"...hello...world ... cake...\",\n    \"\\\"Hello!\\\" she yelled\",\n    \"We ate (Mille-Feuille) cake.\",\n};\n\nchar *expectedWords[8][4] = {\n    {\"hello\"},\n    {\"Hello\", \"world\"},\n    {\"hello\"},\n    {\"hello\", \"hello-world\", \"world\"},\n    {\"cake's\"},\n    {\"hello\", \"world\", \"cake\"},\n    {\"Hello\", \"she\", \"yelled\"},\n    {\"We\", \"ate\", \"Mille-Feuille\", \"cake\"},\n};\n\nint expectedCounts[8][4] = {\n    {2},\n    {1, 1},\n    {1},\n    {1, 1, 1},\n    {1},\n    {1, 1, 1},\n    {1, 1, 1},\n    {1, 1, 1, 1},\n};\n\nsize_t expectedWordsNumber[8] = {\n    1,\n    2,\n    1,\n    3,\n    1,\n    3,\n    3,\n    4,\n};\n\nchar *expectedSplit[8][7] = {\n    {\"Hello\", \"hello\"},\n    {\"Hello\", \"\", \"world\"},\n    {\"\", \"\", \"\", \"hello\", \"\", \"\", \"\"},\n    {\"world\", \"helloworld\", \"\", \"\", \"hello\"},\n    {\"cakes\"},\n    {\"helloworld\", \"\", \"cake\"},\n    {\"Hello\", \"she\", \"yelled\"},\n    {\"We\", \"ate\", \"MilleFeuille\", \"cake\"},\n};\n\nsize_t expectedSplitsNumber[8] = {\n    2,\n    3,\n    7,\n    5,\n    1,\n    3,\n    3,\n    4,\n};\n\nchar * terminateWithSpace(const char *str) {\n    size_t newLen = strlen(str) + 1;\n    char *newStr = malloc(newLen + 1);\n    strncpy(newStr, str, newLen + 1);\n    newStr[newLen - 1] = ' ';\n    newStr[newLen] = '\\0';\n    return newStr;\n}", "javascript": "var testInputsToExpectedResults = {\n    'Hello hello'                 : new Map([['hello', 2]]),             // capitalized word\n    'Hello & world'               : new Map([['Hello', 1], ['world', 1]]), // stranded punctuation\n    'Hello\\u2014world'            : new Map([['Hello', 1], ['world', 1]]), // em dash\n    '   hello   '                 : new Map([['hello', 1]]),             // surrounding spaces}\n    '-world- hello-world - -- -hello-': new Map([['world', 1], ['hello-world', 1], ['hello', 1]]), // hyphens\n    'cake\\'s'                     : new Map([['cake\\'s', 1]]),          // apostrophe\n    '...hello...world ... cake...': new Map([['hello', 1], ['world', 1], ['cake', 1]]), // ellipses\n    '\"Hello!\" she yelled'         : new Map([['Hello', 1], ['she', 1], ['yelled', 1]]), // quotation marks\n    'We ate (Mille-Feuille) cake.': new Map([['We', 1], ['ate', 1], ['Mille-Feuille', 1], ['cake', 1]]), // parenthesis and hyphenated words\n}\n\nfunction test(inputsToExpectedResults) {\n    for (var input in inputsToExpectedResults) {\n        if (inputsToExpectedResults.hasOwnProperty(input)) {\n            var result = new WordCloudData(input).wordsToCounts;\n            var expectedResult = inputsToExpectedResults[input];\n            assertEqual(result, expectedResult);\n        }\n    }\n}", "swift": "extension Character {\n    static func isLetter(_ character: Character) -> Bool {\n        return \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".characters.contains(character)\n    }\n}\n\nlet testInputsToExpectedResults: [String: [String: Int]] = [\n    \"Hello hello\"                       : [\"hello\": 2],                                      // capitalized word\n    \"Hello & world\"                     : [\"Hello\": 1, \"world\": 1],                          // stranded punctuation\n    \"Hello\" + \"\\u{2014}\" + \"world\"      : [\"Hello\": 1, \"world\": 1],                         // em dash\n    \"   hello   \"                       : [\"hello\": 1],                                      // surrounding spaces\n    \"-world- hello-world - -- -hello-\"  : [\"world\": 1, \"hello-world\": 1, \"hello\": 1],        // hyphens\n    \"cake's\"                            : [\"cake's\": 1],                                     // apostrophe\n    \"...hello...world ... cake...\"      : [\"hello\": 1, \"world\": 1, \"cake\": 1],               // ellipses\n    \"\\\"Hello!\\\" she yelled\"             : [\"Hello\": 1, \"she\": 1, \"yelled\": 1],               // quotation marks\n    \"We ate (Mille-Feuille) cake.\"      : [\"We\": 1, \"ate\": 1, \"Mille-Feuille\": 1, \"cake\": 1] // parenthesis and hyphenated words\n]", "ruby": "test_inputs_to_expected_results = {\n    'Hello hello'                  => {'hello' => 2},               # capitalized word\n    'Hello & world'                => {'Hello' => 1, 'world' => 1}, # stranded punctuation\n    'Hello' + \"\\u2014\" + 'world'   => {'Hello' => 1, 'world' => 1}, # em dash\n    '   hello   '                  => {'hello' => 1},               # surrounding spaces}\n    '-world- hello-world - -- -hello-' => {'world' => 1, 'hello-world' => 1, 'hello' => 1}, # hyphens\n    'cake\\'s'                      => {'cake\\'s' => 1},             # apostrophe\n    '...hello...world ... cake...' => {'hello' => 1, 'world' => 1, 'cake' => 1}, # ellipses\n    '\\\"Hello!\\\" she yelled'        => {'Hello' => 1, 'she' => 1, 'yelled' => 1}, # quotation marks\n    'We ate (Mille-Feuille) cake.' => {'We' => 1, 'ate' => 1, 'Mille-Feuille' => 1, 'cake' => 1}, # parenthesis and hyphenated words\n}\n\ndef test(inputs_to_expected_results)\n    inputs_to_expected_results.each do |input, expected_result|\n        result = WordCloudData.new(input).words_to_counts\n        assertEqual(result, expected_result)\n    end\nend", "python": "test_inputs_to_expected_results = {\n    'Hello hello'                 : {'hello': 2},              # capitalized word\n    'Hello & world'               : {'Hello': 1, 'world': 1},  # stranded punctuation\n    'Hello' + u'\\u2014' + 'world' : {'Hello': 1, 'world': 1}, # em dash\n    '   hello   '                 : {'hello': 1},              # surrounding spaces}\n    '-world- hello-world - -- -hello-': {'world': 1, 'hello-world': 1, 'hello': 1}, # hyphens\n    'cake\\'s'                     : {'cake\\'s' : 1},           # apostrophe\n    '...hello...world ... cake...': {'hello': 1, 'world': 1, 'cake': 1}, # ellipses\n    '\\\"Hello!\\\" she yelled'       : {'Hello': 1, 'she': 1, 'yelled': 1}, # quotation marks\n    'We ate (Mille-Feuille) cake.': {'We': 1, 'ate': 1, 'Mille-Feuille': 1, 'cake': 1}, # parenthesis and hyphenated words\n}\n\ndef test(inputs_to_expected_results):\n    for input, expected_result in inputs_to_expected_results.iteritems():\n        result = WordCloudData(input).words_to_counts\n        assertEqual(result, expected_result)"}, "question__word-cloud__cliff-and-bill": {"default": "\"Cliff finished his cake and paid the bill.\"\n\"Bill finished his cake at the edge of the cliff.\"", "python": "'Cliff finished his cake and paid the bill.'\n'Bill finished his cake at the edge of the cliff.'"}, "question__word-cloud__adding-uppercase-and-lowercase-version-already-in-hash": {"java": "// current hash map\n{blue=3}\n\n// adding\n\"Blue\"\n\n// code\nint lowerCaseCount = wordsToCounts.get(word.toLowerCase());\nwordsToCounts.put(word.toLowerCase(), lowerCaseCount + 1);\n\n// new hash map\n{blue=4}", "cpp": "// current hash map\n{blue=3}\n\n// adding\n\"Blue\"\n\n// code:\n++wordsToCounts[toLowerCase(word)];\n\n// new hash map\n{blue=4}", "c": "// current hash map\n// {blue=3}\n\n// adding\n// \"Blue\"\n\n// code:\nchar *lowerCaseWord = toLowerCase(word);\nint *value = hashTableFind(hashTable, lowerCaseWord);\nfree(lowerCaseWord);\nassert(value != NULL);\n++(*value);\n\n// new hash map\n// {blue=4}", "javascript": "// current map\n{\"blue\" => 3}\n\n// adding\n\"Blue\"\n\n// code\nvar lowerCaseCount = wordsToCounts.get(word.toLowerCase());\nwordsToCounts.set(word.toLowerCase(), lowerCaseCount + 1);\n\n// new map\n{\"blue\" => 4}", "swift": "// current dictionary\n[\"blue\": 3]\n\n// adding\n\"Blue\"\n\n// code\nif let lowerCaseCount = wordsToCounts[word.lowercased()] {\n    wordsToCounts[word.lowercased()] = lowerCaseCount + 1\n}\n\n// new dictionary\n[\"blue\": 4]", "ruby": "# current hash\n{'blue' => 3}\n\n# adding\n'Blue'\n\n# code\nwords_to_counts[word.downcase] += 1\n\n# new hash\n{'blue' => 4}", "python": "# current dictionary\n{'blue': 3}\n\n# adding\n'Blue'\n\n# code\nwords_to_counts[word.lower()] += 1\n\n# new dictionary\n{'blue': 4}"}, "question__word-cloud__example-sentences-capitalized-words": {"default": "\"After beating the eggs, Dana read the next step:\"\n\"Add milk and eggs, then add flour and sugar.\"", "python": "'After beating the eggs, Dana read the next step:'\n'Add milk and eggs, then add flour and sugar.'"}, "question__word-cloud__split-words": {"java": "public List&lt;String> splitWords(String inputString) {\n    List&lt;String> words = new ArrayList&lt;String>();\n    String currentWord = \"\";\n    for (char c : inputString.toCharArray()) {\n        if (c == ' ') {\n            words.add(currentWord);\n            currentWord = \"\";\n        } else if (Character.isLetter(c)) {\n            currentWord += c;\n        }\n    }\n    return words;\n}", "cpp": "vector&lt;string> splitWords(const string& inputString) \n{\n    vector&lt;string> words;\n    string currentWord;\n    for (char c : inputString) {\n        if (c == ' ') {\n            words.push_back(currentWord);\n            currentWord.clear();\n        } else if (isalpha(c)) {\n            currentWord += c;\n        }\n    }\n    return words;\n}", "c": {"code": "// Assume we've already implemented a linked list\nLinkedList * newLinkedList(void);\nvoid linkedListAppend_str(LinkedList *list , const char* string);\n\nLinkedList * splitWords(const char *inputString)\n{\n    size_t i, currentWordLength = 0;\n    LinkedList *words = newLinkedList();\n    char *currentWord = malloc(strlen(inputString) + 1);\n    assert(currentWord != NULL);\n\n    for (i = 0; i &lt; strlen(inputString); i++) {\n        if (inputString[i] == ' ') {\n            currentWord[currentWordLength] = '\\0';\n            linkedListAppend_str(words, currentWord);\n            currentWordLength = 0;\n        }\n        else if (isalpha(inputString[i])) {\n            currentWord[currentWordLength] = inputString[i];\n            currentWordLength++;\n        }\n    }\n\n    free(currentWord);\n    return words;\n}", "tests": "for (size_t i = 0; i < sizeof(inputs) / sizeof(inputs[0]); ++i) {\n    char *spaceTerminatedInput = terminateWithSpace(inputs[i]);\n    LinkedList *actual = splitWords(spaceTerminatedInput);\n    LinkedListNode *item = *actual;\n    free(spaceTerminatedInput);\n    for (size_t j = 0; j < expectedSplitsNumber[i]; ++j) {\n        ASSERT(item != NULL);\n        ASSERT(strcmp(item->data, expectedSplit[i][j]) == 0);\n        item = item->next;\n    }\n    ASSERT(item == NULL);\n    linkedListFree(actual);\n}"}, "javascript": "function splitWords(inputString) {\n    var words = [];\n    var currentWord = '';\n    for (var i = 0; i &lt; inputString.length; i++) {\n        var character = inputString[i];\n        if (character === ' ') {\n            words.push(currentWord);\n            currentWord = '';\n        } else if (isLetter(character)) {\n            currentWord += character;\n        }\n    }\n    return words;\n}", "swift": "func splitWords(_ inputString: String) -> [String] {\n    var words: [String] = []\n    var currentWord = \"\"\n    for character in inputString.characters {\n        if character == \" \" {\n            words.append(currentWord)\n            currentWord = \"\"\n        } else {\n            currentWord += String(character)\n        }\n    }\n    return words\n}", "ruby": "def split_words(input_string)\n    words = []\n    current_word = ''\n    (0...input_string.length).each do |i|\n        character = input_string[i]\n        if character == ' '\n            words.push(current_word)\n            current_word = ''\n        elsif is_letter(character)\n            current_word += character\n        end\n    end\n    return words\nend", "python": "def split_words(input_string):\n    words = []\n    current_word = ''\n    for character in input_string:\n        if character == ' ':\n            words.append(current_word)\n            current_word = ''\n        elif is_letter(character):\n            current_word += character\n    return words"}}, "code-inlines": {"question__word-cloud__javascript-map": {"default": "Map"}}, "funcs": {"question__word-cloud__split": {"default": "split", "c": "splitWords"}, "question__word-cloud__is-letter": {"snake": "is_letter", "camel": "isLetter", "cpp": "isalpha", "c": "isalpha"}, "question__word-cloud__add-word-to-hash": {"java": "addWordToHashMap", "cpp": "addWordToHashMap", "c": "addWordToHashMap", "javascript": "addWordToMap", "swift": "addWordToDictionary", "ruby": "add_word_to_hash", "python": "add_word_to_dictionary"}, "question__word-cloud__character-is-letter": {"c": "isalpha", "default": "Character.isLetter", "cpp": "isalpha"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/word-cloud" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/word-cloud" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/word-cloud&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/word-cloud" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/word-cloud" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/word-cloud&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./34.Word Cloud Data _ Interview Cake_files/jquery.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./34.Word Cloud Data _ Interview Cake_files/underscore-min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/angular-seo.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./34.Word Cloud Data _ Interview Cake_files/base.js"></script>

    
    <script src="./34.Word Cloud Data _ Interview Cake_files/prism.min.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/codemirror.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/python.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/ruby.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/javascript.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/clike.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/php.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/haskell.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./34.Word Cloud Data _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./34.Word Cloud Data _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./34.Word Cloud Data _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="f271027ad7dc7f" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" src="./34.Word Cloud Data _ Interview Cake_files/ping.html" style="display: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./34.Word Cloud Data _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="YXmEG4b6f7EyfESkxrI1E90FsBl8GMyPvwL0Y9m0LGWf4J4qVWXkbSonNqBBU0M4">
<div id="loading">
. . .
</div>


<link href="./34.Word Cloud Data _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default532320_provider" id="stripeXDM_default532320_provider" src="./34.Word Cloud Data _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./34.Word Cloud Data _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket22706" src="./34.Word Cloud Data _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>