<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0090)https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script async="" defer="true" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/visits"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"9e57878e2e","queueTime":0,"agent":"","applicationID":"7328113","applicationTime":318,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw=="}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/find-duplicate-optimize-for-space-beast-mode">
        <meta name="description" content="Figure out which number is repeated. But here&#39;s the catch: do it in linear time and constant space!">

        

        <meta property="og:title" content="Find Repeat, Space Edition BEAST MODE | Interview Cake">
        <meta property="og:description" content="Figure out which number is repeated. But here&#39;s the catch: do it in linear time and constant space!">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/find-duplicate-optimize-for-space-beast-mode">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Find Repeat, Space Edition BEAST MODE | Interview Cake">
        <meta name="twitter:description" content="Figure out which number is repeated. But here&#39;s the catch: do it in linear time and constant space!">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Find Repeat, Space Edition BEAST MODE | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a><div class="tooltip fade bottom" role="tooltip" id="tooltip766819" style="top: 92px; left: 1279.62px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Find Duplicate Files</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;find-duplicate-optimize-for-space-beast-mode&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Find Repeat, Space Edition BEAST MODE" data-meta_desc="Figure out which number is repeated. But here&#39;s the catch: do it in linear time and constant space!" data-title="" data-meta_keywords="" data-weight="1" data-difficulty="9" data-num-hints="17" data-num-gotchas="2" ng-init="setNumHints(17); setNumGotchas(2); ">
</span>



<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<strong>
Find a duplicate, Space Edition™ BEAST MODE
</strong>
</p>

<p class="ng-scope">
In <a href="https://www.interviewcake.com/question/python/find-duplicate-optimize-for-space">Find a duplicate, Space Edition™</a>, we were given <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__a-standard-list"><span class="ng-scope">a list</span></span> of integers where:
</p>

<ol class="ng-scope">
<li>the integers are in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>
</li>
<li>the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> has a length of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>
</li>
</ol>

<p class="ng-scope">
These properties mean the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> <em>must have at least 1 duplicate</em>. Our challenge was to find a duplicate number, while optimizing for <em>space</em>. We used a divide and conquer approach, iteratively cutting the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> in half to find a duplicate integer in <span complexity="nlgn" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>lg</mo><mrow><mi>n</mi></mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mop">l<span style="margin-right: 0.01389em;">g</span></span><span class="mord textstyle uncramped"><span class="mord mathit">n</span></span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space (sort of a modified binary search).
</p>

<p class="ng-scope">
But we can actually do <em>better</em>. <strong>We can find a duplicate integer in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time while keeping our space cost at <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span></strong>.
</p>

<p class="ng-scope">
This is a tricky one to derive (unless you have a strong background in graph theory), so we'll get you started:
</p>

<p class="ng-scope">
<strong>Imagine each item in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> as a node in a linked list</strong>. In any <span concept="linked-list" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">linked list</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>linked list</strong> is a low-level data structure. It stores an <em>ordered</em> list of items in individual "node" objects that have pointers to other nodes.
</p>

<p>
In a <strong>singly linked list</strong>, the nodes each have one pointer to the next node.
</p>

<div code-block="concept__linked-list__singly-linked-node-class" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">LinkedListNode</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>next  <span class="token operator">=</span> None</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So we could build a singly linked list like this:
</p>

<div code-block="concept__linked-list__singly-linked-nodes" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">a <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>

a<span class="token punctuation">.</span>next <span class="token operator">=</span> b
b<span class="token punctuation">.</span>next <span class="token operator">=</span> c</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<div class="diagram">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/linked_list__nodes_and_pointers.svg" height="115" width="455" alt="A singly-linked list with 3 nodes. The first node has value 5 and an arrow pointing to the second node, which has value 1 and an arrow pointing to the third node, which has value 9 and and arrow pointing to &quot;None.&quot;">


    
</div>


<p>
In a linked list, the first node is called the <strong>head</strong> and the last node is called the <strong>tail</strong>.
</p>

<div class="diagram">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/linked_list__nodes_and_pointers_labeled_head_and_tail.svg" height="140" width="455" alt="A linked list with 3 nodes. The first node is labelled &quot;head&quot; and the last node is labelled &quot;tail.&quot;">


    
</div>


<p>
Often, our only connection to <em>the list itself</em> is a variable pointing to the head. From there we can walk down the list to all the other nodes.
</p>

<p>
Like linked lists, <strong>arrays</strong> also store ordered lists of items, so you usually have a choice of which one to use.
</p>

<p>
<strong>
Advantages of linked lists:
</strong>
</p>
<ol>
<li>
Linked lists have <strong>constant-time insertions and deletions</strong> in any position (you just change some pointers). Arrays require <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time to do the same thing, because you'd have to "shift" all the subsequent items over 1 index.
</li>
<li>
Linked lists can <strong>continue to expand</strong> as long as there is space on the machine. Arrays (in low-level languages) must have their size specified ahead of time. Even in languages with "dynamic arrays" that automatically resize themselves when they run out of space (like Python, Ruby and JavaScript), the operation to resize a dynamic array has a large cost which can make a single insertion unexpectedly expensive.
</li>
</ol>

<p>
<strong>
Disadvantages of linked lists:
</strong>
</p>
<ol>
<li>
To access or edit an item in a linked list, you have to <strong>take <span complexity="i" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span></span></span></span> time to walk from the head of the list to the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th item</strong> (unless of course you already have a pointer directly to that item). Arrays have <em>constant-time</em> lookups and edits to the <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th item.
</li>
</ol>

<p>
Another type of linked list is a <strong>doubly linked list</strong>, which has pointers to the next <em>and the previous</em> nodes.
</p>

<div code-block="concept__linked-list__doubly-linked-node-class" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">class</span> <span class="token class-name">LinkedListNode</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value    <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>next     <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>previous <span class="token operator">=</span> None</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So we could build a doubly linked list like this:
</p>

<div code-block="concept__linked-list__doubly-linked-nodes" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">a <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> LinkedListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># put b after a</span>
a<span class="token punctuation">.</span>next <span class="token operator">=</span> b
b<span class="token punctuation">.</span>previous <span class="token operator">=</span> a

<span class="token comment" spellcheck="true"># put c after b</span>
b<span class="token punctuation">.</span>next <span class="token operator">=</span> c
c<span class="token punctuation">.</span>previous <span class="token operator">=</span> b</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<div class="diagram">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/linked_list__doubly_linked_nodes_and_pointers.svg" height="145" width="455" alt="A doubly-linked list with 3 nodes. The first node has value 5 with a &quot;next&quot; arrow pointing ahead to the second node and a &quot;previous&quot; arrow pointing back to &quot;None.&quot; The second node has value 1 with a &quot;next&quot; arrow pointing ahead to the third node and a &quot;previous&quot; arrow pointing bacl to the first node. The third node has value 9 with a &quot;next&quot; arrow pointing ahead to &quot;None&quot; and a &quot;previous&quot; arrow pointing back to the second node.">


    
</div>


<p>
Doubly linked lists allow us to traverse our list <em>backwards</em>. In a <em>singly</em> linked list, if you just had a pointer to a node in the <em>middle</em> of a list, there would be <em>no way</em> to know what its previous node was. Not a problem in a doubly linked list.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__linked-list__singly-linked-node-class": {"python": {"code": "class LinkedListNode:\n\n    def __init__(self, value):\n        self.value = value\n        self.next  = None", "tests": "test_single()"}, "cpp": "class LinkedListNode \n{\npublic:\n    int value_;\n    LinkedListNode* next_;\n\n    LinkedListNode(int value) :\n        value_(value),\n        next_(nullptr)\n    {\n    }\n};", "c": "typedef struct LinkedListNode {\n    int value;\n    LinkedListNode *next;\n} LinkedListNode;\n\nLinkedListNode *linkedListNodeNew(int value) {\n    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));\n\n    assert(newNode != NULL);\n    newNode->value = value;\n    newNode->next = NULL;\n\n    return newNode;\n}", "ruby": {"code": "class LinkedListNode\n\n    attr_accessor :value, :next\n\n    def initialize(value)\n        @value = value\n        @next  = nil\n    end\nend", "tests": "test_single()"}, "javascript": "function LinkedListNode(value) {\n    this.value = value;\n    this.next = null;\n}", "java": "public static class LinkedListNode {\n\n    public int value;\n    public LinkedListNode next;\n\n    public LinkedListNode(int value) {\n        this.value = value;\n    }\n}"}, "concept__linked-list__singly-linked-nodes": {"python": "a = LinkedListNode(5)\nb = LinkedListNode(1)\nc = LinkedListNode(9)\n\na.next = b\nb.next = c", "cpp": "LinkedListNode* a = new LinkedListNode(5);\nLinkedListNode* b = new LinkedListNode(1);\nLinkedListNode* c = new LinkedListNode(9);\n\na->next = b;\nb->next = c;", "c": "LinkedListNode* a = linkedListNodeNew(5);\nLinkedListNode* b = linkedListNodeNew(1);\nLinkedListNode* c = linkedListNodeNew(9);\n\na->next = b;\nb->next = c;", "ruby": "a = LinkedListNode.new(5)\nb = LinkedListNode.new(1)\nc = LinkedListNode.new(9)\n\na.next = b\nb.next = c", "javascript": "var a = new LinkedListNode(5);\nvar b = new LinkedListNode(1);\nvar c = new LinkedListNode(9);\n\na.next = b;\nb.next = c;", "java": "LinkedlistNode a = new LinkedListNode(5);\nLinkedlistNode b = new LinkedListNode(1);\nLinkedlistNode c = new LinkedListNode(9);\n\na.next = b;\nb.next = c;"}, "setup": {"python": "def test_single():\n    a = LinkedListNode(7)\n    b = LinkedListNode(4)\n    a.next = b\n    assertEqual(a.value, 7)\n    assertEqual(a.next.value, 4)\n\ndef test_double():\n    a = LinkedListNode(7)\n    b = LinkedListNode(4)\n    c = LinkedListNode(3)\n    d = LinkedListNode(1)\n\n    a.next = b\n\n    b.previous = a\n    b.next = c\n\n    c.previous = b\n    c.next = d\n\n    d.previous = c\n\n    assertEqual(c.next.value, 1, 'assigns next')\n    assertEqual(c.previous.value, 4, 'assigns previous')", "javascript": "function testSingle() {\n    var b = new LinkedListNode(4);\n    var a = new LinkedListNode(7);\n    a.next = b;\n    assertEqual(a.value, 7);\n    assertEqual(a.next.value, 4);\n}\n\nfunction testDouble() {\n    var a = new LinkedListNode(7);\n    var b = new LinkedListNode(4);\n    var c = new LinkedListNode(3);\n    var d = new LinkedListNode(1);\n\n    a.next = b;\n\n    b.previous = a;\n    b.next = c;\n\n    c.previous = b;\n    c.next = d;\n\n    d.previous = c;\n\n    assertEqual(c.next.value, 1, 'assigns next');\n    assertEqual(c.previous.value, 4, 'assigns previous');\n}", "ruby": "def test_single\n    b = LinkedListNode.new(4)\n    a = LinkedListNode.new(7)\n    a.next = b\n    assertEqual(a.value, 7)\n    assertEqual(a.next.value, 4)\nend\n\ndef test_double\n    a = LinkedListNode.new(7)\n    b = LinkedListNode.new(4)\n    c = LinkedListNode.new(3)\n    d = LinkedListNode.new(1)\n\n    a.next = b\n\n    b.previous = a\n    b.next = c\n\n    c.previous = b\n    c.next = d\n\n    d.previous = c\n\n    assertEqual(c.next.value, 1, 'assigns next')\n    assertEqual(c.previous.value, 4, 'assigns previous')\nend"}, "concept__linked-list__doubly-linked-node-class": {"python": {"code": "class LinkedListNode:\n\n    def __init__(self, value):\n        self.value    = value\n        self.next     = None\n        self.previous = None", "tests": "test_single()\ntest_double()"}, "cpp": "class LinkedListNode \n{\npublic:\n    int value_;\n    LinkedListNode* next_;\n    LinkedListNode* previous_;\n\n    LinkedListNode(int value) :\n        value_(value),\n        next_(nullptr),\n        previous_(nullptr)\n    {\n    }\n};", "c": "typedef struct LinkedListNode {\n    int value;\n    LinkedListNode *next;\n    LinkedListNode *previous;\n} LinkedListNode;\n\nLinkedListNode *linkedListNodeNew(int value) {\n    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));\n\n    assert(newNode != NULL);\n    newNode->value = value;\n    newNode->next = NULL;\n    newNode->previous = NULL;\n\n    return newNode;\n}", "ruby": {"code": "class LinkedListNode\n\n    attr_accessor :value, :next, :previous\n\n    def initialize(value)\n        @value    = value\n        @next     = nil\n        @previous = nil\n    end\nend", "tests": "test_single()\ntest_double()"}, "javascript": "function LinkedListNode(value) {\n    this.value = value;\n    this.next = null;\n    this.previous = null;\n}", "java": "public static class LinkedListNode {\n\n    public int value;\n    public LinkedListNode next;\n    public LinkedListNode previous;\n\n    public LinkedListNode(int value) {\n        this.value = value;\n    }\n}"}, "concept__linked-list__doubly-linked-nodes": {"python": "a = LinkedListNode(5)\nb = LinkedListNode(1)\nc = LinkedListNode(9)\n\n# put b after a\na.next = b\nb.previous = a\n\n# put c after b\nb.next = c\nc.previous = b", "cpp": "LinkedListNode* a = new LinkedListNode(5);\nLinkedListNode* b = new LinkedListNode(1);\nLinkedListNode* c = new LinkedListNode(9);\n\n// put b after a\na->next = b;\nb->previous = a;\n\n// put c after b\nb->next = c;\nc->previous = b;", "c": "LinkedListNode* a = linkedListNodeNew(5);\nLinkedListNode* b = linkedListNodeNew(1);\nLinkedListNode* c = linkedListNodeNew(9);\n\n// put b after a\na->next = b;\nb->previous = a;\n\n// put c after b\nb->next = c;\nc->previous = b;", "ruby": "a = LinkedListNode.new(5)\nb = LinkedListNode.new(1)\nc = LinkedListNode.new(9)\n\n# put b after a\na.next = b\nb.previous = a\n\n# put c after b\nb.next = c\nc.previous = b", "javascript": "var a = new LinkedListNode(5);\nvar b = new LinkedListNode(1);\nvar c = new LinkedListNode(9);\n\n// put b after a\na.next = b;\nb.previous = a;\n\n// put c after b\nb.next = c;\nc.previous = b;", "java": "LinkedListNode a = new LinkedListNode(5);\nLinkedListNode b = new LinkedListNode(1);\nLinkedListNode c = new LinkedListNode(9);\n\n// put b after a\na.next = b;\nb.previous = a;\n\n// put c after b\nb.next = c;\nc.previous = b;"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>, each node has a <strong>value</strong> and a <strong>"next"</strong> pointer. In <em>this</em> case:
</p>

<ul class="ng-scope">
<li>
The <strong>value</strong> is the <em>integer</em> from the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>.
</li>
<li>
The <strong>"next"</strong> pointer points to the <strong>value-eth</strong> node in the list (numbered starting from 1).
For example, if our value was <em>3</em>, the "next" node would be the <em>third</em> node.
</li>
</ul>


<p class="ng-scope">
Here’s a full example:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__svg-green-array-position-linked-list"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__green_array_position_linked_list__list.svg" height="110" width="271" alt="A list [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.">


    
</div>
</span>

<p class="aside ng-scope">
<strong>Notice we're using "positions" and not "indices."</strong> For this problem, we'll use the word "position" to mean something <em>like</em> "index," but different: indices start at 0, while positions start at 1. More rigorously: <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__find-duplicate-optimize-for-space-beast-mode__position"><span class="ng-scope">position</span></span> = <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__find-duplicate-optimize-for-space-beast-mode__index"><span class="ng-scope">index</span></span> + 1.
</p>

<p class="ng-scope">
Using this, <strong>find a duplicate integer in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time while keeping our space cost at <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span></strong>.
</p>

<p class="aside ng-scope">
<strong>Drawing pictures will help a lot with this one.</strong> Grab some paper and pencil (or a whiteboard, if you have one).
</p>

</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We don’t need any new data structures. Your final space cost <em>must</em> be <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We can do this without destroying the input.
</p>
</div>
</div>

</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Here are a few sample <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>s. Try drawing them out as linked lists:
</p>

<div code-block="question__find-duplicate-optimize-for-space-beast-mode__sample-arrays" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
Look for patterns. Then think about how we might use those patterns to find a duplicate number in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>.
</p>
</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
When a <em>value</em> is repeated, how will that affect the structure of our linked list?
</p>
</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If two nodes have the same <em>value</em>, their <em>next</em> pointers will point to the same node!
</p>

<p class="ng-scope">
<strong>
So if we can find a node with <em>two incoming</em> next pointers, we know the <em>position</em> of that node is a duplicate integer in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>.
</strong>
</p>

<p class="ng-scope">
For example, if there are two 2s in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>, the node in the 2nd position will have two incoming pointers.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__svg-orange-highlighted-position-two"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__orange_highlighted_position_2__list.svg" height="111" width="271" alt="A list [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.">


    
</div>
</span>

<p class="ng-scope">
Alright, we’re on to something. But hold on—creating a linked list would take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space, and we don’t want to change our space cost from <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>!
</p>

<p class="ng-scope">
No problem—turns out we can just <em>think</em> of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> as a linked list, and traverse it without <em>actually</em> creating a new data structure.
</p>

<p class="aside ng-scope">
If you're stuck on figuring out how to traverse the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> like a linked list, don't sweat it too much. Just use a real linked list for now, while we finish deriving the algorithm.
</p>

<p class="ng-scope">
Ok, so we figured out that the <strong><em>position</em> of a node with multiple incoming pointers must be a duplicate</strong>. If we can find a node with multiple incoming pointers in a <em>constant</em> number of walks through our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>, we can find a duplicate value in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time.
</p>

<p class="ng-scope">
<strong>How can we find a node with multiple incoming pointers?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's look back at those sample <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span>s and their corresponding linked lists, which we drew out to look for patterns:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__svgs-red-orange-blue-array-position-linked-list"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__red_array_position_linked_list__list.svg" height="110" width="356" alt="A list [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.">


    
</div>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__orange_array_position_linked_list__list.svg" height="110" width="356" alt="A list [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.">


    
</div>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__blue_array_position_linked_list__list.svg" height="110" width="356" alt="A list [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.">


    
</div>
</span>

<p class="ng-scope">
Are there any patterns that might help us find a node with two incoming pointers?
</p>
</div>
</div>


<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Here’s a pattern: <strong>the last node never has any incoming pointers</strong>. This makes sense—since the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> has a length <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span> and all the values are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> or less, there can never be a pointer to the last position. If <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is 5, the length of the <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> is 6 but there can’t be a value 6 so no pointer will ever point to the 6th node. Since it has no incoming pointers, <strong>we should treat the last position in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> as the "head" (starting point) of our linked list.</strong>
</p>

<p class="ng-scope">
Here's another pattern: <strong>there’s <em>never an end</em> to our list</strong>. No pointer ever points to <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__find-duplicate-optimize-for-space-beast-mode__none"><span class="ng-scope">None</span></span>. Every node has a value in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span>, so every node points to another node (or to itself). <strong>Since the list goes on forever, it must have a cycle (a loop)</strong>. Here are the cycles in our example lists:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__svgs-red-orange-blue-highlighted-loops"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__red_highlighted_loops__list.svg" height="87" width="356" alt="The list [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.">


    
</div>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__orange_highlighted_loops__list.svg" height="87" width="356" alt="The list [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.">


    
</div>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__blue_highlighted_loops__list.svg" height="87" width="356" alt="The list [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.">


    
</div>
</span>

<p class="ng-scope">
<strong>Can we use these cycles to find a duplicate value?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we walk through our linked list, starting from the head, at some point we will <em>enter</em> our cycle. Try tracing that path on the example lists above. Notice anything special about the <em>first</em> node we hit when we <em>enter</em> the cycle?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
<strong>
The first node in the cycle always has <em>at least two incoming pointers</em>!
</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We're getting close to an algorithm for finding a duplicate value. How can we find the <em>beginning</em> of a cycle?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Again, drawing an example is helpful here:
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__stick_method_intro_example.svg" height="83" width="305" alt="A linked list with 9 nodes represented by cirlces and arrows, with a cycle because node 9 links back to node 6.">


    
</div>


<p class="ng-scope">
If we were traversing this list and wanted to know <em>if</em> we were inside a cycle, that would be pretty easy—we could just remember our current position and keep stepping ahead to see if we get to that position again.
</p>

<p class="ng-scope">
But our problem is a little trickier—we need to know the <em>first</em> node in the cycle.
</p>

<p class="ng-scope">
What if we knew the <strong>length of the cycle</strong>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we knew the length of the cycle, we could use the “stick method” to start at the head of the list and find the first node. We use two pointers. One pointer starts at the head of the list:
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__stick_method_4_steps.svg" height="112" width="305" alt="We put a pointer above node 1, and we know the cycle has 4 steps because it uses nodes 6, 7, 8, and 9.">


    
</div>


<p class="ng-scope">
Then we lay down a “stick” with the same length as the cycle, by starting the second pointer at the end. So here, for example, the second pointer is starting 4 steps ahead because the cycle has 4 steps:
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__stick_method_stick_start.svg" height="112" width="305" alt="We put a second pointer above node 4 and connected it to the first pointer at node 1, forming a &quot;stick&quot; 4 nodes long.">


    
</div>


<p class="ng-scope">
Then we move the stick along the list by advancing the two pointers at the same speed (one node at a time).
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__stick_method_stick_middle.svg" height="97" width="305" alt="The &quot;stick&quot; advancing down the linked list, now with the first pointer at node 4 and the second pointer at node 8.">


    
</div>


<p class="ng-scope">
When the first pointer reaches the first node in the cycle, the second pointer will have circled around exactly once. The stick wraps around the cycle, and the two ends are in the same place: <em>the start of the cycle</em>.
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__stick_method_stick_end.svg" height="100" width="305" alt="The &quot;stick&quot; wrapped around the cycle with both pointers on the start of the cycle, node 6. The pointers are on the same node because the cycle and stick are the same length.">


    
</div>


<p class="ng-scope">
We already know where the head of our list is (the last position in the list) so we just need the length of the cycle. <strong>How can we find the length of a cycle?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
If we can get <em>inside</em> the cycle, we can just remember a position and count how many steps it takes to get back to that position.
</p>
<p class="ng-scope">
<strong>How can we make sure we’ve gotten inside a cycle?</strong>
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="12" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Well, there <em>has</em> to be a cycle in our list, and at the <em>latest</em>, the cycle is <em>just the last node</em> we hit as we traverse the list from the head:
</p>

<div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__last_node_loop.svg" height="41" width="287" alt="A linked list with 7 nodes represented by cirlces and arrows, with a cycle because the last node links back to itself.">


    
</div>


<p class="ng-scope">
So we can just start at the head and walk <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps. By then we'll <em>have</em> to be inside a cycle.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="13" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Alright, we’ve pieced together an <strong>entire strategy to find a duplicate integer!</strong> Working backwards:
</p>

<ol type="A" class="ng-scope">
<li>
We know the <em>position</em> of a node with multiple incoming pointers is a <strong>duplicate in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span></strong> because the nodes that pointed to it must have the same value.
</li>
<li>
We find a <strong>node with multiple incoming pointers</strong> by finding the first node in a cycle.
</li>
<li>
We find the <strong>first node in a cycle</strong> by finding the length of the cycle and advancing two pointers: one starting at the head of the linked list, and the other starting ahead as many steps as there are steps in the cycle. The pointers will meet at the first node in the cycle.
</li>
<li>
We find the <strong>length of a cycle</strong> by remembering a position inside the cycle and counting the number of steps it takes to get back to that position.
</li>
<li>
We <strong>get inside a cycle</strong> by starting at the head and walking <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps. We know the <strong>head of the list is at position <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span></strong>.
</li>
</ol>

<p class="ng-scope">
<strong>Can you implement this?</strong> And remember—we won't want to <em>actually</em> create a linked list. <span concept="space-edition-traverse-array" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">Here's how we can traverse our </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> <em class="ng-scope">as if</em><span class="ng-scope"> it </span><em class="ng-scope">were</em><span class="ng-scope"> a linked list</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Let's take an example <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> and try walking through it as if it were a linked list:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__svg-orange-array-index-position-linked-list"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__orange_array_index_position_linked_list__list.svg" height="133" width="271" alt="A list [3, 1, 2, 2], so 3 is at index 0 and position 1.">


    
</div>
</span>

<p>
Remember that our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> is defined as having a length <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>. So we know <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is 3 because the <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> has a length of 4.
</p>

<p>
The <em>head</em> (starting point) is the <em>4th node</em>, since it has no incoming pointers. We’ll want to go from the 4th position to the 2nd position to the 1st position to the 3rd position. Or, in terms of <em>indices in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span></em>, we’ll want to go from index 3 to index 1 to index 0 to index 2.
</p>

<p>
Let’s get set up:
</p>

<div code-block="concept__space-edition-traverse-array__set-up-n-array-and-current-position" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">n <span class="token operator">=</span> <span class="token number">3</span>
int_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># start at the head</span>
current_position <span class="token operator">=</span> <span class="token number">4</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Now we need to take <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps:
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-comment" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># step ahead</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
On our first step, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span> is 4 and the value at the 4th position is 2, so we want to update <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span> to 2. The only trick is that we need to convert our <em>position</em> to an <em>index</em>. That’s easy—we just subtract 1 (the 1st position of <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__a-standard-list"><span class="ng-scope">a list</span></span> is index 0).
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-position-to-index" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># subtract 1 from the current position to get</span>
    <span class="token comment" spellcheck="true"># the current index</span>
    current_index <span class="token operator">=</span> current_position <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># take a step, updating the current position</span>
    <span class="token comment" spellcheck="true"># to the /value/ at its previous position</span>
    current_position <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_index<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So if we’re at a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span>, the next position we want to go to is the value at the <em>index</em> <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__space-edition-traverse-array__current-position-minus-one"><span class="ng-scope">current_position - 1</span></span>. We can refactor this to 1 line and have this general way to take <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps forward in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> as if it were a linked list:
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-final" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>number_of_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>
    current_position <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"concept__space-edition-traverse-array__current-position-minus-one": {"snake": "current_position - 1", "camel": "currentPosition - 1"}}, "code-blocks": {"concept__space-edition-traverse-array__n-steps-position-to-index": {"javascript": {"code": "for (var x = 0; x &lt; n; x++) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    var currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "tests": "assertEqual(currentPosition, 3);"}, "java": "for (int x = 0; x &lt; n; x++) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    unsigned int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intVector[currentIndex];\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    // subtract 1 from the current position to get\n    // the current index\n    unsigned int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "ruby": {"code": "n.times do\n\n    # subtract 1 from the current position to get\n    # the current index\n    current_index = current_position - 1\n\n    # take a step, updating the current position\n    # to the /value/ at its previous position\n    current_position = int_array[current_index]\nend", "tests": "assertEqual(current_position, 3)"}, "python": {"code": "for _ in xrange(n):\n\n    # subtract 1 from the current position to get\n    # the current index\n    current_index = current_position - 1\n\n    # take a step, updating the current position\n    # to the /value/ at its previous position\n    current_position = int_list[current_index]", "tests": "assertEqual(current_position, 3)"}}, "setup": {"python": "int_list = [3, 1, 2, 2]\ncurrent_position = 4\nnumber_of_steps = n = 3", "javascript": "var intArray = [3, 1, 2, 2];\nvar currentPosition = 4;\nvar numberOfSteps = 3;\nvar n = 3;", "ruby": "int_array = [3, 1, 2, 2]\ncurrent_position = 4\nnumber_of_steps = n = 3"}, "concept__space-edition-traverse-array__n-steps-final": {"javascript": "for (var x = 0; x &lt; n; x++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "java": "for (int x = 0; x &lt; n; x++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n    currentPosition = intVector[currentPosition - 1];\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "ruby": {"code": "number_of_steps.times do\n    current_position = int_array[current_position - 1]\nend", "tests": "assertEqual(current_position, 3)"}, "python": {"code": "for _ in xrange(number_of_steps):\n    current_position = int_list[current_position - 1]", "tests": "assertEqual(current_position, 3)"}}, "concept__space-edition-traverse-array__n-steps-comment": {"javascript": "for (var x = 0; x &lt; n; x++) {\n    // step ahead\n}", "java": "for (int x = 0; x &lt; n; x++) {\n    // step ahead\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n    // step ahead\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    // step ahead\n}", "ruby": "n.times do\n    # step ahead\nend", "python": "for _ in xrange(n):\n    # step ahead"}, "concept__space-edition-traverse-array__set-up-n-array-and-current-position": {"javascript": "var n = 3;\nvar intArray = [3, 1, 2, 2];\n\n// start at the head\nvar currentPosition = 4;", "java": "int n = 3;\nint[] intArray = new int[]{3, 1, 2, 2};\n\n// start at the head\nint currentPosition = 4;", "cpp": "unsigned int n = 3;\nvector&lt;unsigned int> intVector {3, 1, 2, 2};\n\n// start at the head\nunsigned int currentPosition = 4;", "c": "unsigned int n = 3;\nunsigned int intArray[4] = {3, 1, 2, 2};\n\n// start at the head\nunsigned int currentPosition = 4;", "ruby": "n = 3\nint_array = [3, 1, 2, 2]\n\n# start at the head\ncurrent_position = 4", "python": "n = 3\nint_list = [3, 1, 2, 2]\n\n# start at the head\ncurrent_position = 4"}}, "words": {"concept__space-edition-traverse-array__standard-list": {"javascript": "array", "java": "array", "php": "array", "swift": "array", "cpp": "vector", "csharp": "list", "objectivec": "array", "ruby": "array", "default": "list", "c": "array", "python": "list"}, "concept__space-edition-traverse-array__a-standard-list": {"javascript": "an array", "java": "an array", "php": "an array", "swift": "an array", "cpp": "a vector", "csharp": "a list", "objectivec": "an array", "ruby": "an array", "default": "a list", "c": "an array", "python": "a list"}, "concept__space-edition-traverse-array__svg-orange-array-index-position-linked-list": {"cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__vector.svg?bust=135\" height=\"133\" width=\"271\" alt=\"A vector [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\"  alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"  />\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__list.svg?bust=135\" height=\"133\" width=\"271\" alt=\"A list [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n"}}, "vars": {"concept__space-edition-traverse-array__current-position": {"snake": "current_position", "camel": "currentPosition"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>.
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="14" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
To get inside a cycle (step E above), we identify <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>, start at the head (the node in position <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>), and walk <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps.
</p>

<div code-block="question__find-duplicate-optimize-for-space-beast-mode__get-inside-cycle" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_duplicate</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    n <span class="token operator">=</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># STEP 1: GET INSIDE A CYCLE</span>
    <span class="token comment" spellcheck="true"># start at position n+1 and walk n steps to</span>
    <span class="token comment" spellcheck="true"># find a position guaranteed to be in a cycle</span>
    position_in_cycle <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        position_in_cycle <span class="token operator">=</span> int_list<span class="token punctuation">[</span>position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="15" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Now we’re guaranteed to be inside a cycle. To find the cycle’s length (D), we remember the current position and step ahead until we come back to that same position, counting the number of steps.
</p>

<div code-block="question__find-duplicate-optimize-for-space-beast-mode__find-cycle-length" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_duplicate</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    n <span class="token operator">=</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># STEP 1: GET INSIDE A CYCLE</span>
    <span class="token comment" spellcheck="true"># start at position n+1 and walk n steps to</span>
    <span class="token comment" spellcheck="true"># find a position guaranteed to be in a cycle</span>
    position_in_cycle <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        position_in_cycle <span class="token operator">=</span> int_list<span class="token punctuation">[</span>position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># STEP 2: FIND THE LENGTH OF THE CYCLE</span>
    <span class="token comment" spellcheck="true"># find the length of the cycle by remembering a position in the cycle</span>
    <span class="token comment" spellcheck="true"># and counting the steps it takes to get back to that position</span>
    remembered_position_in_cycle <span class="token operator">=</span> position_in_cycle
    current_position_in_cycle    <span class="token operator">=</span> int_list<span class="token punctuation">[</span>position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 1 step ahead</span>
    cycle_step_count <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">while</span> current_position_in_cycle <span class="token operator">!=</span> remembered_position_in_cycle<span class="token punctuation">:</span>
        current_position_in_cycle <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        cycle_step_count <span class="token operator">+=</span> <span class="token number">1</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="16" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Now we have the <em>head</em> and the <em>length</em> of the cycle. We need to find the <em>first node</em> in the cycle (C). We set up 2 pointers: 1 at the head, and 1 ahead as many steps as there are nodes in the cycle. These two pointers form our "stick."
</p>
<div code-block-="" class="ng-scope">
</div>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="17" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Alright, we just need to find to the first node in the cycle (B), and return a duplicate value (A)!
</p>
</div>
</div>
</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We treat the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> as a linked list like we described at the top in the problem.
</p>

<p class="ng-scope">
To find a duplicate integer:
</p>

<ol type="A" class="ng-scope">
<li>
We know the <em>position</em> of a node with multiple incoming pointers is a <strong>duplicate in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span></strong> because the nodes that pointed to it must have the same value.
</li>
<li>
We find a <strong>node with multiple incoming pointers</strong> by finding the first node in a cycle.
</li>
<li>
We find the <strong>first node in a cycle</strong> by finding the length of the cycle and advancing two pointers: one starting at the head of the linked list, and the other starting ahead as many steps as there are nodes in the cycle. The pointers will meet at the first node in the cycle.
</li>
<li>
We find the <strong>length of a cycle</strong> by remembering a position inside the cycle and counting the number of steps it takes to get back to that position.
</li>
<li>
We <strong>get inside a cycle</strong> by starting at the head and walking <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps. We know the <strong>head of the list is at position <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span></strong>.
</li>
</ol>

<p class="ng-scope">
We want to <em>think</em> of our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> as a linked list but we don't want to <em>actually</em> use up all that space, so we <span concept="space-edition-traverse-array" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><strong class="ng-scope">traverse our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-optimize-for-space-beast-mode__standard-list"><span class="ng-scope">list</span></span> <em>as if</em> it were a linked list</strong></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
Let's take an example <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> and try walking through it as if it were a linked list:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__svg-orange-array-index-position-linked-list"><div class="diagram ng-scope">
    <img src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/space_edition__orange_array_index_position_linked_list__list.svg" height="133" width="271" alt="A list [3, 1, 2, 2], so 3 is at index 0 and position 1.">


    
</div>
</span>

<p>
Remember that our input <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> is defined as having a length <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>. So we know <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is 3 because the <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> has a length of 4.
</p>

<p>
The <em>head</em> (starting point) is the <em>4th node</em>, since it has no incoming pointers. We’ll want to go from the 4th position to the 2nd position to the 1st position to the 3rd position. Or, in terms of <em>indices in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span></em>, we’ll want to go from index 3 to index 1 to index 0 to index 2.
</p>

<p>
Let’s get set up:
</p>

<div code-block="concept__space-edition-traverse-array__set-up-n-array-and-current-position" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">n <span class="token operator">=</span> <span class="token number">3</span>
int_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># start at the head</span>
current_position <span class="token operator">=</span> <span class="token number">4</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Now we need to take <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps:
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-comment" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># step ahead</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
On our first step, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span> is 4 and the value at the 4th position is 2, so we want to update <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span> to 2. The only trick is that we need to convert our <em>position</em> to an <em>index</em>. That’s easy—we just subtract 1 (the 1st position of <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__a-standard-list"><span class="ng-scope">a list</span></span> is index 0).
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-position-to-index" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># subtract 1 from the current position to get</span>
    <span class="token comment" spellcheck="true"># the current index</span>
    current_index <span class="token operator">=</span> current_position <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># take a step, updating the current position</span>
    <span class="token comment" spellcheck="true"># to the /value/ at its previous position</span>
    current_position <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_index<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So if we’re at a <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__space-edition-traverse-array__current-position"><span class="ng-scope">current_position</span></span>, the next position we want to go to is the value at the <em>index</em> <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__space-edition-traverse-array__current-position-minus-one"><span class="ng-scope">current_position - 1</span></span>. We can refactor this to 1 line and have this general way to take <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps forward in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__space-edition-traverse-array__standard-list"><span class="ng-scope">list</span></span> as if it were a linked list:
</p>

<div code-block="concept__space-edition-traverse-array__n-steps-final" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>number_of_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>
    current_position <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"concept__space-edition-traverse-array__current-position-minus-one": {"snake": "current_position - 1", "camel": "currentPosition - 1"}}, "code-blocks": {"concept__space-edition-traverse-array__n-steps-position-to-index": {"javascript": {"code": "for (var x = 0; x &lt; n; x++) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    var currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "tests": "assertEqual(currentPosition, 3);"}, "java": "for (int x = 0; x &lt; n; x++) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n\n    // subtract 1 from the current position to get\n    // the current index\n    unsigned int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intVector[currentIndex];\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    // subtract 1 from the current position to get\n    // the current index\n    unsigned int currentIndex = currentPosition - 1;\n\n    // take a step, updating the current position\n    // to the /value/ at its previous position\n    currentPosition = intArray[currentIndex];\n}", "ruby": {"code": "n.times do\n\n    # subtract 1 from the current position to get\n    # the current index\n    current_index = current_position - 1\n\n    # take a step, updating the current position\n    # to the /value/ at its previous position\n    current_position = int_array[current_index]\nend", "tests": "assertEqual(current_position, 3)"}, "python": {"code": "for _ in xrange(n):\n\n    # subtract 1 from the current position to get\n    # the current index\n    current_index = current_position - 1\n\n    # take a step, updating the current position\n    # to the /value/ at its previous position\n    current_position = int_list[current_index]", "tests": "assertEqual(current_position, 3)"}}, "setup": {"python": "int_list = [3, 1, 2, 2]\ncurrent_position = 4\nnumber_of_steps = n = 3", "javascript": "var intArray = [3, 1, 2, 2];\nvar currentPosition = 4;\nvar numberOfSteps = 3;\nvar n = 3;", "ruby": "int_array = [3, 1, 2, 2]\ncurrent_position = 4\nnumber_of_steps = n = 3"}, "concept__space-edition-traverse-array__n-steps-final": {"javascript": "for (var x = 0; x &lt; n; x++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "java": "for (int x = 0; x &lt; n; x++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n    currentPosition = intVector[currentPosition - 1];\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    currentPosition = intArray[currentPosition - 1];\n}", "ruby": {"code": "number_of_steps.times do\n    current_position = int_array[current_position - 1]\nend", "tests": "assertEqual(current_position, 3)"}, "python": {"code": "for _ in xrange(number_of_steps):\n    current_position = int_list[current_position - 1]", "tests": "assertEqual(current_position, 3)"}}, "concept__space-edition-traverse-array__n-steps-comment": {"javascript": "for (var x = 0; x &lt; n; x++) {\n    // step ahead\n}", "java": "for (int x = 0; x &lt; n; x++) {\n    // step ahead\n}", "cpp": "for (unsigned int i = 0; i &lt; n; ++i) {\n    // step ahead\n}", "c": "unsigned int i;\nfor (i = 0; i &lt; n; i++) {\n    // step ahead\n}", "ruby": "n.times do\n    # step ahead\nend", "python": "for _ in xrange(n):\n    # step ahead"}, "concept__space-edition-traverse-array__set-up-n-array-and-current-position": {"javascript": "var n = 3;\nvar intArray = [3, 1, 2, 2];\n\n// start at the head\nvar currentPosition = 4;", "java": "int n = 3;\nint[] intArray = new int[]{3, 1, 2, 2};\n\n// start at the head\nint currentPosition = 4;", "cpp": "unsigned int n = 3;\nvector&lt;unsigned int> intVector {3, 1, 2, 2};\n\n// start at the head\nunsigned int currentPosition = 4;", "c": "unsigned int n = 3;\nunsigned int intArray[4] = {3, 1, 2, 2};\n\n// start at the head\nunsigned int currentPosition = 4;", "ruby": "n = 3\nint_array = [3, 1, 2, 2]\n\n# start at the head\ncurrent_position = 4", "python": "n = 3\nint_list = [3, 1, 2, 2]\n\n# start at the head\ncurrent_position = 4"}}, "words": {"concept__space-edition-traverse-array__standard-list": {"javascript": "array", "java": "array", "php": "array", "swift": "array", "cpp": "vector", "csharp": "list", "objectivec": "array", "ruby": "array", "default": "list", "c": "array", "python": "list"}, "concept__space-edition-traverse-array__a-standard-list": {"javascript": "an array", "java": "an array", "php": "an array", "swift": "an array", "cpp": "a vector", "csharp": "a list", "objectivec": "an array", "ruby": "an array", "default": "a list", "c": "an array", "python": "a list"}, "concept__space-edition-traverse-array__svg-orange-array-index-position-linked-list": {"cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__vector.svg?bust=135\" height=\"133\" width=\"271\" alt=\"A vector [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\"  alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"  />\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__array.svg?bust=135\" height=\"133\" width=\"271\" alt=\"An array [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_index_position_linked_list__list.svg?bust=135\" height=\"133\" width=\"271\" alt=\"A list [3, 1, 2, 2], so 3 is at index 0 and position 1.\"/>\n\n\n    \n</div>\n"}}, "vars": {"concept__space-edition-traverse-array__current-position": {"snake": "current_position", "camel": "currentPosition"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> by converting positions to indices.
</p>

<div code-block="question__find-duplicate-optimize-for-space-beast-mode__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_duplicate</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span><span class="token punctuation">:</span>

    n <span class="token operator">=</span> len<span class="token punctuation">(</span>int_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># STEP 1: GET INSIDE A CYCLE</span>
    <span class="token comment" spellcheck="true"># start at position n+1 and walk n steps to</span>
    <span class="token comment" spellcheck="true"># find a position guaranteed to be in a cycle</span>
    position_in_cycle <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        position_in_cycle <span class="token operator">=</span> int_list<span class="token punctuation">[</span>position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># we subtract 1 from the current position to step ahead:</span>
        <span class="token comment" spellcheck="true"># the 2nd /position/ in a list is /index/ 1</span>

    <span class="token comment" spellcheck="true"># STEP 2: FIND THE LENGTH OF THE CYCLE</span>
    <span class="token comment" spellcheck="true"># find the length of the cycle by remembering a position in the cycle</span>
    <span class="token comment" spellcheck="true"># and counting the steps it takes to get back to that position</span>
    remembered_position_in_cycle <span class="token operator">=</span> position_in_cycle
    current_position_in_cycle    <span class="token operator">=</span> int_list<span class="token punctuation">[</span>position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 1 step ahead</span>
    cycle_step_count <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">while</span> current_position_in_cycle <span class="token operator">!=</span> remembered_position_in_cycle<span class="token punctuation">:</span>
        current_position_in_cycle <span class="token operator">=</span> int_list<span class="token punctuation">[</span>current_position_in_cycle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        cycle_step_count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># STEP 3: FIND THE FIRST NODE OF THE CYCLE</span>
    <span class="token comment" spellcheck="true"># start two pointers</span>
    <span class="token comment" spellcheck="true">#   (1) at position n+1</span>
    <span class="token comment" spellcheck="true">#   (2) ahead of position n+1 as many steps as the cycle's length</span>
    pointer_start <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
    pointer_ahead <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>cycle_step_count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pointer_ahead <span class="token operator">=</span> int_list<span class="token punctuation">[</span>pointer_ahead <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># advance until the pointers are in the same position</span>
    <span class="token comment" spellcheck="true"># which is the first node in the cycle</span>
    <span class="token keyword">while</span> pointer_start <span class="token operator">!=</span> pointer_ahead<span class="token punctuation">:</span>
        pointer_start <span class="token operator">=</span> int_list<span class="token punctuation">[</span>pointer_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        pointer_ahead <span class="token operator">=</span> int_list<span class="token punctuation">[</span>pointer_ahead <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># since there are multiple values pointing to the first node</span>
    <span class="token comment" spellcheck="true"># in the cycle, its position is a duplicate in our list</span>
    <span class="token keyword">return</span> pointer_start</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>



<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space.
</p>
<p class="ng-scope">
Our space cost is <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> because all of our additional variables are integers, which each take constant space.
</p>

<p class="ng-scope">
For our runtime, we have a constant number of cycles that each take <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in their worst cases. We traverse the linked list more than once, but it's still a <em>constant</em> number of times—about 3.
</p>
<p class="ng-scope">


</p>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
This one's pretty crazy. It's hard to imagine an interviewer expecting you to get all the way through this question without help.
</p>

<p class="ng-scope">
But just because it takes a few hints to get to the answer doesn't mean a question is "too hard." Some interviewers <em>expect</em> they'll have to offer a few hints.
</p>

<p class="ng-scope">
So if you get a hint in an interview, just relax and listen. The most impressive thing you can do is drop what you're doing, fully understand the hint, and then run with it.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"vars": {"question__find-duplicate-optimize-for-space-beast-mode__position": {"default": "position"}, "question__find-duplicate-optimize-for-space-beast-mode__index": {"default": "index"}}, "code-blocks": {"question__find-duplicate-optimize-for-space-beast-mode__solution": {"java": {"code": "public int findDuplicate(int[] intArray) {\n\n    final int n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    int positionInCycle = n + 1;\n    for (int x = 0; x &lt; n; x++) {\n\n        // we subtract 1 from the current position to step ahead:\n        // the 2nd /position/ in an array is /index/ 1\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    int rememberedPositionInCycle = positionInCycle;\n    int currentPositionInCycle    = intArray[positionInCycle - 1]; // 1 step ahead\n    int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        cycleStepCount += 1;\n    }\n\n    // STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    // start two pointers\n    //   (1) at position n+1\n    //   (2) ahead of position n+1 as many steps as the cycle's length\n    int pointerStart = n + 1;\n    int pointerAhead = n + 1;\n    for (int x = 0; x &lt; cycleStepCount; x++) {\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // advance until the pointers are in the same position\n    // which is the first node in the cycle\n    while (pointerStart != pointerAhead) {\n        pointerStart = intArray[pointerStart - 1];\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // since there are multiple values pointing to the first node\n    // in the cycle, its position is a duplicate in our array\n    return pointerStart;\n}", "tests": "for (int[][] test : tests) {\n    assertContains(t.findDuplicate(test[0]), test[1]);\n}"}, "cpp": {"code": "unsigned int findDuplicate(const vector&lt;unsigned int>& intVector)\n{\n    const unsigned int n = intVector.size() - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int positionInCycle = n + 1;\n    for (unsigned int x = 0; x &lt; n; ++x) {\n\n        // we subtract 1 from the current position to step ahead:\n        // the 2nd /position/ in an array is /index/ 1\n        positionInCycle = intVector[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    unsigned int rememberedPositionInCycle = positionInCycle;\n    unsigned int currentPositionInCycle    = intVector[positionInCycle - 1]; // 1 step ahead\n    unsigned int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intVector[currentPositionInCycle - 1];\n        ++cycleStepCount;\n    }\n\n    // STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    // start two pointers\n    //   (1) at position n+1\n    //   (2) ahead of position n+1 as many steps as the cycle's length\n    unsigned int pointerStart = n + 1;\n    unsigned int pointerAhead = n + 1;\n    for (unsigned int x = 0; x &lt; cycleStepCount; ++x) {\n        pointerAhead = intVector[pointerAhead - 1];\n    }\n\n    // advance until the pointers are in the same position\n    // which is the first node in the cycle\n    while (pointerStart != pointerAhead) {\n        pointerStart = intVector[pointerStart - 1];\n        pointerAhead = intVector[pointerAhead - 1];\n    }\n\n    // since there are multiple values pointing to the first node\n    // in the cycle, its position is a duplicate in our array\n    return pointerStart;\n}", "tests": "for (const auto& test : tests) {\n    assertContains(test[1], findDuplicate(test[0]));\n}"}, "c": {"code": "unsigned int findDuplicate(const unsigned int *intArray, size_t length) {\n    const unsigned int n = length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int x, positionInCycle = n + 1;\n    for (x = 0; x &lt; n; ++x) {\n\n        // we subtract 1 from the current position to step ahead:\n        // the 2nd /position/ in an array is /index/ 1\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    unsigned int rememberedPositionInCycle = positionInCycle;\n    unsigned int currentPositionInCycle = intArray[positionInCycle - 1];  // 1 step ahead\n    unsigned int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        ++cycleStepCount;\n    }\n\n    // STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    // start two pointers\n    //   (1) at position n+1\n    //   (2) ahead of position n+1 as many steps as the cycle's length\n    unsigned int pointerStart = n + 1, pointerAhead = n + 1;\n    for (unsigned int x = 0; x &lt; cycleStepCount; ++x) {\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // advance until the pointers are in the same position\n    // which is the first node in the cycle\n    while (pointerStart != pointerAhead) {\n        pointerStart = intArray[pointerStart - 1];\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // since there are multiple values pointing to the first node\n    // in the cycle, its position is a duplicate in our array\n    return pointerStart;\n}", "tests": "for (size_t i = 0; i < sizeof(inputs) / sizeof(inputs[0]); ++i) {\n    int isValid = 0;\n    unsigned int actual = findDuplicate(inputs[i], lengths[i][0]);\n    for (unsigned int j = 0; j < lengths[i][1]; ++j) {\n        if (actual == expected[i][j]) {\n            isValid = 1;\n            break;\n        }\n    }\n    ASSERT(isValid);\n}"}, "javascript": {"code": "function findDuplicate(intArray) {\n\n    const n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    var positionInCycle = n + 1;\n    for (var x = 0; x &lt; n; x++) {\n\n        // we subtract 1 from the current position to step ahead:\n        // the 2nd /position/ in an array is /index/ 1\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    const rememberedPositionInCycle = positionInCycle;\n    var currentPositionInCycle = intArray[positionInCycle - 1]; // 1 step ahead\n    var cycleStepCount = 1;\n\n    while (currentPositionInCycle !== rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        cycleStepCount += 1;\n    }\n\n    // STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    // start two pointers\n    //   (1) at position n+1\n    //   (2) ahead of position n+1 as many steps as the cycle's length\n    var pointerStart = n + 1;\n    var pointerAhead = n + 1;\n    for (var x = 0; x&lt; cycleStepCount; x++) {\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // advance until the pointers are in the same position\n    // which is the first node in the cycle\n    while (pointerStart !== pointerAhead) {\n        pointerStart = intArray[pointerStart - 1];\n        pointerAhead = intArray[pointerAhead - 1];\n    }\n\n    // since there are multiple values pointing to the first node\n    // in the cycle, its position is a duplicate in our array\n    return pointerStart;\n}", "tests": "test(findDuplicate, tests);"}, "ruby": {"code": "def find_duplicate(int_array)\n\n    n = int_array.length - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    n.times do\n        position_in_cycle = int_array[position_in_cycle - 1]\n        # we subtract 1 from the current position to step ahead:\n        # the 2nd /position/ in an array is /index/ 1\n    end\n\n    # STEP 2: FIND THE LENGTH OF THE CYCLE\n    # find the length of the cycle by remembering a position in the cycle\n    # and counting the steps it takes to get back to that position\n    remembered_position_in_cycle = position_in_cycle\n    current_position_in_cycle    = int_array[position_in_cycle - 1] # 1 step ahead\n    cycle_step_count = 1\n\n    while current_position_in_cycle != remembered_position_in_cycle\n        current_position_in_cycle = int_array[current_position_in_cycle - 1]\n        cycle_step_count += 1\n    end\n\n    # STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    # start two pointers\n    #   (1) at position n+1\n    #   (2) ahead of position n+1 as many steps as the cycle's length\n    pointer_start = n + 1\n    pointer_ahead = n + 1\n    cycle_step_count.times do\n        pointer_ahead = int_array[pointer_ahead - 1]\n    end\n\n    # advance until the pointers are in the same position\n    # which is the first node in the cycle\n    while pointer_start != pointer_ahead\n        pointer_start = int_array[pointer_start - 1]\n        pointer_ahead = int_array[pointer_ahead - 1]\n    end\n\n    # since there are multiple values pointing to the first node\n    # in the cycle, its position is a duplicate in our array\n    return pointer_start\nend", "tests": "test(method(:find_duplicate), tests)"}, "python": {"code": "def find_duplicate(int_list):\n\n    n = len(int_list) - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    for _ in xrange(n):\n        position_in_cycle = int_list[position_in_cycle - 1]\n        # we subtract 1 from the current position to step ahead:\n        # the 2nd /position/ in a list is /index/ 1\n\n    # STEP 2: FIND THE LENGTH OF THE CYCLE\n    # find the length of the cycle by remembering a position in the cycle\n    # and counting the steps it takes to get back to that position\n    remembered_position_in_cycle = position_in_cycle\n    current_position_in_cycle    = int_list[position_in_cycle - 1] # 1 step ahead\n    cycle_step_count = 1\n\n    while current_position_in_cycle != remembered_position_in_cycle:\n        current_position_in_cycle = int_list[current_position_in_cycle - 1]\n        cycle_step_count += 1\n\n    # STEP 3: FIND THE FIRST NODE OF THE CYCLE\n    # start two pointers\n    #   (1) at position n+1\n    #   (2) ahead of position n+1 as many steps as the cycle's length\n    pointer_start = n + 1\n    pointer_ahead = n + 1\n    for _ in xrange(cycle_step_count):\n        pointer_ahead = int_list[pointer_ahead - 1]\n\n    # advance until the pointers are in the same position\n    # which is the first node in the cycle\n    while pointer_start != pointer_ahead:\n        pointer_start = int_list[pointer_start - 1]\n        pointer_ahead = int_list[pointer_ahead - 1]\n\n    # since there are multiple values pointing to the first node\n    # in the cycle, its position is a duplicate in our list\n    return pointer_start", "tests": "test(find_duplicate, tests)"}}, "question__find-duplicate-optimize-for-space-beast-mode__find-cycle-length": {"java": "public int findDuplicate(int[] intArray) {\n\n    int n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    int positionInCycle = n + 1;\n    for (int x = 0; x &lt; n; x++) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    int rememberedPositionInCycle = positionInCycle;\n    int currentPositionInCycle    = intArray[positionInCycle - 1]; // 1 step ahead\n    int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        cycleStepCount += 1;\n    }\n}", "cpp": "unsigned int findDuplicate(const vector&lt;unsigned int>& intVector)\n{\n    unsigned int n = intArray.size() - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int positionInCycle = n + 1;\n    for (unsigned int x = 0; x &lt; n; ++x) {\n        positionInCycle = intVector[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    unsigned int rememberedPositionInCycle = positionInCycle;\n    unsigned int currentPositionInCycle    = intVector[positionInCycle - 1]; // 1 step ahead\n    unsigned int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intVector[currentPositionInCycle - 1];\n        ++cycleStepCount;\n    }\n}", "c": "unsigned int findDuplicate(const unsigned int *intArray, size_t length) {\n    const unsigned int n = length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int x, positionInCycle = n + 1;\n    for (x = 0; x &lt; n; ++x) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    unsigned int rememberedPositionInCycle = positionInCycle;\n    unsigned int currentPositionInCycle = intArray[positionInCycle - 1];  // 1 step ahead\n    unsigned int cycleStepCount = 1;\n\n    while (currentPositionInCycle != rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        ++cycleStepCount;\n    }\n}", "javascript": {"code": "function findDuplicate(intArray) {\n\n    const n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    var positionInCycle = n + 1;\n    for (var x = 0; x &lt; n; x++) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n\n    // STEP 2: FIND THE LENGTH OF THE CYCLE\n    // find the length of the cycle by remembering a position in the cycle\n    // and counting the steps it takes to get back to that position\n    const rememberedPositionInCycle = positionInCycle;\n    var currentPositionInCycle = intArray[positionInCycle - 1]; // 1 step ahead\n    var cycleStepCount = 1;\n\n    while (currentPositionInCycle !== rememberedPositionInCycle) {\n        currentPositionInCycle = intArray[currentPositionInCycle - 1];\n        cycleStepCount += 1;\n    }\n}", "tests": "assertRunsWithoutError(findDuplicate, [1, 2, 2]);"}, "ruby": {"code": "def find_duplicate(int_array)\n\n    n = int_array.length - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    n.times do\n        position_in_cycle = int_array[position_in_cycle - 1]\n    end\n\n    # STEP 2: FIND THE LENGTH OF THE CYCLE\n    # find the length of the cycle by remembering a position in the cycle\n    # and counting the steps it takes to get back to that position\n    remembered_position_in_cycle = position_in_cycle\n    current_position_in_cycle    = int_array[position_in_cycle - 1] # 1 step ahead\n    cycle_step_count = 1\n\n    while current_position_in_cycle != remembered_position_in_cycle\n        current_position_in_cycle = int_array[current_position_in_cycle - 1]\n        cycle_step_count += 1\n    end\nend", "tests": "assertRunsWithoutError(method(:find_duplicate), [1, 2, 3, 4, 4])"}, "python": {"code": "def find_duplicate(int_list):\n\n    n = len(int_list) - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    for _ in xrange(n):\n        position_in_cycle = int_list[position_in_cycle - 1]\n\n    # STEP 2: FIND THE LENGTH OF THE CYCLE\n    # find the length of the cycle by remembering a position in the cycle\n    # and counting the steps it takes to get back to that position\n    remembered_position_in_cycle = position_in_cycle\n    current_position_in_cycle    = int_list[position_in_cycle - 1] # 1 step ahead\n    cycle_step_count = 1\n\n    while current_position_in_cycle != remembered_position_in_cycle:\n        current_position_in_cycle = int_list[current_position_in_cycle - 1]\n        cycle_step_count += 1", "tests": "assertRunsWithoutError(find_duplicate, [1, 2, 2])"}}, "question__find-duplicate-optimize-for-space-beast-mode__find-first-cycle-node": {"java": "// STEP 3: FIND THE FIRST NODE OF THE CYCLE\n// start two pointers\n//   (1) at position n+1\n//   (2) ahead of position n+1 as many steps as the cycle's length\nint pointerStart = n + 1;\nint pointerAhead = n + 1;\nfor (int x = 0; x &lt; cycleStepCount; x++) {\n    pointerAhead = intArray[pointerAhead - 1];\n}", "cpp": "// STEP 3: FIND THE FIRST NODE OF THE CYCLE\n// start two pointers\n//   (1) at position n+1\n//   (2) ahead of position n+1 as many steps as the cycle's length\nunsigned int pointerStart = n + 1;\nunsigned int pointerAhead = n + 1;\nfor (unsigned int x = 0; x &lt; cycleStepCount; ++x) {\n    pointerAhead = intVector[pointerAhead - 1];\n}", "c": {"code": "// STEP 3: FIND THE FIRST NODE OF THE CYCLE\n// start two pointers\n//   (1) at position n+1\n//   (2) ahead of position n+1 as many steps as the cycle's length\nunsigned int pointerStart = n + 1;\nunsigned int pointerAhead = n + 1;\nfor (unsigned int x = 0; x &lt; cycleStepCount; ++x) {\n    pointerAhead = intVector[pointerAhead - 1];\n}", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "javascript": "// STEP 3: FIND THE FIRST NODE OF THE CYCLE\n// start two pointers\n//   (1) at position n+1\n//   (2) ahead of position n+1 as many steps as the cycle's length\nvar pointerStart = n + 1;\nvar pointerAhead = n + 1;\nfor (var x = 0; x&lt; cycleStepCount; x++) {\n    pointerAhead = intArray[pointerAhead - 1];\n}", "ruby": "# STEP 3: FIND THE FIRST NODE OF THE CYCLE\n# start two pointers\n#   (1) at position n+1\n#   (2) ahead of position n+1 as many steps as the cycle's length\npointer_start = n + 1\npointer_ahead = n + 1\ncycle_step_count.times do\n    pointer_ahead = int_array[pointer_ahead - 1]\nend", "python": "# STEP 3: FIND THE FIRST NODE OF THE CYCLE\n# start two pointers\n#   (1) at position n+1\n#   (2) ahead of position n+1 as many steps as the cycle's length\npointer_start = n + 1\npointer_ahead = n + 1\nfor _ in xrange(cycle_step_count):\n    pointer_ahead = int_list[pointer_ahead - 1]"}, "question__find-duplicate-optimize-for-space-beast-mode__get-inside-cycle": {"java": "public int findDuplicate(int[] intArray) {\n\n    int n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    int positionInCycle = n + 1;\n    for (int x = 0; x &lt; n; x++) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n}", "cpp": "unsigned int findDuplicate(const vector&lt;unsigned int>& intVector)\n{\n    unsigned int n = intVector.size() - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int positionInCycle = n + 1;\n    for (unsigned int x = 0; x &lt; n; ++x) {\n        positionInCycle = intVector[positionInCycle - 1];\n    }\n}", "c": "unsigned int findDuplicate(const unsigned int *intArray, size_t length) {\n    const unsigned int n = length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    unsigned int x, positionInCycle = n + 1;\n    for (x = 0; x &lt; n; ++x) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n}", "javascript": {"code": "function findDuplicate(intArray) {\n\n    const n = intArray.length - 1;\n\n    // STEP 1: GET INSIDE A CYCLE\n    // start at position n+1 and walk n steps to\n    // find a position guaranteed to be in a cycle\n    var positionInCycle = n + 1;\n    for (var x = 0; x &lt; n; x++) {\n        positionInCycle = intArray[positionInCycle - 1];\n    }\n}", "tests": "assertRunsWithoutError(findDuplicate, [1, 2, 3, 4, 4]);"}, "ruby": {"code": "def find_duplicate(int_array)\n\n    n = int_array.length - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    n.times do\n        position_in_cycle = int_array[position_in_cycle - 1]\n    end\nend", "tests": "assertRunsWithoutError(method(:find_duplicate), [1, 2, 3, 4, 4])"}, "python": {"code": "def find_duplicate(int_list):\n\n    n = len(int_list) - 1\n\n    # STEP 1: GET INSIDE A CYCLE\n    # start at position n+1 and walk n steps to\n    # find a position guaranteed to be in a cycle\n    position_in_cycle = n + 1\n    for _ in xrange(n):\n        position_in_cycle = int_list[position_in_cycle - 1]", "tests": "assertRunsWithoutError(find_duplicate, [1, 2, 3, 4, 4])"}}, "setup": {"java": "int[][][] tests = new int[][][]{\n    { {3, 4, 2, 3, 1, 5}, {3} },\n    { {3, 1, 2, 1}, {1} },\n    { {2, 1, 3, 2}, {2} },\n    { {2, 2, 2, 3}, {2} },\n    { {1, 1, 2, 2, 3, 1, 1, 1, 1}, {1, 2} },\n    { {1, 2, 1, 4, 2, 5, 2, 4, 6}, {1, 2, 4} },\n    { {1, 1}, {1} },\n    { {3, 1, 2, 2}, {2} },\n    { {1, 1, 2, 3, 4, 5, 6}, {1} },\n};", "cpp": "const vector<vector<vector<unsigned int>>> tests {\n    vector<vector<unsigned int>> { vector<unsigned int> {3, 4, 2, 3, 1, 5}, vector<unsigned int> {3} },\n    vector<vector<unsigned int>> { vector<unsigned int> {3, 1, 2, 1}, vector<unsigned int> {1} },\n    vector<vector<unsigned int>> { vector<unsigned int> {2, 1, 3, 2}, vector<unsigned int> {2} },\n    vector<vector<unsigned int>> { vector<unsigned int> {2, 2, 2, 3}, vector<unsigned int> {2} },\n    vector<vector<unsigned int>> { vector<unsigned int> {1, 1, 2, 2, 3, 1, 1, 1, 1}, vector<unsigned int> {1, 2} },\n    vector<vector<unsigned int>> { vector<unsigned int> {1, 2, 1, 4, 2, 5, 2, 4, 6}, vector<unsigned int> {1, 2, 4} },\n    vector<vector<unsigned int>> { vector<unsigned int> {1, 1}, vector<unsigned int> {1} },\n    vector<vector<unsigned int>> { vector<unsigned int> {3, 1, 2, 2}, vector<unsigned int> {2} },\n    vector<vector<unsigned int>> { vector<unsigned int> {1, 1, 2, 3, 4, 5, 6}, vector<unsigned int> {1} },\n};", "c": "unsigned int inputs[9][9] = {\n    {3, 4, 2, 3, 1, 5},\n    {3, 1, 2, 1},\n    {2, 1, 3, 2},\n    {2, 2, 2, 3},\n    {1, 1, 2, 2, 3, 1, 1, 1, 1},\n    {1, 2, 1, 4, 2, 5, 2, 4, 6},\n    {1, 1},\n    {3, 1, 2, 2},\n    {1, 1, 2, 3, 4, 5, 6},\n};\n\nunsigned int expected[9][3] = {\n    {3},\n    {1},\n    {2},\n    {2},\n    {1, 2},\n    {1, 2, 4},\n    {1},\n    {2},\n    {1},\n};\n\nunsigned int lengths[9][2] = {\n    {6, 1},\n    {4, 1},\n    {4, 1},\n    {4, 1},\n    {9, 2},\n    {9, 3},\n    {2, 1},\n    {4, 1},\n    {7, 1},\n};", "javascript": "var tests = [\n    [[3, 4, 2, 3, 1, 5], [3]],\n    [[3, 1, 2, 1], [1]],\n    [[2, 1, 3, 2], [2]],\n    [[2, 2, 2, 3], [2]],\n    [[1, 1, 2, 2, 3, 1, 1, 1, 1], [1, 2]],\n    [[1, 2, 1, 4, 2, 5, 2, 4, 6], [1, 2, 4]],\n    [[1, 1], [1]],\n    [[3, 1, 2, 2], [2]],\n    [[1, 1, 2, 3, 4, 5, 6], [1]],\n];\n\nfunction test(functionToTest, tests) {\n    for (var i = 0; i < tests.length; i++) {\n        var test = tests[i];\n        assertContains(functionToTest(test[0]), test[1]);\n    }\n}", "ruby": "tests = [\n    [[3, 4, 2, 3, 1, 5], [3]],\n    [[3, 1, 2, 1], [1]],\n    [[2, 1, 3, 2], [2]],\n    [[2, 2, 2, 3], [2]],\n    [[1, 1, 2, 2, 3, 1, 1, 1, 1], [1, 2]],\n    [[1, 2, 1, 4, 2, 5, 2, 4, 6], [1, 2, 4]],\n    [[1, 1], [1]],\n    [[3, 1, 2, 2], [2]],\n    [[1, 1, 2, 3, 4, 5, 6], [1]],\n]\n\ndef test(function, tests)\n    tests.each do |test|\n        assertContains(function.call(test[0]), test[1])\n    end\nend", "python": "tests = [\n    ([3, 4, 2, 3, 1, 5], [3]),\n    ([3, 1, 2, 1], [1]),\n    ([2, 1, 3, 2], [2]),\n    ([2, 2, 2, 3], [2]),\n    ([1, 1, 2, 2, 3, 1, 1, 1, 1], [1, 2]),\n    ([1, 2, 1, 4, 2, 5, 2, 4, 6], [1, 2, 4]),\n    ([1, 1], [1]),\n    ([3, 1, 2, 2], [2]),\n    ([1, 1, 2, 3, 4, 5, 6], [1]),\n]\n\ndef test(function, tests):\n    for test in tests:\n        assertContains(function(test[0]), test[1])"}, "question__find-duplicate-optimize-for-space-beast-mode__sample-arrays": {"default": "[3, 4, 2, 3, 1, 5]\n[3, 1, 2, 2]\n[4, 3, 1, 1, 4]", "c": "{3, 4, 2, 3, 1, 5}\n{3, 1, 2, 2}\n{4, 3, 1, 1, 4}"}}, "code-inlines": {"question__find-duplicate-optimize-for-space-beast-mode__none": {"c": "NULL", "cpp": "nullptr", "ruby": "nil", "default": "null", "python": "None"}}, "words": {"question__find-duplicate-optimize-for-space-beast-mode__standard-list": {"ruby": "array", "javascript": "array", "swift": "array", "python": "list", "default": "list", "objectivec": "array", "cpp": "vector", "c": "array", "java": "array", "csharp": "list", "php": "array"}, "question__find-duplicate-optimize-for-space-beast-mode__svg-green-array-position-linked-list": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"271\" alt=\"An array [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__vector.svg?bust=135\" height=\"110\" width=\"271\" alt=\"A vector [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"271\" alt=\"An array [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"271\" alt=\"An array [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"271\" alt=\"An array [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__list.svg?bust=135\" height=\"110\" width=\"271\" alt=\"A list [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__green_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"271\"  alt=\"An array [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.\"  />\n\n\n    \n</div>\n"}, "question__find-duplicate-optimize-for-space-beast-mode__svg-orange-highlighted-position-two": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__array.svg?bust=135\" height=\"111\" width=\"271\" alt=\"An array [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__vector.svg?bust=135\" height=\"111\" width=\"271\" alt=\"A vector [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__array.svg?bust=135\" height=\"111\" width=\"271\" alt=\"An array [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__array.svg?bust=135\" height=\"111\" width=\"271\" alt=\"An array [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__array.svg?bust=135\" height=\"111\" width=\"271\" alt=\"An array [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__list.svg?bust=135\" height=\"111\" width=\"271\" alt=\"A list [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_position_2__array.svg?bust=135\" height=\"111\" width=\"271\"  alt=\"An array [3, 1, 2, 2], so the 2s in the third and fourth position both point to the 1 in the second position.\"  />\n\n\n    \n</div>\n"}, "question__find-duplicate-optimize-for-space-beast-mode__a-standard-list": {"ruby": "an array", "javascript": "an array", "swift": "an array", "python": "a list", "default": "a list", "objectivec": "an array", "cpp": "a vector", "c": "an array", "java": "an array", "csharp": "a list", "php": "an array"}, "question__find-duplicate-optimize-for-space-beast-mode__svgs-red-orange-blue-array-position-linked-list": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__vector.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A vector [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__vector.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A vector [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__vector.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A vector [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\" alt=\"An array [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__list.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A list [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__list.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A list [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__list.svg?bust=135\" height=\"110\" width=\"356\" alt=\"A list [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\"  alt=\"An array [3, 4, 2, 3, 1, 5], so 3 is in the first position and points to 2 in the third position.\"  />\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\"  alt=\"An array [3, 1, 2, 2], so 3 is in the first position and points to 2 in the third position.\"  />\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_array_position_linked_list__array.svg?bust=135\" height=\"110\" width=\"356\"  alt=\"An array [4, 3, 1, 1, 4], so 4 is in the first position and points to 1 in the fourth position.\"  />\n\n\n    \n</div>\n"}, "question__find-duplicate-optimize-for-space-beast-mode__svgs-red-orange-blue-highlighted-loops": {"java": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "cpp": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__vector.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The vector [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__vector.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The vector [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__vector.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The vector [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "c": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "javascript": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "ruby": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The array [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "python": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__list.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The list [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__list.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The list [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"/>\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__list.svg?bust=135\" height=\"87\" width=\"356\" alt=\"The list [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"/>\n\n\n    \n</div>\n", "default": "<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__red_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\"  alt=\"The array [3, 4, 2, 3, 1, 5] has a loop where 4 in the second position points to 3 in the fourth position, which points to 2 in the third position, which points back to 4 in the second position.\"  />\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__orange_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\"  alt=\"The array [3, 1, 2, 2] has a loop where 3 in the first position points to 2 in the third position, which points to 1 in the second position, which points back to 3 in the first position.\"  />\n\n\n    \n</div>\n\n<div class=\"diagram\">\n    <img src=\"/images/svgs/space_edition__blue_highlighted_loops__array.svg?bust=135\" height=\"87\" width=\"356\"  alt=\"The array [4, 3, 1, 1, 4] has a loop where 4 in the first position points to 1 in the fourth position, which points back to 4 in the first position.\"  />\n\n\n    \n</div>\n"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-optimize-for-space-beast-mode&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/jquery.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/underscore-min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/angular-seo.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/base.js"></script>

    
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/prism.min.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/codemirror.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/python.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/ruby.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/javascript.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/clike.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/php.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/haskell.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Facebook Pixel": true, "Optimizely": true, "Adwords": true, "All": false, "Google Analytics": true}, "C18N_LANGUAGES": [{"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}], "DEFAULT_C18N_LANGUAGE": {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, "CODEMIRROR_LANGUAGES": [{"codemirror": "text/x-haskell", "short_name": "haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n", "dropdown_rank": 10, "display_name": "Haskell", "codewars": "haskell"}, {"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "PRISM_LANGUAGES": [{"dropdown_rank": 11, "display_name": "No syntax", "short_name": "nolanguage", "prism": "none", "codemirror": ""}, {"display_name": "HTML", "short_name": "html", "prism": "markup"}, {"display_name": "SQL", "short_name": "sql", "prism": "sql"}, {"case_convention": "snake", "codemirror": "text/x-python", "short_name": "python", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "dropdown_rank": 1, "display_name": "Python", "codewars": "python", "prism": "python"}, {"case_convention": "snake", "codemirror": "text/x-ruby", "short_name": "ruby", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "dropdown_rank": 3, "display_name": "Ruby", "codewars": "ruby", "prism": "ruby"}, {"case_convention": "camel", "codemirror": "text/x-java", "short_name": "java", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "dropdown_rank": 2, "display_name": "Java", "codewars": "java", "prism": "java"}, {"case_convention": "camel", "codemirror": "text/javascript", "short_name": "javascript", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "dropdown_rank": 4, "display_name": "JavaScript", "codewars": "javascript", "prism": "javascript"}, {"case_convention": "camel", "closest_languages": ["cpp", "java"], "codemirror": "text/x-csrc", "short_name": "c", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "dropdown_rank": 5, "prism": "c", "codewars": "c", "display_name": "C (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-c++src", "short_name": "cpp", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "dropdown_rank": 6, "prism": "cpp", "codewars": "cpp", "display_name": "C++ (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "codemirror": "text/x-csharp", "short_name": "csharp", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "dropdown_rank": 7, "prism": "csharp", "codewars": "csharp", "display_name": "C# (beta)"}, {"case_convention": "camel", "closest_languages": ["javascript"], "codemirror": "text/x-php", "short_name": "php", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "dropdown_rank": 9, "prism": "php", "codewars": "php", "display_name": "PHP (beta)"}, {"case_convention": "camel", "closest_languages": ["java"], "short_name": "swift", "prism": "swift", "codewars": "swift", "display_name": "Swift (beta)"}, {"case_convention": "camel", "closest_languages": ["c", "java"], "codemirror": "text/x-objectivec", "short_name": "objectivec", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "dropdown_rank": 8, "prism": "objectivec", "display_name": "Objective-C (beta)"}], "CACHEBUST_QUERY_STR": "?bust=135"};

        
        window.JS_VARS = {"url_content_type": "question", "questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"]};
        

        
    </script>



    

    
    <script type="text/javascript" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="3vuusVsVaOJ1I6OpwZFxKJ42FkoqmCJRA4TQK0DPGn1Ixb0vUuUQhssK09ETAQX6">
<div id="loading">
. . .
</div>


<link href="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default870650_provider" id="stripeXDM_default870650_provider" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket84396" src="./41.Find Repeat, Space Edition BEAST MODE _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>