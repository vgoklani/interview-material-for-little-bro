<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0066)https://www.interviewcake.com/question/python/find-duplicate-files -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./42.Find Duplicate Files _ Interview Cake_files/9e57878e2e"></script><script src="./42.Find Duplicate Files _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./42.Find Duplicate Files _ Interview Cake_files/track"></script><script type="text/javascript" src="./42.Find Duplicate Files _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./42.Find Duplicate Files _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./42.Find Duplicate Files _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./42.Find Duplicate Files _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":301}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/find-duplicate-files">
        <meta name="description" content="Your friend copied a bunch of your files and put them in random places around your hard drive. Write a function to undo the damage.">

        

        <meta property="og:title" content="Find Duplicate Files | Interview Cake">
        <meta property="og:description" content="Your friend copied a bunch of your files and put them in random places around your hard drive. Write a function to undo the damage.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/find-duplicate-files">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Find Duplicate Files | Interview Cake">
        <meta name="twitter:description" content="Your friend copied a bunch of your files and put them in random places around your hard drive. Write a function to undo the damage.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Find Duplicate Files | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./42.Find Duplicate Files _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./42.Find Duplicate Files _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./42.Find Duplicate Files _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./42.Find Duplicate Files _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./42.Find Duplicate Files _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./42.Find Duplicate Files _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./42.Find Duplicate Files _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./42.Find Duplicate Files _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./42.Find Duplicate Files _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./42.Find Duplicate Files _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-files" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/find-duplicate-files" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/find-duplicate-files" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/find-duplicate-files" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays" aria-describedby="tooltip804202">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip804202" style="top: 92px; left: 1315.75px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Merge Sorted Arrays</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;find-duplicate-files&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Find Duplicate Files" data-meta_desc="Your friend copied a bunch of your files and put them in random places around your hard drive. Write a function to undo the damage." data-title="" data-meta_keywords="" data-weight="10" data-difficulty="10" data-num-hints="11" data-num-gotchas="4" ng-init="setNumHints(11); setNumGotchas(4); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
  <p class="ng-scope">
    <strong>
        You left your computer unlocked and your friend decided to troll you by copying a lot of your files to random spots all over your file system.
    </strong>
  </p>
  <p class="ng-scope">
    Even worse, she saved the duplicate files with random, embarrassing names ("this_is_like_a_digital_wedgie.txt" was clever, I'll give her that).
</p>

<p class="ng-scope">
Write a function that returns <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-variable-length-list"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> of all the duplicate files. We'll check them by hand before actually deleting them, since programmatically deleting files is really scary. To help us confirm that two files are actually duplicates, return <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-variable-length-list"><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span></span> of <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__file-paths-explanation"><span concept="tuple" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">tuples</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>A <strong>tuple</strong> is a list of elements:</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-example"><div code-block="concept__tuple__python-tuple-example" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"My name is Parker"</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p>
(Tuples are usually notated with parentheses to differentiate them from lists.)
</p>

<p>Like <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__standard-list"><span class="ng-scope">list</span></span>s, tuples are <strong>ordered</strong> and you can access elements by their index:</p>


<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-access-index"><div code-block="concept__tuple__python-tuple-access-index" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">cake_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'angel'</span><span class="token punctuation">,</span> <span class="token string">'bundt'</span><span class="token punctuation">)</span>

cake_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># returns: 'angel'</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuples-are-mutable-or-immutable"><p class="ng-scope">But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-item-assignment"><div code-block="concept__tuple__python-tuple-item-assignment" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">cake_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'angel'</span><span class="token punctuation">,</span> <span class="token string">'bundt'</span><span class="token punctuation">)</span>
cake_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'carrot'</span>
<span class="token comment" spellcheck="true"># raises: TypeError: 'tuple' object does not support item assignment</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<p>
Tuples can have <strong>any number of elements</strong> 
(the 'tu' in tuple doesn't mean 'two', it's just a generic name taken from words like 'septuple' and 'octuple').
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__cpp-tuples-number-of-elements"></span>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__tuple__tuple-many-elements"><div code-block="concept__tuple__python-tuple-many-elements" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div></span>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__tuple__python-tuple-item-assignment": {"default": "cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment"}, "concept__tuple__cpp-tuple-many-elements": {"default": "(90, 4, 54)\n(True, False, True, True, False)"}, "concept__tuple__python-tuple-access-index": {"default": "cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'"}, "concept__tuple__cpp-tuple-example": {"default": "(17, 3, \"My name is Parker\")"}, "concept__tuple__cpp-tuple-item-assignment": {"default": "std::tuple&lt;const char*, const char*> cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\n// works fine, since \"carrot\" and \"bundt\" are both const char*s\nstd::get&lt;1>(t) = \"carrot\";\n\n// causes a compiler error, because 3.14159 is a double,\n// but our tuple has a const char * in that position\nstd::get&lt;1>(t) = 3.14159;"}, "concept__tuple__python-tuple-example": {"default": "(17, 3, \"My name is Parker\")"}, "concept__tuple__python-tuple-many-elements": {"default": "(90, 4, 54)\n(True, False, True, True, False)"}, "concept__tuple__cpp-tuple-access-index": {"default": "std::tuple&lt;const char*, const char*> cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\nstd::get&lt;0>(cakeTuple);\n// returns \"angel\""}}, "words": {"concept__tuple__tuple-example": {"c": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "javascript": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "python": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "default": "<div code-block=\"python-tuple-example\">\n</div>", "ruby": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "cpp": "<div code-block=\"cpp-tuple-example\" language=\"cpp\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>", "java": "<div code-block=\"python-tuple-example\" language=\"python\" translation-highlighting=\"static\">(17, 3, \"My name is Parker\")</div>"}, "concept__tuple__cpp-tuples-number-of-elements": {"c": "", "javascript": "", "python": "", "default": "", "ruby": "", "cpp": "<p class=\"aside\">\n    In C++, there are some limitations on how large tuples can be depending on your compiler. \n    Don't stress about this limit though... tuples with a reasonable number of elements should work just fine.\n</p>", "java": ""}, "concept__tuple__tuples-are-mutable-or-immutable": {"c": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "javascript": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "python": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "default": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "ruby": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>", "cpp": "<p>\n    In most languages (like Python) tuples are <strong>immutable</strong>, meaning you can't change the stored values after creation. C++ tuples are a bit funky, \n    because they are not completely immutable&#8212;you can change the value of each tuple element, but only if the new element and the old element are of the same type.\n</p>", "java": "<p>But tuples are <strong>immutable!</strong> They can't be edited after they're created.</p>"}, "concept__tuple__tuple-access-index": {"c": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "javascript": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "python": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "default": "<div code-block=\"python-tuple-access-index\"></div>", "ruby": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>", "cpp": "<div code-block=\"cpp-tuple-access-index\" language=\"cpp\" translation-highlighting=\"static\">std::tuple&lt;const char*, const char*&gt; cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\nstd::get&lt;0&gt;(cakeTuple);\n// returns \"angel\"</div>", "java": "<div code-block=\"python-tuple-access-index\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\n\ncake_tuple[0]\n# returns: 'angel'</div>"}, "concept__tuple__standard-list": {"c": "array", "python": "list", "php": "array", "javascript": "array", "objectivec": "array", "csharp": "list", "default": "list", "ruby": "array", "cpp": "vector", "java": "array", "swift": "array"}, "concept__tuple__tuple-item-assignment": {"c": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "javascript": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "python": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "default": "<div code-block=\"python-tuple-item-assignment\"></div>", "ruby": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>", "cpp": "<div code-block=\"cpp-tuple-item-assignment\" language=\"cpp\" translation-highlighting=\"static\">std::tuple&lt;const char*, const char*&gt; cakeTuple = std::make_tuple(\"angel\", \"bundt\");\n\n// works fine, since \"carrot\" and \"bundt\" are both const char*s\nstd::get&lt;1&gt;(t) = \"carrot\";\n\n// causes a compiler error, because 3.14159 is a double,\n// but our tuple has a const char * in that position\nstd::get&lt;1&gt;(t) = 3.14159;</div>", "java": "<div code-block=\"python-tuple-item-assignment\" language=\"python\" translation-highlighting=\"static\">cake_tuple = ('angel', 'bundt')\ncake_tuple[1] = 'carrot'\n# raises: TypeError: 'tuple' object does not support item assignment</div>"}, "concept__tuple__tuple-many-elements": {"c": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "javascript": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "python": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "default": "<div code-block=\"python-tuple-many-elements\">\n</div>", "ruby": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "cpp": "<div code-block=\"cpp-tuple-many-elements\" language=\"cpp\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>", "java": "<div code-block=\"python-tuple-many-elements\" language=\"python\" translation-highlighting=\"static\">(90, 4, 54)\n(True, False, True, True, False)</div>"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span><span class="ng-scope"> where</span></span>:
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__file-paths-details"><ul class="ng-scope">
<li>
the <strong>first</strong> item is the <strong>duplicate</strong> file
</li>
<li>
the <strong>second</strong> item is the <strong>original</strong> file
</li>
</ul></span>

<p class="ng-scope">
For example:
</p>

<div code-block="question__find-duplicate-files__example-output" language="none" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-none">  <code class="  language-none" ng-transclude="">[('/tmp/parker_is_dumb.mpg', '/home/parker/secret_puppy_dance.mpg'),
 ('/home/trololol.mov', '/etc/apache2/httpd.conf')]</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
You can assume each file was only duplicated once.
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__server-side-language"></span>

</div>

    
</div>
<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
      Are you correctly handling child folders as well as sibling folders? Be careful that you're traversing your file tree correctly...
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
        When you find two files that are the same, don't just choose a random one to mark as the "duplicate." Try to figure out which one your friend made!
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
      Does your solution work correctly if it's an empty file system (meaning the root directory is empty)?
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="gotcha">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
        Our solution takes <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the <em>number of files</em>. Is your solution order of the <em>total size on disc of all the files</em>? If so, you can do better!
    </p>
    <p class="ng-scope">
        To get our time and space costs down, we took a small hit on accuracy—we might get a small number of false positives. We're okay with that since we'll double-check before actually deleting files.
    </p>
  </div>
</div>
</div>

    
</div>
<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
    <p class="aside ng-scope">
        <strong>No idea where to start?</strong> Try writing something that just walks through a file system and prints all the file names. If you're not sure how to do that, look it up! Or just <em>make it up</em>. Remember, even if you can’t implement <em>working code</em>, your interviewer will still want to see you <em>think through</em> the problem.
    </p>
    <p class="ng-scope">
      One <span concept="brute-force" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">brute force</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>brute force</strong> algorithm simply enumerates all possible answers to the question and checks them for correctness.
</p>

<p>
It's seldom the most efficient approach, but it can be helpful to consider the time cost of the brute force approach when building an optimized solution. If your solution isn't faster than the brute force approach, it may not be optimal.
</p>
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> solution is to loop over all files in the file system,
      and for each file look at every <em>other</em> file to see if it's a duplicate. This means <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span> file comparisons, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of files. That seems like a lot.
    </p>
    <p class="ng-scope">
        Let's try to save some time. Can we do this in <em>one</em> walk through our file system?
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
      Instead of holding onto one file and looking for files that are the same, we can just keep track of <em>all</em> the files we've seen so far. What data structure could help us with that?
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
        We'll use <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-hash-table-concept"><span class="ng-scope">a </span><span concept="hash-map" class="ng-scope ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">dictionary</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>hash table</strong> (also called a <strong>hash</strong>, <strong>hash map</strong>, <strong>map</strong>, <strong>unordered map</strong> or <strong>dictionary</strong>) is a data structure that pairs keys to values.
</p>

<div code-block="concept__hash-map__hash-map" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">lightbulb_to_hours_of_light <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'incandescent'</span><span class="token punctuation">:</span> <span class="token number">1200</span><span class="token punctuation">,</span>
    <span class="token string">'compact fluorescent'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    <span class="token string">'LED'</span><span class="token punctuation">:</span> <span class="token number">50000</span>
<span class="token punctuation">}</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__javascript-object"></span>

<p>
Hash tables:
</p>
<ul>
<li>take <em>on average</em> <strong><span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time for insertions and lookups</strong>
</li>
<li>are <strong>unordered</strong> (the keys are not guaranteed to stay in the same order)</li>
<li>can use <strong>many types of objects as keys</strong> (<span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hash-map__commonly-strings"><span class="ng-scope">commonly strings</span></span>)</li>
</ul>

<p>
Hash tables can be thought of as arrays, if you think of array indices as keys!
</p>

<p>
In fact, hash tables are <em>built on</em> arrays. So if you ever want to use a hash table but know your keys will be sequential integers (like <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>1</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">1..100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span>), you can probably save time and space by just using an array instead.
</p>

<p>
<strong>Note:</strong> hash tables have an <strong>average case</strong> insertion and lookup cost of <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>. In industry, we often confuse the average-case cost with <em>worst case</em> cost, but they're not really the same. Because of hash collisions and rebalancing, a hash table insertion or lookup can cost as much as <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time in the worst case. But usually in industry we assume hashing and resizing algorithms are clever enough that collisions are rare and cheap.
</p>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__hash-map__javascript-object": {"default": "var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};"}, "concept__hash-map__hash-map": {"c": "// Assume we've implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key, int value);\n\nHashTable *lightbulbToHoursOfLight = hashTableNew();\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"incandescent\", 1200);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"compact fluorescent\", 10000);\nlightbulbToHoursOfLight = hashTableInsert(lightbulbToHoursOfLight, \"LED\", 50000);", "javascript": "var lightbulbToHoursOfLight = new Map();\n\nlightBulbToHoursOfLight.set('incandescent', 1200);\nlightbulbToHoursOfLight.set('compact fluorescent', 10000);\nlightbulbToHoursOfLight.set('LED', 50000);", "python": "lightbulb_to_hours_of_light = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000\n}", "ruby": "lightbulb_to_hours_of_light = {\n    'incandescent' => 1200,\n    'compact fluorescent' => 10000,\n    'LED' => 50000\n}", "cpp": "unordered_map&lt;string, int> lightbulbToHoursOfLight;\n\nlightbulbToHoursOfLight.insert(make_pair(\"incandescent\", 1200));\nlightbulbToHoursOfLight.insert(make_pair(\"compact fluorescent\", 10000));\nlightbulbToHoursOfLight.insert(make_pair(\"LED\", 50000));", "java": "Map&lt;String, Integer> lightbulbToHoursOfLight = new HashMap&lt;String, Integer>();\n\nlightbulbToHoursOfLight.put(\"incandescent\", 1200);\nlightbulbToHoursOfLight.put(\"compact fluorescent\", 10000);\nlightbulbToHoursOfLight.put(\"LED\", 50000);"}}, "words": {"concept__hash-map__commonly-strings": {"c": "commonly strings", "javascript": "JavaScript <em>object</em> keys are always <strong>strings</strong>", "python": "commonly strings", "default": "commonly strings", "ruby": "commonly strings", "cpp": "commonly strings", "java": "commonly strings"}, "concept__hash-map__javascript-object": {"c": "", "javascript": "<p>\n    In JavaScript, <strong>objects</strong> are also commonly used for storing key-value pairs:\n</p>\n\n<div code-block=\"javascript-object\" language=\"javascript\" translation-highlighting=\"static\">var lightbulbToHoursOfLight = {\n    'incandescent': 1200,\n    'compact fluorescent': 10000,\n    'LED': 50000,\n};</div>\n\n<p class=\"aside\">\n    <strong>How do you know when to use a map or object in JavaScript?</strong> Objects are used almost always, but maps might be helpful if your keys aren't strings or you need to iterate over your data. Maps aren't fully supported by all modern browsers yet.\n</p>", "python": "", "default": "", "ruby": "", "cpp": "", "java": ""}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span></span>. When we see a new file, we first check to see if it's in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__hash-table"><span class="ng-scope">dictionary</span></span>. If it's not, we add it. If it is, we have a duplicate!
    </p>
    <p class="ng-scope">
        Once we have two duplicate files, how do we know which one is the original? It's hard to be sure, but try to come up with a reasonable heuristic that will probably work most of the time.
    </p>
  </div>
</div>
  <div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
    <p class="ng-scope">
        Most file systems store the time a file was last edited as metadata on each file. The more recently edited file will <em>probably</em> be the duplicate!
    </p>

    <p class="ng-scope">
        One exception here: lots of processes like to regularly save their state to a file on disc, so that if your computer suddenly crashes the processes can pick up more or less where they left off (this is how Word is able to say "looks like you had unsaved changes last time, want to restore them?"). If your friend duplicated some of <em>those</em> files, the most-recently-edited one may <em>not</em> be the duplicate. But at the risk of breaking our system (we'll make a backup first, obvi.) we'll run with this "most-recently-edited copy of a file is probably the copy our friend made" heuristic.
    </p>

    <p class="ng-scope">
        So our function will walk through the file system, store files in <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-hash-table"><span class="ng-scope">a dictionary</span></span>, and identify the more recently edited file as the copied one when it finds a duplicate. Can you implement this in code?
    </p>
  </div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">Here's a start. We'll initialize:</p>

<ol class="ng-scope">
    <li>
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-hash-table-strong"><span class="ng-scope">a </span><strong class="ng-scope">dictionary</strong></span> to hold the files we've already seen</li>
    <li>a <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__stack-strong"><strong class="ng-scope">stack</strong><span class="ng-scope"> (we'll implement ours with </span><span class="ic-words ng-isolate-scope" ng-transclude="" words="a-standard-list"><span class="ng-scope">a list</span></span><span class="ng-scope">)</span></span> to hold directories and files as we go through them</li>
    <li>
<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-list-strong"><span class="ng-scope">a </span><strong class="ng-scope">list</strong></span> to hold our output <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__pair"><span class="ng-scope">tuple</span></span>s</li>
</ol>

<div code-block="question__find-duplicate-files__find-duplicate-files-iterative-start" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">find_duplicate_files_iterative</span><span class="token punctuation">(</span>starting_directory<span class="token punctuation">)</span><span class="token punctuation">:</span>
    files_seen_already <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span>starting_directory<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># we'll track tuples of (duplicate_file, original_file)</span>
    duplicates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">:</span>

        current_path <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
(We're going to make our function iterative instead of recursive to avoid <span concept="call-stack" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">stack overflow</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>call stack</strong> is what a program uses to keep track of what function it's currently running and what to do with that function's return value.
</p>

<p>
Whenever you call a function, a new <strong>frame</strong> gets pushed onto the call stack, which is popped off when the function returns. As functions call other functions, the stack gets taller. In recursive functions, the stack can get as tall as the number of times the function calls itself. This can cause a problem: the stack has a limited amount of space, and if it gets too big you can get a <strong>stack overflow</strong> error.
</p>

<!-- #illustrate -->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>.)
</p>
</div>
</div>

<!--
<div note>

<p>
Still stuck? Here are some things you'll need to be able to do:
</p>

<ul>
    <li>check if a current path leads to a directory</li>
    <li>list all the contents at a path</li>
    <li>get the last edited time of a file</li>
</ul>

<p>
In Python, you can do this with the <span var>os</span> package:
</p>

<div code-block>
import os

os.path.isdir(current_path)
os.listdir(current_path)
os.path.getmtime(current_path)
</div>

</div>
-->

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">

    <p class="ng-scope">Here's one solution:</p>

    <div code-block="question__find-duplicate-files__solution-without-hash" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">find_duplicate_files_iterative</span><span class="token punctuation">(</span>starting_directory<span class="token punctuation">)</span><span class="token punctuation">:</span>
    files_seen_already <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span>starting_directory<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># we'll track tuples of (duplicate_file, original_file)</span>
    duplicates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>

        current_path <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># if it's a directory,</span>
        <span class="token comment" spellcheck="true"># put the contents in our stack</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> path <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
                full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># if it's a file</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># get its contents</span>
            <span class="token keyword">with</span> open<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>
                file_contents <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># get its last edited time</span>
            current_last_edited_time <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if we've seen it before</span>
            <span class="token keyword">if</span> file_contents <span class="token keyword">in</span> files_seen_already<span class="token punctuation">:</span>

                existing_last_edited_time<span class="token punctuation">,</span> existing_path <span class="token operator">=</span> files_seen_already<span class="token punctuation">[</span>file_contents<span class="token punctuation">]</span>

                <span class="token keyword">if</span> current_last_edited_time <span class="token operator">&gt;</span> existing_last_edited_time<span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># current file is the dupe!</span>
                    duplicates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>current_path<span class="token punctuation">,</span> existing_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># old file is the dupe!</span>
                    <span class="token comment" spellcheck="true"># so delete it</span>
                    duplicates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>existing_path<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

                    <span class="token comment" spellcheck="true"># but also update files_seen_already to have the new file's info</span>
                    files_seen_already<span class="token punctuation">[</span>file_contents<span class="token punctuation">]</span> <span class="token operator">=</span> \
                        <span class="token punctuation">(</span>current_last_edited_time<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if it's a new file, throw it in files_seen_already</span>
            <span class="token comment" spellcheck="true"># and record the path and the last edited time,</span>
            <span class="token comment" spellcheck="true"># so we can delete it later if it's a dupe</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                files_seen_already<span class="token punctuation">[</span>file_contents<span class="token punctuation">]</span> <span class="token operator">=</span> \
                    <span class="token punctuation">(</span>current_last_edited_time<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span>

    <span class="token keyword">return</span> duplicates</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

    <p class="ng-scope">
        Okay, this'll work! What are our time and space costs?
    </p>

</div>
</div>



<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
    We're putting the full contents of every file in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__hash-table"><span class="ng-scope">dictionary</span></span>! This costs <span complexity="b" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">b</span><span class="mclose">)</span></span></span></span></span></span></span> time and space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span></span> is the <em>total amount of space taken up by all the files on the file system</em>.
</p>

<p class="ng-scope">
    That space cost is pretty unwieldy—we need to store a duplicate copy of our entire filsystem (like, several gigabytes of cat videos alone) in working memory!
</p>

<p class="ng-scope">
    Can we trim that space cost down? What if we're okay with losing a bit of accuracy (as in, we do a more "fuzzy" match to see if two files are the same)?
</p>

</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="8" type="hint">
    <div class="note-content" ng-transclude="">

<p class="ng-scope">
    What if instead of making our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__hash-table"><span class="ng-scope">dictionary</span></span> keys <em>the entire file contents</em>, we <span concept="hashing" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">hashed</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
A <strong>hash function</strong> takes data (like a string, or a file’s contents) and outputs a <em>hash</em>, a fixed-size string or number.
</p>

<p>
For example, here’s the MD5 hash (MD5 is a common hash function) for a file simply containing “cake”:
</p>

<div code-block="concept__hashing__cake-hash" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">DF7CE038E2FA96EDF39206F898DF134D</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
And here’s the hash for the same file after it was edited to be “cakes”:
</p>

<div code-block="concept__hashing__cakes-hash" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">0E9091167610558FDAE6F69BD6716771</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
Notice the hash is <em>completely</em> different, even though the files were similar. Here's the hash for a long film I have on my hard drive:
</p>

<div code-block="concept__hashing__film-hash" language="none" translation-highlighting="static" class="ng-isolate-scope"><pre class=" language-none">  <code class=" language-none" ng-transclude="">664f67364296d08f31aec6fea4e9b83f</code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
The hash is the same length as my other hashes, but this time it represents a much bigger file—461Mb.
</p>

<p>
We can think of a hash as a "fingerprint." We can trust that a given file will always have the same hash, but we can't go from the hash back to the original file. Sometimes we have to worry about multiple files having the same hash value, which is called a <strong>hash collision</strong>.
</p>

<p>
Some uses for hashing:
</p>
<ol>
<li>
<strong><span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hashing__hash-tables-capitalized"><span class="ng-scope">Dictionaries</span></span></strong>. Suppose we want <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hashing__a-standard-list"><span class="ng-scope">a list</span></span>-like data structure with constant-time lookups, but we want to look up values based on arbitrary "keys," not just sequential "indices." We could allocate <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hashing__a-standard-list"><span class="ng-scope">a list</span></span>, and use a hash function to translate keys into <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hashing__standard-list"><span class="ng-scope">list</span></span> indices. That's the basic idea behind <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__hashing__a-hash-table"><span class="ng-scope">a dictionary</span></span>!
</li>
<li>
<strong>Preventing man-in-the-middle attacks</strong>. Ever notice those things that say "hash" or "md5" or "sha1" on download sites? The site is telling you, "We hashed this file on our end and got this result. When you finish the download, try hashing the file and confirming you get the same result. If not, your internet service provider or someone else might have injected malware or tracking software into your download!"
</li>
</ol>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"concept__hashing__film-hash": {"default": "664f67364296d08f31aec6fea4e9b83f"}, "concept__hashing__cakes-hash": {"default": "0E9091167610558FDAE6F69BD6716771"}, "concept__hashing__cake-hash": {"default": "DF7CE038E2FA96EDF39206F898DF134D"}}, "words": {"concept__hashing__a-hash-table": {"cpp": "an unordered map", "objectivec": "a dictionary", "c": "a hash table", "php": "an array", "java": "a hash map", "csharp": "a dictionary", "python": "a dictionary", "swift": "a dictionary", "javascript": "an object", "ruby": "a hash"}, "concept__hashing__a-standard-list": {"javascript": "an array", "java": "an array", "php": "an array", "swift": "an array", "cpp": "a vector", "csharp": "a list", "objectivec": "an array", "ruby": "an array", "default": "a list", "c": "an array", "python": "a list"}, "concept__hashing__hash-tables-capitalized": {"javascript": "Objects", "java": "Hash maps", "cpp": "Unordered maps", "c": "Hash tables", "ruby": "Hashes", "python": "Dictionaries"}, "concept__hashing__standard-list": {"javascript": "array", "java": "array", "php": "array", "swift": "array", "cpp": "vector", "csharp": "list", "objectivec": "array", "ruby": "array", "default": "list", "c": "array", "python": "list"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span> those contents first? So we'd store a constant-size "fingerprint" of the file in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__hash-table"><span class="ng-scope">dictionary</span></span>, instead of the whole file itself. This would give us <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> space per file (<span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space overall, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of files)!
</p>

<p class="ng-scope">
That's a huge improvement. But we can take this a step further! While we're making the file matching "fuzzy," can we use a similar idea to save some <em>time</em>? Notice that our time cost is still order of the total <em>size</em> of our files on disc, while our space cost is order of the <em>number</em> of files.
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="9" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
For each file, we have to look at every bit that the file occupies in order to hash it and take a "fingerprint." That's why our time cost is high. Can we fingerprint a file in <em>constant</em> time instead?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="10" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    What if instead of hashing the <em>whole</em> contents of each file, we hashed three fixed-size "samples" from each file made of the first <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> bytes, the middle <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> bytes, and the last <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> bytes? This would let us fingerprint a file in constant time!
</p>

<p class="ng-scope">
How big should we make our samples?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="11" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
When your disc does a read, it grabs contents in constant-size chunks, called "blocks."
</p>

<p class="ng-scope">
How big are the blocks? It depends on the file system. My super-hip Macintosh uses a file system called HFS+, which has a default block size of 4Kb (4,000 bytes) per block.
</p>

<p class="ng-scope">
So we could use just 100 bytes each from the beginning middle and end of our files, but each time we grabbed those bytes, our disc would actually be grabbing 4000 bytes, not just 100 bytes. We'd just be throwing the rest away. We might as well use all of them, since having a bigger picture of the file helps us ensure that the fingerprints are unique. So our samples should be the the size of our file system's block size.
</p>

</div>
</div>



</div>

    
</div>





<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">

<p class="ng-scope">
We walk through our whole file system iteratively. As we go, we take a "fingerprint" of each file in constant time by hashing the first few, middle few, and last few bytes. We store each file's fingerprint in <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__a-hash-table-em"><span class="ng-scope">a </span><em class="ng-scope">dictionary</em></span> as we go.
</p>

<p class="ng-scope">
If a given file's fingerprint is already in our <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__hash-table"><span class="ng-scope">dictionary</span></span>, we assume we have a duplicate. In that case, we assume the file edited most recently is the one created by our friend.
</p>


<div code-block="question__find-duplicate-files__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">import</span> os
<span class="token keyword">import</span> hashlib

<span class="token keyword">def</span> <span class="token function">find_duplicate_files</span><span class="token punctuation">(</span>starting_directory<span class="token punctuation">)</span><span class="token punctuation">:</span>
    files_seen_already <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span>starting_directory<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># we'll track tuples of (duplicate_file, original_file)</span>
    duplicates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">:</span>

        current_path <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># if it's a directory,</span>
        <span class="token comment" spellcheck="true"># put the contents in our stack</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> path <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
                full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># if it's a file</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>

            <span class="token comment" spellcheck="true"># get its hash</span>
            file_hash <span class="token operator">=</span> sample_hash_file<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># get its last edited time</span>
            current_last_edited_time <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>current_path<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if we've seen it before</span>
            <span class="token keyword">if</span> file_hash <span class="token keyword">in</span> files_seen_already<span class="token punctuation">:</span>

                existing_last_edited_time<span class="token punctuation">,</span> existing_path <span class="token operator">=</span> files_seen_already<span class="token punctuation">[</span>file_hash<span class="token punctuation">]</span>

                <span class="token keyword">if</span> current_last_edited_time <span class="token operator">&gt;</span> existing_last_edited_time<span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># current file is the dupe!</span>
                    duplicates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>current_path<span class="token punctuation">,</span> existing_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># old file is the dupe!</span>
                    duplicates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>existing_path<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

                    <span class="token comment" spellcheck="true"># but also update files_seen_already to have the new file's info</span>
                    files_seen_already<span class="token punctuation">[</span>file_hash<span class="token punctuation">]</span> <span class="token operator">=</span> \
                        <span class="token punctuation">(</span>current_last_edited_time<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># if it's a new file, throw it in files_seen_already</span>
            <span class="token comment" spellcheck="true"># and record its path and last edited time,</span>
            <span class="token comment" spellcheck="true"># so we can tell later if it's a dupe</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                files_seen_already<span class="token punctuation">[</span>file_hash<span class="token punctuation">]</span> <span class="token operator">=</span> \
                    <span class="token punctuation">(</span>current_last_edited_time<span class="token punctuation">,</span> current_path<span class="token punctuation">)</span>

    <span class="token keyword">return</span> duplicates


<span class="token keyword">def</span> <span class="token function">sample_hash_file</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>

    num_bytes_to_read_per_sample <span class="token operator">=</span> <span class="token number">4000</span>
    total_bytes <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>path<span class="token punctuation">)</span>

    hasher <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha512<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># if the file is too short to take 3 samples, hash the entire file</span>
        <span class="token keyword">if</span> total_bytes <span class="token operator">&lt;</span> num_bytes_to_read_per_sample <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">:</span>
            hasher<span class="token punctuation">.</span>update<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">else</span><span class="token punctuation">:</span>
            num_bytes_between_samples <span class="token operator">=</span> <span class="token punctuation">(</span>total_bytes <span class="token operator">-</span> num_bytes_to_read_per_sample <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>

            <span class="token comment" spellcheck="true"># read first, middle, and last bytes</span>
            <span class="token keyword">for</span> offset_multiplier <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                start_of_sample <span class="token operator">=</span> offset_multiplier <span class="token operator">*</span> <span class="token punctuation">(</span>num_bytes_to_read_per_sample <span class="token operator">+</span> num_bytes_between_samples<span class="token punctuation">)</span>
                file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>start_of_sample<span class="token punctuation">)</span>
                sample <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span>num_bytes_to_read_per_sample<span class="token punctuation">)</span>
                hasher<span class="token punctuation">.</span>update<span class="token punctuation">(</span>sample<span class="token punctuation">)</span>

    <span class="token keyword">return</span> hasher<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>



<p class="ng-scope">
We've made a few assumptions here:
</p>

<p class="ng-scope">
    <strong>Two <em>different</em> files won't have the same fingerprints</strong>. It's not impossible that two files with different contents will have the same beginning, middle, and end bytes so they'll have the same fingerprints. Or they may even have different sample bytes but still hash to the same value (this is called a "hash collision"). To mitigate this, we could do a last-minute check whenever we find two "matching" files where we actually scan the full file contents to see if they're the same.
</p>

<p class="ng-scope">
    <strong>The <em>most recently edited</em> file is the duplicate</strong>. This seems reasonable, but it <em>might</em> be wrong—for example, there might be files which have been edited by daemons (programs that run in the background) <em>after</em> our friend finished duplicating them.
</p>

<p class="ng-scope">
    <strong>Two files with the same contents are the same file</strong>. This seems trivially true, but it could cause some problems. For example, we might have empty files in multiple places in our file system that aren't duplicates of each-other.
</p>


<p class="ng-scope">
    Given these potential issues, we definitely want a human to confirm before we delete any files. Still, it's much better than combing through our whole file system by hand!
</p>

<h4 class="ng-scope">
Some ideas for further improvements:
</h4>

<ol class="ng-scope">
<li>
If a file wasn't last edited around the time your friend got a hold of your computer, you know it probably wasn't created by your friend. Similarly, if a file wasn't <em>accessed</em> (sometimes your filesystem stores the last accessed time for a file as well) around that time, you know it wasn't copied by your friend. You can use these facts to skip some files.
</li>
<li>
Make the file <em>size</em> the fingerprint—it should be available cheaply as metadata on the file (so you don't need to walk through the whole file to see how long it is). You'll get lots of false positives, but that's fine if you treat this as a "pre-processing" step. Maybe you <em>then</em> take hash-based fingerprints only on the files which which have matching sizes. <em>Then</em> you fully compare file contents if they have the same hash.
</li>
<li>
Some file systems also keep track of when a file was <em>created</em>. If your filesystem supports this, you could use this as a potentially-stronger heuristic for telling which of two copies of a file is the dupe.
</li>
<!--
<li>
Some file systems keep track of a hash of each file, so you could just use that and save some time.
</li>
-->
<li>
When you <em>do</em> compare full file contents to ensure two files are the same, no need to read the entire files into memory. Open both files and read them one block at a time. You can short-circuit as soon as you find two blocks that don't match, and you only ever need to store a couple blocks in memory.
</li>
</ol>


</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
    <p class="ng-scope">
        Each "fingerprint" takes <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> time and space, so our total time and space costs are <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the <em>number of files</em> on the file system.
    </p>
    <p class="ng-scope">
        If we add the last-minute check to see if two files with the same fingerprints are <em>actually</em> the same files (which we probably should), then in the worst case <em>all the files are the same</em> and we have to read their full contents to confirm this, giving us a runtime that's order of the total size of our files on disc.
    </p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
    <p class="ng-scope">
        If we wanted to get this code ready for a production system, we might want to make it a bit more modular. Try separating the file traversal code from the duplicate detection code. <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__find-duplicate-files__use-generator"><span class="ng-scope">Try implementing the file traversal with a generator!</span></span>
    </p>
    <p class="ng-scope">
        What about concurrency? Can we go faster by splitting this procedure into multiple threads? Also, what if a background process edits a file <em>while our script is running</em>? Will this cause problems?
    </p>
    <p class="ng-scope">
        What about link files (files that point to other files or folders)? One gotcha here is that a link file can point <em>back up the file tree</em>. How do we keep our file traversal from going in circles?
    </p>
</div>

    
</div>




<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
The main insight was to save time and space by "fingerprinting" each file.
</p>

<p class="ng-scope">
This question is a good example of a "messy" interview problem. Instead of one optimal solution, there's a big knot of optimizations and trade-offs. For example, our hashing-based method wins us a faster runtime but it can give us false positives.
</p>

<p class="ng-scope">
For messy problems like this, focus on clearly explaining to your interviewer what the trade-offs are for each decision you make. The actual choices you make probably don't matter that much, as long as you show a strong ability to understand and compare your options.
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-blocks": {"question__find-duplicate-files__solution-without-hash": {"javascript": "const fs = require('fs');\n\nfunction findDuplicateFilesIterative(startingDirectory) {\n    var filesSeenAlready = {};\n    var stack = [startingDirectory];\n\n    var duplicates = [];\n\n    while (stack.length) {\n\n        var currentPath = stack.pop();\n        var currentFile = fs.statSync(currentPath);\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (currentFile.isDirectory()) {\n            fs.readdirSync(currentPath).forEach(function(path) {\n                stack.push(currentPath + '/' + path);\n            });\n\n        // if it's a file\n        } else {\n\n            // get its contents\n            var fileContents = fs.readFileSync(currentPath);\n\n            // get its last edited time\n            var currentLastEditedTime = currentFile.mtime;\n\n            // if we've seen it before\n            if (filesSeenAlready.hasOwnProperty(fileContents)) {\n\n                var existingFile = filesSeenAlready[fileContents];\n\n                if (currentLastEditedTime > existingFile.lastEditedTime) {\n\n                    // current file is the dupe!\n                    duplicates.push([currentPath, existingFile.path]);\n\n                } else {\n\n                    // old file is the dupe!\n                    duplicates.push([existingFile.path, currentPath]);\n\n                    // but also update filesSeenAlready to have the new file's info\n                    filesSeenAlready[fileContents] = {lastEditedTime: currentLastEditedTime, path: currentPath};\n                }\n\n            // if it's a new file, throw it in filesSeenAlready\n            // and record its path and last edited time,\n            // so we can tell later if it's a dupe\n            } else {\n                filesSeenAlready[fileContents] = {lastEditedTime: currentLastEditedTime, path: currentPath};\n            }\n        }\n    }\n\n    return duplicates;\n}", "python": "import os\n\ndef find_duplicate_files_iterative(starting_directory):\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    # we'll track tuples of (duplicate_file, original_file)\n    duplicates = []\n\n    while len(stack) > 0:\n\n        current_path = stack.pop()\n\n        # if it's a directory,\n        # put the contents in our stack\n        if os.path.isdir(current_path):\n            for path in os.listdir(current_path):\n                full_path = os.path.join(current_path, path)\n                stack.append(full_path)\n\n        # if it's a file\n        else:\n\n            # get its contents\n            with open(current_path) as file:\n                file_contents = file.read()\n\n            # get its last edited time\n            current_last_edited_time = os.path.getmtime(current_path)\n\n            # if we've seen it before\n            if file_contents in files_seen_already:\n\n                existing_last_edited_time, existing_path = files_seen_already[file_contents]\n\n                if current_last_edited_time > existing_last_edited_time:\n                    # current file is the dupe!\n                    duplicates.append((current_path, existing_path))\n\n                else:\n                    # old file is the dupe!\n                    # so delete it\n                    duplicates.append((existing_path, current_path))\n\n                    # but also update files_seen_already to have the new file's info\n                    files_seen_already[file_contents] = \\\n                        (current_last_edited_time, current_path)\n\n            # if it's a new file, throw it in files_seen_already\n            # and record the path and the last edited time,\n            # so we can delete it later if it's a dupe\n            else:\n                files_seen_already[file_contents] = \\\n                    (current_last_edited_time, current_path)\n\n    return duplicates", "ruby": "def find_duplicate_files_iterative(starting_directory)\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    duplicates = []\n\n    while stack.length > 0\n\n        current_path = stack.pop()\n\n        # if it's a directory,\n        # put the contents in our stack\n        if File::directory? current_path\n            Dir.foreach(current_path) do |path|\n                next if path == '.' || path == '..'\n                full_path = File.join(current_path, path)\n                stack.push(full_path)\n            end\n\n        # if it's a file\n        else\n\n            # get its contents\n            file_contents = ''\n            File.open(current_path, 'r') do |file|\n                file_contents = File.read(file)\n            end\n\n            # get its last edited time\n            current_last_edited_time = File::mtime(current_path)\n\n            # if we've seen it before\n            if files_seen_already.include? file_contents\n\n                existing_last_edited_time, existing_path = files_seen_already[file_contents]\n\n                if current_last_edited_time > existing_last_edited_time\n\n                    # current file is the dupe!\n                    duplicates.push([current_path, existing_path])\n\n                else\n\n                    # old file is the dupe!\n                    duplicates.push([existing_path, current_path])\n\n                    # but also update files_seen_already to have the new file's info\n                    files_seen_already[file_contents] = \\\n                        [current_last_edited_time, current_path]\n                end\n\n            # if it's a new file, throw it in files_seen_already\n            # and record the path and the last edited time,\n            # so we can delete it later if it's a dupe\n            else\n                files_seen_already[file_contents] = \\\n                    [current_last_edited_time, current_path]\n            end\n        end\n    end\n\n    return duplicates\nend", "c": "#include &lt;sys/types.h>\n#include &lt;sys/stat.h>\n#include &lt;unistd.h>\n#include &lt;dirent.h>\n#include &lt;fcntl.h>\n#include &lt;stdlib.h>\n#include &lt;string.h>\n#include &lt;stdio.h>\n#include &lt;assert.h>\n\n// Assume we've already implemented a stack\nStack * stackNew(void);\nvoid stackFree(Stack *stack);\nint stackEmpty(Stack *stack);\nStack * stackPush_str(Stack *stack, const char *value);\nStack * stackPop(Stack *stack);\nvoid * stackPeek(Stack *stack);\n\n// Assume we've already implemented a linked list\nLinkedList * newLinkedList(void);\nvoid linkedListFreeWithDestructor(LinkedList *list, void (*freeData)(void*));\nvoid linkedListAppend(LinkedList *list, const void *data, size_t size);\n\n// Assume we've already implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key,\n                           void *value, size_t valueSize);\nvoid *hashTableFind(HashTable *hashTable, const char *key);\nvoid hashTableFreeWithDestructor(HashTable *hashTable, void (*freeValue)(void*));\n\n\ntypedef struct FilePaths {\n    char *duplicatePath;\n    char *originalPath;\n} FilePaths;\n\nFilePaths * filePathsNew(const char* duplicatePath, const char* originalPath) {\n    FilePaths *filePaths = malloc(sizeof(FilePaths));\n    assert(filePaths != NULL);\n    filePaths->duplicatePath = strdup(duplicatePath);\n    assert(filePaths->duplicatePath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    assert(filePaths->originalPath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    return filePaths;\n}\n\nvoid filePathsFree(void *filePaths) {\n    FilePaths *fp = filePaths;\n    free(fp->duplicatePath);\n    free(fp->originalPath);\n    free(fp);\n}\n\nvoid filePathsPrint(const FilePaths filePaths) {\n    printf(\"(original: %s, duplicate: %s)\",\n           filePaths.originalPath,\n           filePaths.duplicatePath);\n}\n\n\ntypedef struct FileInfo {\n    char *path;\n    time_t lastModified;\n} FileInfo;\n\nFileInfo * fileInfoNew(const char *path, time_t lastModified) {\n    FileInfo *fileInfo = malloc(sizeof(FileInfo));\n    assert(fileInfo != NULL);\n    fileInfo->path = strdup(path);\n    assert(fileInfo->path != NULL);\n    fileInfo->lastModified = lastModified;\n    return fileInfo;\n}\n\nvoid fileInfoFree(void *fileInfo) {\n    FileInfo *fi = fileInfo;\n    free(fi->path);\n    free(fi);\n}\n\nchar * joinPaths(const char *dirname, const char *basename) {\n    size_t dirnameLength = strlen(dirname);\n    size_t basenameLength = strlen(basename);\n    size_t fullPathLength = dirnameLength + basenameLength + 1;\n    char *fullPath = malloc(fullPathLength + 1);\n    assert(fullPath != NULL);\n    strncpy(fullPath, dirname, dirnameLength + 1);\n    strncat(fullPath, \"/\", 2);\n    strncat(fullPath, basename, basenameLength + 1);\n    fullPath[fullPathLength] = '\\0';\n    return fullPath;\n}\n\nvoid scanDirectory(const char *directoryPath, Stack **pathsStack) {\n    struct dirent *entry;\n    DIR *dir = opendir(directoryPath);\n\n    if (dir == NULL) {\n        return;\n    }\n\n    while ((entry = readdir(dir)) != NULL) {\n        if (strcmp(entry->d_name, \".\") == 0 || strcmp(entry->d_name, \"..\") == 0) {\n            continue;\n        }\n        char *path = joinPaths(directoryPath, entry->d_name);\n        *pathsStack = stackPush_str(*pathsStack, path);\n        free(path);\n    }\n    closedir(dir);\n}\n\nchar * readFile(const char* path, size_t sizeHint) {\n    // try to read file contents\n    int fileContentsRetrieved = 0;\n    char *fileContents = malloc(sizeHint + 1);\n    assert(fileContents != NULL);\n    int fd = open(path, O_RDONLY);\n    if (fd != -1) {\n        ssize_t actuallyRead = read(fd, fileContents, sizeHint);\n        if (actuallyRead == sizeHint) {\n            fileContentsRetrieved = 1;\n        }\n        else {\n            fprintf(stderr, \"Error: Couldn't read file '%s'.\\n\", path);\n        }\n        close(fd);\n    }\n    else {\n        fprintf(stderr, \"Error: Couldn't read file '%s' for reading.\\n\", path);\n    }\n    // we'll return a NULL pointer to indicate a problem reading the file\n    if (!fileContentsRetrieved) {\n        free(fileContents);\n        fileContents = NULL;\n    }\n    fileContents[sizeHint] = '\\0';\n    return fileContents;\n}\n\nLinkedList * findDuplicateFilesIterative(const char *startingDirectory) {\n    HashTable *filesSeenAlready = hashTableNew();\n    Stack *pathsStack = stackNew();\n    LinkedList *duplicates = newLinkedList();\n\n    pathsStack = stackPush_str(pathsStack, startingDirectory);\n\n    while (!stackEmpty(pathsStack)) {\n        struct stat st;\n        char *currentPath = strdup(stackPeek(pathsStack));\n        assert(currentPath != NULL);\n        pathsStack = stackPop(pathsStack);\n\n        if (stat(currentPath, &st) &lt; 0) {\n            fprintf(stderr, \"Error: Can't stat file '%s'.\\n\", currentPath);\n            free(currentPath);\n            continue;\n        }\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (S_ISDIR(st.st_mode)) {\n            scanDirectory(currentPath, &pathsStack);\n        }\n        // if it's a file\n        else if (S_ISREG(st.st_mode)) {\n            // get its contents\n            unsigned char *fileContents = readFile(currentPath, st.st_size);\n\n            // if we've seen it before\n            if (fileContents != NULL && fileContents[0] != '\\0') {\n                FileInfo *fileInfo = hashTableFind(filesSeenAlready, fileContents);\n                if (fileInfo != NULL) {\n                    // compare with its last edited time\n                    if (st.st_mtime > fileInfo->lastModified) {\n                        // current file is the dupe!\n                        FilePaths filePaths = filePathsNew(currentPath, fileInfo->path);\n                        linkedListAppend(duplicates, &filePaths, sizeof(filePaths));\n                    }\n                    else {\n                        // old file is the dupe!\n                        FilePaths filePaths = filePathsNew(fileInfo->path, currentPath);\n                        linkedListAppend(duplicates, &filePaths, sizeof(filePaths));\n\n                        // but also update filesSeenAlready to have the new file's info\n                        free(fileInfo->path);\n                        fileInfo->path = strdup(currentPath);\n                        assert(fileInfo->path != NULL);\n                        fileInfo->lastModified = st.st_mtime;\n                    }\n\n                }\n                // if it's a new file, throw it in filesSeenAlready\n                // and record its path and last edited time,\n                // so we can tell later if it's a dupe\n                else {\n                    FileInfo *fileInfo = fileInfoNew(currentPath, st.st_mtime);\n                    filesSeenAlready = hashTableInsert(filesSeenAlready,\n                                                       fileContents,\n                                                       fileInfo,\n                                                       sizeof(FileInfo));\n                    free(fileInfo);  // but not fileInfoFree(fileInfo) since\n                                     // filesSeenAlready now references its data\n                }\n                free(fileContents);\n            }\n        }\n        free(currentPath);\n    }\n    hashTableFreeWithDestructor(filesSeenAlready, fileInfoFree);\n    stackFree(pathsStack);\n    return duplicates;\n}", "java": "public List&lt;FilePaths> findDuplicateFilesIterative(Path startingDirectory) {\n    Map&lt;String, FileInfo> filesSeenAlready = new HashMap&lt;String, FileInfo>();\n    Stack&lt;Path> stack = new Stack&lt;Path>();\n    stack.push(startingDirectory);\n\n    List&lt;FilePaths> duplicates = new ArrayList&lt;FilePaths>();\n\n    while (!stack.empty()) {\n\n        Path currentPath = stack.pop();\n        File currentFile = new File(currentPath.toString());\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (currentFile.isDirectory()) {\n            for (File file : currentFile.listFiles()) {\n                stack.add(file.toPath());\n            }\n\n        // if it's a file\n        } else {\n\n            // get its contents\n            String fileContents = null;\n            try {\n                byte[] encodedFile = Files.readAllBytes(currentPath);\n                fileContents = new String(encodedFile, \"UTF-8\");\n            } catch (IOException e) {\n                System.out.println(e);\n            }\n\n            // get its last edited time\n            long currentLastEditedTime = currentFile.lastModified();\n\n            // if we've seen it before\n            if (filesSeenAlready.containsKey(fileContents)) {\n\n                FileInfo existingFileInfo = filesSeenAlready.get(fileContents);\n\n                if (currentLastEditedTime > existingFileInfo.timeLastEdited) {\n\n                    // current file is the dupe!\n                    duplicates.add(new FilePaths(currentPath, existingFileInfo.path));\n\n                } else {\n\n                    // old file is the dupe!\n                    duplicates.add(new FilePaths(existingFileInfo.path, currentPath));\n\n                    // but also update filesSeenAlready to have the new file's info\n                    filesSeenAlready.put(fileContents, new FileInfo(currentLastEditedTime, currentPath));\n                }\n\n            // if it's a new file, throw it in filesSeenAlready\n            // and record its path and last edited time,\n            // so we can tell later if it's a dupe\n            } else {\n                filesSeenAlready.put(fileContents, new FileInfo(currentLastEditedTime, currentPath));\n            }\n        }\n    }\n\n    return duplicates;\n}", "cpp": "#include &lt;sys/types.h>\n#include &lt;sys/stat.h>\n#include &lt;unistd.h>\n#include &lt;dirent.h>\n#include &lt;fcntl.h>\n\nclass FilePaths\n{\npublic:\n    string duplicatePath_;\n    string originalPath_;\n\n    FilePaths(const string& duplicatePath = string(), const string& originalPath = string()) :\n        duplicatePath_(duplicatePath),\n        originalPath_(originalPath)\n    {\n    }\n\n    string toString() const {\n        ostringstream str;\n        str  &lt;&lt; \"(original: \" &lt;&lt; filePaths.originalPath_\n            &lt;&lt; \", duplicate: \" &lt;&lt; filePaths.duplicatePath_ &lt;&lt; \")\";\n        return str.str();\n    }\n};\n\nclass FileInfo\n{\npublic:\n    string path_;\n    time_t lastModified_;\n\n    FileInfo(const string& path, time_t lastModified) :\n        path_(path),\n        lastModified_(lastModified)\n    {\n    }\n};\n\nvoid scanDirectory(const string& directoryPath, stack&lt;string>& pathsStack)\n{\n    DIR* dir = opendir(directoryPath.c_str());\n    if (dir) {\n        struct dirent* entry;\n        while ((entry = readdir(dir)) != NULL) {\n            if (strcmp(entry->d_name, \".\") != 0 && strcmp(entry->d_name, \"..\") != 0) {\n                string path = directoryPath + '/' + entry->d_name;\n                pathsStack.push(path);\n            }\n        }\n        closedir(dir);\n    }\n}\n\nvector&lt;unsigned char> readFile(const string& path, size_t sizeHint)\n{\n    // try to read file contents\n    bool fileContentsRetrieved = false;\n    vector&lt;unsigned char> fileContents(sizeHint);\n    int fd = open(path.c_str(), O_RDONLY);\n    if (fd != -1) {\n        ssize_t actuallyRead = read(fd, static_cast&lt;void*>(&fileContents[0]), fileContents.size());\n        if (actuallyRead == fileContents.size()) {\n            fileContentsRetrieved = true;\n        } else {\n            cerr &lt;&lt; \"Error: Couldn't read file '\" &lt;&lt; currentPath &lt;&lt; \"'.\" &lt;&lt; endl;\n        }\n        close(fd);\n    } else {\n        cerr &lt;&lt; \"Error: Couldn't open file '\" &lt;&lt; currentPath &lt;&lt; \"' for reading.\" &lt;&lt; endl;\n    }\n\n    // we'll return an empty vector to indicate a problem reading the file\n    if (!fileContentsRetrieved) {\n        fileContents.clear();\n    }\n\n    return fileContents;\n}\n\nvector&lt;FilePaths> findDuplicateFilesIterative(const string& startingDirectory)\n{\n    map&lt;vector&lt;unsigned char>, FileInfo> filesSeenAlready;\n    stack&lt;string> pathsStack;\n    pathsStack.push(startingDirectory);\n\n    vector&lt;FilePaths> duplicates;\n\n    while (!pathsStack.empty()) {\n\n        string currentPath = pathsStack.top();\n        pathsStack.pop();\n\n        struct stat st;\n        if(stat(currentPath.c_str(), &st) &lt; 0) {\n            cerr &lt;&lt; \"Error: Can't stat file '\" &lt;&lt; currentPath &lt;&lt; \"'.\" &lt;&lt; endl;\n            continue;\n        }\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (S_ISDIR(st.st_mode)) {\n\n            scanDirectory(currentPath, pathsStack);\n\n        // if it's a file\n        } else if (S_ISREG(st.st_mode)) {\n\n            // get its contents\n            vector&lt;unsigned char> fileContents = readFile(currentPath, st.st_size);\n\n            // if we've seen it before\n            if (!fileContents.empty()) {\n                auto it = filesSeenAlready.find(fileContents);\n                if(it != filesSeenAlready.end()) {\n                    // compare with its last edited time\n                    if (st.st_mtime > it->second.lastModified_) {\n\n                        // current file is the dupe!\n                        duplicates.emplace(duplicates.end(), currentPath, it->second.path_);\n\n                    } else {\n\n                        // old file is the dupe!\n                        duplicates.emplace(duplicates.end(), it->second.path_, currentPath);\n\n                        // but also update filesSeenAlready to have the new file's info\n                        it->second.path_ = currentPath;\n                        it->second.lastModified_ = st.st_mtime;\n                    }\n\n                // if it's a new file, throw it in filesSeenAlready\n                // and record its path and last edited time,\n                // so we can tell later if it's a dupe\n                } else {\n                    filesSeenAlready.insert(make_pair(fileContents, FileInfo(currentPath, st.st_mtime)));\n                }\n            }\n        }\n    }\n\n    return duplicates;\n}"}, "question__find-duplicate-files__find-duplicate-files-iterative-start": {"javascript": "function findDuplicateFiles(startingDirectory) {\n    var filesSeenAlready = {};\n    var stack = [startingDirectory];\n\n    var duplicates = [];\n\n    while (stack.length) {\n\n        var currentPath = stack.pop();\n\n    }\n}", "python": "def find_duplicate_files_iterative(starting_directory):\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    # we'll track tuples of (duplicate_file, original_file)\n    duplicates = []\n\n    while len(stack):\n\n        current_path = stack.pop()", "ruby": "def find_duplicate_files_iterative(starting_directory)\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    duplicates = []\n\n    while stack.length > 0\n\n        current_path = stack.pop()\n\n    end\nend", "c": "// Assume we've already implemented a stack\nStack * stackNew(void);\nvoid stackFree(Stack *stack);\nint stackEmpty(Stack *stack);\nStack * stackPush_str(Stack *stack, const char *value);\nStack * stackPop(Stack *stack);\nvoid * stackPeek(Stack *stack);\n\n// Assume we've already implemented a linked list\nLinkedList * newLinkedList(void);\nvoid linkedListFreeWithDestructor(LinkedList *list, void (*freeData)(void*));\nvoid linkedListAppend(LinkedList *list, const void *data, size_t size);\n\n// Assume we've already implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key,\n                           void *value, size_t valueSize);\nvoid *hashTableFind(HashTable *hashTable, const char *key);\nvoid hashTableFreeWithDestructor(HashTable *hashTable, void (*freeValue)(void*));\n\n\nLinkedList * findDuplicateFiles(const char *startingDirectory) {\n    HashTable *filesSeenAlready = hashTableNew();\n    Stack *pathsStack = stackNew();\n    LinkedList *duplicates = newLinkedList();\n\n    pathsStack = stackPush_str(pathsStack, startingDirectory);\n\n    while (!stackEmpty(pathsStack)) {\n\n        char *currentPath = strdup(stackPeek(pathsStack));\n        assert(currentPath != NULL);\n        pathsStack = stackPop(pathsStack);\n\n    }\n}", "java": "public List&lt;FilePaths> findDuplicateFiles(Path startingDirectory) {\n    Map&lt;String, FileInfo> filesSeenAlready = new HashMap&lt;String, FileInfo>();\n    Stack&lt;Path> stack = new Stack&lt;Path>();\n    stack.push(startingDirectory);\n\n    List&lt;FilePaths> duplicates = new ArrayList&lt;FilePaths>();\n\n    while (!stack.empty()) {\n\n        Path currentPath = stack.pop();\n\n    }\n}", "cpp": "vector&lt;FilePaths> findDuplicateFiles(const string& startingDirectory)\n{\n    map&lt;string, FileInfo> filesSeenAlready;\n    stack&lt;string> pathsStack;\n    pathsStack.push(startingDirectory);\n\n    vector&lt;FilePaths> duplicates;\n\n    while (!stack.empty()) {\n\n        string currentPath = pathsStack.top();\n        pathsStack.pop();\n\n    }\n}"}, "question__find-duplicate-files__example-output": {"default": "[ ['/tmp/parker_is_dumb.mpg', '/home/parker/secret_puppy_dance.mpg'],\n  ['/home/trololol.mov', '/etc/apache2/httpd.conf'] ]", "cpp": "(original: /home/parker/secret_puppy_dance.mpg, duplicate: /tmp/parker_is_dumb.mpg)\n(original: /etc/apache2/httpd.conf, duplicate: /home/trololol.mov)", "c": "(original: /home/parker/secret_puppy_dance.mpg, duplicate: /tmp/parker_is_dumb.mpg)\n(original: /etc/apache2/httpd.conf, duplicate: /home/trololol.mov)", "java": "[(duplicate: /tmp/parker_is_dumb.mpg, original: /home/parker/secret_puppy_dance.mpg),\n(duplicate: /home/trololol.mov, original: /etc/apache2/httpd.conf)]", "python": "[('/tmp/parker_is_dumb.mpg', '/home/parker/secret_puppy_dance.mpg'),\n ('/home/trololol.mov', '/etc/apache2/httpd.conf')]"}, "question__find-duplicate-files__solution": {"javascript": "const fs = require('fs');\nconst crypto = require('crypto');\n\nfunction findDuplicateFiles(startingDirectory) {\n    var filesSeenAlready = {};\n    var stack = [startingDirectory];\n\n    var duplicates = [];\n\n    while (stack.length) {\n\n        var currentPath = stack.pop();\n        var currentFile = fs.statSync(currentPath);\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (currentFile.isDirectory()) {\n            fs.readdirSync(currentPath).forEach(function(path) {\n                stack.push(currentPath + '/' + path);\n            });\n\n        // if it's a file\n        } else {\n\n            // get its hash\n            var fileHash = sampleHashFile(currentPath);\n\n            // get its last edited time\n            var currentLastEditedTime = currentFile.mtime;\n\n            // if we've seen it before\n            if (filesSeenAlready.hasOwnProperty(fileHash)) {\n\n                var existingFile = filesSeenAlready[fileHash];\n\n                if (currentLastEditedTime > existingFile.lastEditedTime) {\n\n                    // current file is the dupe!\n                    duplicates.push([currentPath, existingFile.path]);\n\n                } else {\n\n                    // old file is the dupe!\n                    duplicates.push([existingFile.path, currentPath]);\n\n                    // but also update the object to have the new file's info\n                    filesSeenAlready[fileHash] = {lastEditedTime: currentLastEditedTime, path: currentPath};\n                }\n\n            // if it's a new file, throw it in filesSeenAlready\n            // and record its path and last edited time,\n            // so we can tell later if it's a dupe\n            } else {\n                filesSeenAlready[fileHash] = {lastEditedTime: currentLastEditedTime, path: currentPath};\n            }\n        }\n    }\n\n    return duplicates;\n}\n\nfunction sampleHashFile(path) {\n    const file = fs.statSync(path);\n\n    const numBytesToReadPerSample = 4000;\n    const totalBytes = file.size;\n\n    const hash = crypto.createHash('sha512');\n\n    // if the file is too short to take 3 samples, hash the entire file\n    if (totalBytes &lt; numBytesToReadPerSample * 3) {\n        hash.update(fs.readFileSync(path));\n\n    } else {\n        const numBytesBetweenSamples = (totalBytes - numBytesToReadPerSample * 3) / 2;\n\n        var buffer = new Buffer(numBytesToReadPerSample * 3);\n\n        // read first, middle, and last bytes\n        for (var offsetMultiplier = 0; offsetMultiplier &lt;= 2; offsetMultiplier++) {\n            var fd = fs.openSync(path, 'r');\n\n            var offset   = offsetMultiplier * numBytesToReadPerSample;\n            var position = offsetMultiplier * (numBytesToReadPerSample + numBytesBetweenSamples);\n\n            fs.readSync(fd, buffer, offset, numBytesToReadPerSample, position);\n        }\n\n        hash.update(buffer);\n    }\n\n    return hash.digest();\n}", "python": "import os\nimport hashlib\n\ndef find_duplicate_files(starting_directory):\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    # we'll track tuples of (duplicate_file, original_file)\n    duplicates = []\n\n    while len(stack):\n\n        current_path = stack.pop()\n\n        # if it's a directory,\n        # put the contents in our stack\n        if os.path.isdir(current_path):\n            for path in os.listdir(current_path):\n                full_path = os.path.join(current_path, path)\n                stack.append(full_path)\n\n        # if it's a file\n        else:\n\n            # get its hash\n            file_hash = sample_hash_file(current_path)\n\n            # get its last edited time\n            current_last_edited_time = os.path.getmtime(current_path)\n\n            # if we've seen it before\n            if file_hash in files_seen_already:\n\n                existing_last_edited_time, existing_path = files_seen_already[file_hash]\n\n                if current_last_edited_time > existing_last_edited_time:\n                    # current file is the dupe!\n                    duplicates.append((current_path, existing_path))\n\n                else:\n                    # old file is the dupe!\n                    duplicates.append((existing_path, current_path))\n\n                    # but also update files_seen_already to have the new file's info\n                    files_seen_already[file_hash] = \\\n                        (current_last_edited_time, current_path)\n\n            # if it's a new file, throw it in files_seen_already\n            # and record its path and last edited time,\n            # so we can tell later if it's a dupe\n            else:\n                files_seen_already[file_hash] = \\\n                    (current_last_edited_time, current_path)\n\n    return duplicates\n\n\ndef sample_hash_file(path):\n\n    num_bytes_to_read_per_sample = 4000\n    total_bytes = os.path.getsize(path)\n\n    hasher = hashlib.sha512()\n\n    with open(path, 'rb') as file:\n\n        # if the file is too short to take 3 samples, hash the entire file\n        if total_bytes &lt; num_bytes_to_read_per_sample * 3:\n            hasher.update(file.read())\n\n        else:\n            num_bytes_between_samples = (total_bytes - num_bytes_to_read_per_sample * 3) / 2\n\n            # read first, middle, and last bytes\n            for offset_multiplier in xrange(3):\n                start_of_sample = offset_multiplier * (num_bytes_to_read_per_sample + num_bytes_between_samples)\n                file.seek(start_of_sample)\n                sample = file.read(num_bytes_to_read_per_sample)\n                hasher.update(sample)\n\n    return hasher.hexdigest()", "ruby": "require 'digest'\n\ndef find_duplicate_files(starting_directory)\n    files_seen_already = {}\n    stack = [starting_directory]\n\n    duplicates = []\n\n    while stack.length > 0\n\n        current_path = stack.pop()\n\n        # if it's a directory,\n        # put the contents in our stack\n        if File::directory? current_path\n            Dir.foreach(current_path) do |path|\n                next if path == '.' || path == '..'\n                full_path = File.join(current_path, path)\n                stack.push(full_path)\n            end\n\n        # if it's a file\n        else\n\n            # get its hash\n            file_hash = sample_hash_file(current_path)\n\n            # get its last edited time\n            current_last_edited_time = File::mtime(current_path)\n\n            # if we've seen it before\n            if files_seen_already.include? file_hash\n\n                existing_last_edited_time, existing_path = files_seen_already[file_hash]\n\n                if current_last_edited_time > existing_last_edited_time\n\n                    # current file is the dupe!\n                    duplicates.push([current_path, existing_path])\n\n                else\n\n                    # old file is the dupe!\n                    duplicates.push([existing_path, current_path])\n\n                    # but also update files_seen_already to have the new file's info\n                    files_seen_already[file_hash] = \\\n                        [current_last_edited_time, current_path]\n                end\n\n            # if it's a new file, throw it in files_seen_already\n            # and record its path and last edited time,\n            # so we can tell later if it's a dupe\n            else\n                files_seen_already[file_hash] = \\\n                    [current_last_edited_time, current_path]\n            end\n        end\n    end\n\n    return duplicates\nend\n\n\ndef sample_hash_file(path)\n\n    num_bytes_to_read_per_sample = 4000\n    total_bytes = File.size(path)\n\n    hasher = Digest::SHA512.new\n\n    File.open(path, 'r') do |file|\n\n        # if the file is too short to take 3 samples, hash the entire file\n        if total_bytes &lt; num_bytes_to_read_per_sample * 3\n            hasher.update file.read()\n\n        else\n            num_bytes_between_samples = (total_bytes - num_bytes_to_read_per_sample * 3) / 2\n\n            # read first, middle, and last bytes\n            0.upto(2) do |offset_multiplier|\n\n                start_of_sample = offset_multiplier * (num_bytes_to_read_per_sample + num_bytes_between_samples)\n                file.seek(start_of_sample)\n                sample = file.read(num_bytes_to_read_per_sample)\n\n                hasher.update sample\n            end\n        end\n    end\n\n    return hasher.hexdigest\nend", "c": "#include &lt;sys/types.h>\n#include &lt;sys/stat.h>\n#include &lt;unistd.h>\n#include &lt;dirent.h>\n#include &lt;fcntl.h>\n#include &lt;stdlib.h>\n#include &lt;string.h>\n#include &lt;stdio.h>\n#include &lt;assert.h>\n#include &lt;openssl/sha.h>\n#include &lt;limits.h>\n\n// Assume we've already implemented a stack\nStack * stackNew(void);\nvoid stackFree(Stack *stack);\nint stackEmpty(Stack *stack);\nStack * stackPush_str(Stack *stack, const char *value);\nStack * stackPop(Stack *stack);\nvoid * stackPeek(Stack *stack);\n\n// Assume we've already implemented a linked list\nLinkedList * newLinkedList(void);\nvoid linkedListFreeWithDestructor(LinkedList *list, void (*freeData)(void*));\nvoid linkedListAppend(LinkedList *list, const void *data, size_t size);\n\n// Assume we've already implemented a hash table\nHashTable *hashTableNew(void);\nHashTable *hashTableInsert(HashTable *hashTable, const char *key,\n                           void *value, size_t valueSize);\nvoid *hashTableFind(HashTable *hashTable, const char *key);\nvoid hashTableFreeWithDestructor(HashTable *hashTable, void (*freeValue)(void*));\n\n\ntypedef struct FilePaths {\n    char *duplicatePath;\n    char *originalPath;\n} FilePaths;\n\nFilePaths * filePathsNew(const char* duplicatePath, const char* originalPath) {\n    FilePaths *filePaths = malloc(sizeof(FilePaths));\n    assert(filePaths != NULL);\n    filePaths->duplicatePath = strdup(duplicatePath);\n    assert(filePaths->duplicatePath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    assert(filePaths->originalPath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    return filePaths;\n}\n\nvoid filePathsFree(void *filePaths) {\n    FilePaths *fp = filePaths;\n    free(fp->duplicatePath);\n    free(fp->originalPath);\n    free(fp);\n}\n\nvoid filePathsPrint(const FilePaths filePaths) {\n    printf(\"(original: %s, duplicate: %s)\",\n           filePaths.originalPath,\n           filePaths.duplicatePath);\n}\n\n\ntypedef struct FileInfo {\n    char *path;\n    time_t lastModified;\n} FileInfo;\n\nFileInfo * fileInfoNew(const char *path, time_t lastModified) {\n    FileInfo *fileInfo = malloc(sizeof(FileInfo));\n    assert(fileInfo != NULL);\n    fileInfo->path = strdup(path);\n    assert(fileInfo->path != NULL);\n    fileInfo->lastModified = lastModified;\n    return fileInfo;\n}\n\nvoid fileInfoFree(void *fileInfo) {\n    FileInfo *fi = fileInfo;\n    free(fi->path);\n    free(fi);\n}\n\nchar * joinPaths(const char *dirname, const char *basename) {\n    size_t dirnameLength = strlen(dirname);\n    size_t basenameLength = strlen(basename);\n    size_t fullPathLength = dirnameLength + basenameLength + 1;\n    char *fullPath = malloc(fullPathLength + 1);\n    assert(fullPath != NULL);\n    strncpy(fullPath, dirname, dirnameLength + 1);\n    strncat(fullPath, \"/\", 2);\n    strncat(fullPath, basename, basenameLength + 1);\n    fullPath[fullPathLength] = '\\0';\n    return fullPath;\n}\n\nvoid scanDirectory(const char *directoryPath, Stack **pathsStack) {\n    struct dirent *entry;\n    DIR *dir = opendir(directoryPath);\n\n    if (dir == NULL) {\n        return;\n    }\n\n    while ((entry = readdir(dir)) != NULL) {\n        if (strcmp(entry->d_name, \".\") == 0 || strcmp(entry->d_name, \"..\") == 0) {\n            continue;\n        }\n        char *path = joinPaths(directoryPath, entry->d_name);\n        *pathsStack = stackPush_str(*pathsStack, path);\n        free(path);\n    }\n    closedir(dir);\n}\n\nchar * sha512ToHex(const unsigned char *hashValue) {\n  const size_t BASE = 16;\n  const size_t DIGITS_PER_BYTE = (UCHAR_MAX + 1) / BASE;\n  const size_t RESULT_LENGTH = SHA512_DIGEST_LENGTH * DIGITS_PER_BYTE;\n  size_t i;\n  char *result = malloc(RESULT_LENGTH + 1);\n  assert(result != NULL);\n  for (i = 0; i &lt; SHA512_DIGEST_LENGTH; ++i) {\n      snprintf(result + 2 * i, DIGITS_PER_BYTE + 1, \"%02x\", hashValue[i]);\n  }\n  result[RESULT_LENGTH] = '\\0';\n  return result;\n}\n\nchar * sampleFileHash(const char *path) {\n    struct stat st;\n    if(stat(path, &st) &lt; 0) {\n        fprintf(stderr, \"Error: Can't stat file '%s'.\", path);\n        return NULL;\n    }\n    if(!S_ISREG(st.st_mode)) {\n        fprintf(stderr, \"Error: File '%s' is not regular file.\", path);\n        return NULL;\n    }\n\n    // get file contents\n    size_t sizeHint = st.st_size;\n    int fileContentsRetrieved = 0;\n    char *fileContents = malloc(sizeHint + 1);\n    assert(fileContents != NULL);\n    int fd = open(path, O_RDONLY);\n    if (fd != -1) {\n        ssize_t actuallyRead = read(fd, fileContents, sizeHint);\n        if (actuallyRead == sizeHint) {\n            fileContentsRetrieved = 1;\n        }\n        else {\n            fprintf(stderr, \"Error: Couldn't read file '%s'.\\n\", path);\n        }\n        close(fd);\n    }\n    else {\n        fprintf(stderr, \"Error: Couldn't read file '%s' for reading.\\n\", path);\n    }\n\n    if (fileContentsRetrieved) {\n        // compute SHA-512 hash\n        unsigned char hashValue[SHA512_DIGEST_LENGTH];\n        SHA512(&fileContents[0], sizeHint, hashValue);\n        return sha512ToHex(hashValue);\n    }\n    else {\n        return NULL;\n    }\n}\n\nLinkedList * findDuplicateFiles(const char *startingDirectory) {\n    HashTable *filesSeenAlready = hashTableNew();\n    Stack *pathsStack = stackNew();\n    LinkedList *duplicates = newLinkedList();\n\n    pathsStack = stackPush_str(pathsStack, startingDirectory);\n\n    while (!stackEmpty(pathsStack)) {\n        struct stat st;\n        char *currentPath = strdup(stackPeek(pathsStack));\n        assert(currentPath != NULL);\n        pathsStack = stackPop(pathsStack);\n\n        if (stat(currentPath, &st) &lt; 0) {\n            fprintf(stderr, \"Error: Can't stat file '%s'.\\n\", currentPath);\n            free(currentPath);\n            continue;\n        }\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (S_ISDIR(st.st_mode)) {\n            scanDirectory(currentPath, &pathsStack);\n        }\n        // if it's a file\n        else if (S_ISREG(st.st_mode)) {\n            // get its contents\n            char *hash = sampleFileHash(currentPath);\n\n            // if we've seen it before\n            if (hash != NULL) {\n                FileInfo *fileInfo = hashTableFind(filesSeenAlready, hash);\n                if (fileInfo != NULL) {\n                    // compare with its last edited time\n                    if (st.st_mtime > fileInfo->lastModified) {\n                        // current file is the dupe!\n                        FilePaths *filePaths = filePathsNew(currentPath, fileInfo->path);\n                        linkedListAppend(duplicates, filePaths, sizeof(FilePaths));\n                        free(filePaths);  // but not freeFilePaths(filePaths) since duplicates\n                                          // list now references FilePaths data\n                    }\n                    else {\n                        // old file is the dupe!\n                        FilePaths *filePaths = filePathsNew(fileInfo->path, currentPath);\n                        linkedListAppend(duplicates, filePaths, sizeof(FilePaths));\n                        free(filePaths);  // but not freeFilePaths(filePaths) since duplicates\n                                          // list now references FilePaths data\n\n                        // but also update filesSeenAlready to have the new file's info\n                        free(fileInfo->path);\n                        fileInfo->path = strdup(currentPath);\n                        fileInfo->lastModified = st.st_mtime;\n                    }\n\n                }\n                // if it's a new file, throw it in filesSeenAlready\n                // and record its path and last edited time,\n                // so we can tell later if it's a dupe\n                else {\n                    FileInfo *fileInfo = fileInfoNew(currentPath, st.st_mtime);\n                    filesSeenAlready = hashTableInsert(filesSeenAlready,\n                                                       hash,\n                                                       fileInfo,\n                                                       sizeof(FileInfo));\n                    free(fileInfo);  // but not fileInfoFree(fileInfo) since\n                                     // filesSeenAlready now references its data\n\n                }\n                free(hash);\n            }\n        }\n        free(currentPath);\n    }\n    hashTableFreeWithDestructor(filesSeenAlready, fileInfoFree);\n    stackFree(pathsStack);\n    return duplicates;\n}", "java": "import java.util.Map;\nimport java.util.HashMap;\nimport java.util.Stack;\nimport java.util.List;\nimport java.util.ArrayList;\n\nimport java.math.BigInteger;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\nimport java.security.MessageDigest;\nimport java.security.DigestInputStream;\nimport java.security.NoSuchAlgorithmException;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class FilePaths {\n\n    Path duplicatePath;\n    Path originalPath;\n\n    public FilePaths(Path duplicatePath, Path originalPath) {\n        this.duplicatePath = duplicatePath;\n        this.originalPath  = originalPath;\n    }\n\n    public String toString() {\n        return \"(original: \" + originalPath + \", duplicate: \" + duplicatePath + \")\";\n    }\n}\n\n\npublic class FileInfo {\n\n    long timeLastEdited;\n    Path path;\n\n    public FileInfo(long timeLastEdited, Path path) {\n        this.timeLastEdited = timeLastEdited;\n        this.path = path;\n    }\n}\n\n\npublic List&lt;FilePaths> findDuplicateFiles(Path startingDirectory) {\n    Map&lt;String, FileInfo> filesSeenAlready = new HashMap&lt;String, FileInfo>();\n    Stack&lt;Path> stack = new Stack&lt;Path>();\n    stack.push(startingDirectory);\n\n    List&lt;FilePaths> duplicates = new ArrayList&lt;FilePaths>();\n\n    while (!stack.empty()) {\n\n        Path currentPath = stack.pop();\n        File currentFile = new File(currentPath.toString());\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (currentFile.isDirectory()) {\n            for (File file : currentFile.listFiles()) {\n                stack.add(file.toPath());\n            }\n\n        // if it's a file\n        } else {\n\n            // get its hash\n            String fileHash = sampleHashFile(currentPath);\n\n            // get its last edited time\n            long currentLastEditedTime = currentFile.lastModified();\n\n            // if we've seen it before\n            if (filesSeenAlready.containsKey(fileHash)) {\n\n                FileInfo fileInfo = filesSeenAlready.get(fileHash);\n                long existingLastEditedTime = fileInfo.timeLastEdited;\n                Path existingPath = fileInfo.path;\n\n                if (currentLastEditedTime > existingLastEditedTime) {\n\n                    // current file is the dupe!\n                    duplicates.add(new FilePaths(currentPath, existingPath));\n\n                } else {\n\n                    // old file is the dupe!\n                    duplicates.add(new FilePaths(existingPath, currentPath));\n\n                    // but also update filesSeenAlready to have the new file's info\n                    filesSeenAlready.put(fileHash, new FileInfo(currentLastEditedTime, currentPath));\n                }\n\n            // if it's a new file, throw it in filesSeenAlready\n            // and record its path and last edited time,\n            // so we can tell later if it's a dupe\n            } else {\n                filesSeenAlready.put(fileHash, new FileInfo(currentLastEditedTime, currentPath));\n            }\n        }\n    }\n    return duplicates;\n}\n\n\npublic String sampleHashFile(Path path) {\n\n    final int numBytesToReadPerSample = 4000;\n    final long totalBytes = new File(path.toString()).length();\n\n    InputStream inputStream = null;\n    MessageDigest digest = null;\n\n    try {\n        inputStream = new FileInputStream(path.toString());\n        digest = MessageDigest.getInstance(\"SHA-512\");\n    } catch (FileNotFoundException e) {\n        System.out.println(e);\n    } catch (NoSuchAlgorithmException e) {\n        System.out.println(e);\n    }\n\n    DigestInputStream digestInputStream = new DigestInputStream(inputStream, digest);\n\n    try {\n\n        // if the file is too short to take 3 samples, hash the entire file\n        if (totalBytes &lt; numBytesToReadPerSample * 3) {\n            byte[] bytes = new byte[(int) totalBytes];\n            digestInputStream.read(bytes);\n        } else {\n            byte[] bytes = new byte[numBytesToReadPerSample * 3];\n            long numBytesBetweenSamples = (totalBytes - numBytesToReadPerSample * 3) / 2;\n\n            // read first, middle and last bytes\n            for (int n = 0; n &lt; 3; n++) {\n                digestInputStream.read(bytes, n * numBytesToReadPerSample, numBytesToReadPerSample);\n                digestInputStream.skip(numBytesBetweenSamples);\n            }\n        }\n    } catch (IOException e) {\n        System.out.println(e);\n    }\n\n    return new BigInteger(1, digest.digest()).toString(16).toString();\n}", "cpp": "#include &lt;sys/types.h>\n#include &lt;sys/stat.h>\n#include &lt;unistd.h>\n#include &lt;dirent.h>\n#include &lt;fcntl.h>\n#include &lt;openssl/sha.h>\n\nclass FilePaths\n{\npublic:\n    string duplicatePath_;\n    string originalPath_;\n\n    FilePaths(const string& duplicatePath = string(), const string& originalPath = string()) :\n        duplicatePath_(duplicatePath),\n        originalPath_(originalPath)\n    {\n    }\n\n    string toString() const {\n        ostringstream str;\n        str  &lt;&lt; \"(original: \" &lt;&lt; filePaths.originalPath_\n            &lt;&lt; \", duplicate: \" &lt;&lt; filePaths.duplicatePath_ &lt;&lt; \")\";\n        return str.str();\n    }\n};\n\nclass FileInfo\n{\npublic:\n    string path_;\n    time_t lastModified_;\n\n    FileInfo(const string& path, time_t lastModified) :\n        path_(path),\n        lastModified_(lastModified)\n    {\n    }\n};\n\nvoid scanDirectory(const string& directoryPath, stack&lt;string>& pathsStack)\n{\n    DIR* dir = opendir(directoryPath.c_str());\n    if (dir) {\n        struct dirent* entry;\n        while ((entry = readdir(dir)) != NULL) {\n            if (strcmp(entry->d_name, \".\") != 0 && strcmp(entry->d_name, \"..\") != 0) {\n                string path = directoryPath + '/' + entry->d_name;\n                pathsStack.push(path);\n            }\n        }\n    }\n    closedir(dir);\n}\n\nstring sampleFileHash(const string& path)\n{\n    struct stat st;\n    if(stat(path.c_str(), &st) &lt; 0) {\n        cerr &lt;&lt; \"Error: Can't stat file '\" &lt;&lt; path &lt;&lt; \"'.\" &lt;&lt; endl;\n        return string();\n    }\n    if(!S_ISREG(st.st_mode)) {\n        cerr &lt;&lt; \"Error: File '\" &lt;&lt; path &lt;&lt; \"' is not regular file.\" &lt;&lt; endl;\n        return string();\n    }\n\n    // get file contents\n    bool fileContentsRetrieved = false;\n    vector&lt;unsigned char> fileContents(st.st_size);\n    int fd = open(path.c_str(), O_RDONLY);\n    if (fd != -1) {\n        ssize_t actuallyRead = read(fd, static_cast&lt;void*>(&fileContents[0]), fileContents.size());\n        if (actuallyRead == fileContents.size()) {\n            fileContentsRetrieved = true;\n        } else {\n            cerr &lt;&lt; \"Error: Couldn't read file '\" &lt;&lt; path &lt;&lt; \"'.\" &lt;&lt; endl;\n        }\n        close(fd);\n    } else {\n        cerr &lt;&lt; \"Error: Couldn't open file '\" &lt;&lt; path &lt;&lt; \"' for reading.\" &lt;&lt; endl;\n    }\n\n    if (fileContentsRetrieved) {\n        // compute SHA-512 hash\n        ostringstream result;\n        unsigned char hashValue[SHA512_DIGEST_LENGTH];\n        SHA512(&fileContents[0], fileContents.size(), hashValue);\n        result &lt;&lt; hex;\n        for (size_t i = 0; i &lt; SHA512_DIGEST_LENGTH; ++i) {\n            if(hashValue[i] &lt; 16) {\n                result &lt;&lt; '0';\n            }\n            result &lt;&lt; static_cast&lt;unsigned int>(hashValue[i]);\n        }\n        return result.str();\n    } else {\n        return string();\n    }\n}\n\nvector&lt;FilePaths> findDuplicateFiles(const string& startingDirectory)\n{\n    unordered_map&lt;string, FileInfo> filesSeenAlready;\n    stack&lt;string> pathsStack;\n    pathsStack.push(startingDirectory);\n\n    vector&lt;FilePaths> duplicates;\n\n    while (!pathsStack.empty()) {\n\n        string currentPath = pathsStack.top();\n        pathsStack.pop();\n\n        struct stat st;\n        if(stat(currentPath.c_str(), &st) &lt; 0) {\n            cerr &lt;&lt; \"Error: Can't stat file '\" &lt;&lt; currentPath &lt;&lt; \"'.\" &lt;&lt; endl;\n            continue;\n        }\n\n        // if it's a directory,\n        // put the contents in our stack\n        if (S_ISDIR(st.st_mode)) {\n\n            scanDirectory(currentPath, pathsStack);\n\n        // if it's a file\n        } else if (S_ISREG(st.st_mode)) {\n\n            string hash = sampleFileHash(currentPath);\n\n            // if we've seen it before\n            if (!hash.empty()) {\n                auto it = filesSeenAlready.find(hash);\n                if(it != filesSeenAlready.end()) {\n                    // compare with its last edited time\n                    if (st.st_mtime > it->second.lastModified_) {\n\n                        // current file is the dupe!\n                        duplicates.emplace(duplicates.end(), currentPath, it->second.path_);\n\n                    } else {\n\n                        // old file is the dupe!\n                        duplicates.emplace(duplicates.end(), it->second.path_, currentPath);\n\n                        // but also update filesSeenAlready to have the new file's info\n                        it->second.path_ = currentPath;\n                        it->second.lastModified_ = st.st_mtime;\n                    }\n\n                // if it's a new file, throw it in filesSeenAlready\n                // and record its path and last edited time,\n                // so we can tell later if it's a dupe\n                } else {\n                    filesSeenAlready.insert(make_pair(hash, FileInfo(currentPath, st.st_mtime)));\n                }\n            }\n        }\n    }\n\n    return duplicates;\n}"}, "question__find-duplicate-files__file-paths-class": {"default": "public class FilePaths {\n\n    Path duplicatePath;\n    Path originalPath;\n\n    public FilePaths(Path duplicatePath, Path originalPath) {\n        this.duplicatePath = duplicatePath;\n        this.originalPath  = originalPath;\n    }\n\n    public String toString() {\n        return \"(original: \" + originalPath + \", duplicate: \" + duplicatePath + \")\";\n    }\n}", "cpp": "class FilePaths\n{\npublic:\n    string duplicatePath_;\n    string originalPath_;\n\n    FilePaths(const string& duplicatePath, const string& originalPath) :\n        duplicatePath_(duplicatePath),\n        originalPath_(originalPath)\n    {\n    }\n\n    string toString() const {\n        ostringstream str;\n        str  &lt;&lt; \"(original: \" &lt;&lt; filePaths.originalPath_\n            &lt;&lt; \", duplicate: \" &lt;&lt; filePaths.duplicatePath_ &lt;&lt; \")\";\n        return str.str();\n    }\n};", "c": "typedef struct FilePaths {\n    char *duplicatePath;\n    char *originalPath;\n} FilePaths;\n\nFilePaths * filePathsNew(const char* duplicatePath, const char* originalPath) {\n    FilePaths *filePaths = malloc(sizeof(FilePaths));\n    assert(filePaths != NULL);\n    filePaths->duplicatePath = strdup(duplicatePath);\n    assert(filePaths->duplicatePath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    assert(filePaths->originalPath != NULL);\n    filePaths->originalPath = strdup(originalPath);\n    return filePaths;\n}\n\nvoid filePathsFree(void *filePaths) {\n    FilePaths *fp = filePaths;\n    free(fp->duplicatePath);\n    free(fp->originalPath);\n    free(fp);\n}\n\nvoid filePathsPrint(const FilePaths filePaths) {\n    printf(\"(original: %s, duplicate: %s)\",\n           filePaths.originalPath,\n           filePaths.duplicatePath);\n}"}}, "vars": {"question__find-duplicate-files__file-paths-class": {"default": "FilePaths"}}, "words": {"question__find-duplicate-files__file-paths-details": {"javascript": "<ul>\n<li>\nthe <strong>first</strong> item is the <strong>duplicate</strong> file\n</li>\n<li>\nthe <strong>second</strong> item is the <strong>original</strong> file\n</li>\n</ul>", "python": "<ul>\n<li>\nthe <strong>first</strong> item is the <strong>duplicate</strong> file\n</li>\n<li>\nthe <strong>second</strong> item is the <strong>original</strong> file\n</li>\n</ul>", "ruby": "<ul>\n<li>\nthe <strong>first</strong> item is the <strong>duplicate</strong> file\n</li>\n<li>\nthe <strong>second</strong> item is the <strong>original</strong> file\n</li>\n</ul>", "default": "<ul>\n<li>\nthe <strong>first</strong> item is the <strong>duplicate</strong> file\n</li>\n<li>\nthe <strong>second</strong> item is the <strong>original</strong> file\n</li>\n</ul>", "c": "<div code-block=\"file-paths-class\" language=\"c\" translation-highlighting=\"static\">typedef struct FilePaths {\n    char *duplicatePath;\n    char *originalPath;\n} FilePaths;\n\nFilePaths * filePathsNew(const char* duplicatePath, const char* originalPath) {\n    FilePaths *filePaths = malloc(sizeof(FilePaths));\n    assert(filePaths != NULL);\n    filePaths-&gt;duplicatePath = strdup(duplicatePath);\n    assert(filePaths-&gt;duplicatePath != NULL);\n    filePaths-&gt;originalPath = strdup(originalPath);\n    assert(filePaths-&gt;originalPath != NULL);\n    filePaths-&gt;originalPath = strdup(originalPath);\n    return filePaths;\n}\n\nvoid filePathsFree(void *filePaths) {\n    FilePaths *fp = filePaths;\n    free(fp-&gt;duplicatePath);\n    free(fp-&gt;originalPath);\n    free(fp);\n}\n\nvoid filePathsPrint(const FilePaths filePaths) {\n    printf(\"(original: %s, duplicate: %s)\",\n           filePaths.originalPath,\n           filePaths.duplicatePath);\n}</div>", "java": "<div code-block=\"file-paths-class\" language=\"java\" translation-highlighting=\"static\">public class FilePaths {\n\n    Path duplicatePath;\n    Path originalPath;\n\n    public FilePaths(Path duplicatePath, Path originalPath) {\n        this.duplicatePath = duplicatePath;\n        this.originalPath  = originalPath;\n    }\n\n    public String toString() {\n        return \"(original: \" + originalPath + \", duplicate: \" + duplicatePath + \")\";\n    }\n}</div>", "cpp": "<div code-block=\"file-paths-class\" language=\"cpp\" translation-highlighting=\"static\">class FilePaths\n{\npublic:\n    string duplicatePath_;\n    string originalPath_;\n\n    FilePaths(const string&amp; duplicatePath, const string&amp; originalPath) :\n        duplicatePath_(duplicatePath),\n        originalPath_(originalPath)\n    {\n    }\n\n    string toString() const {\n        ostringstream str;\n        str  &lt;&lt; \"(original: \" &lt;&lt; filePaths.originalPath_\n            &lt;&lt; \", duplicate: \" &lt;&lt; filePaths.duplicatePath_ &lt;&lt; \")\";\n        return str.str();\n    }\n};</div>"}, "question__find-duplicate-files__a-standard-list": {"javascript": "an array", "python": "a list", "default": "a list", "php": "an array", "ruby": "an array", "swift": "an array", "cpp": "a vector", "objectivec": "an array", "csharp": "a list", "c": "an array", "java": "an array"}, "question__find-duplicate-files__hash-table": {"swift": "dictionary", "javascript": "object", "objectivec": "dictionary", "ruby": "hash", "python": "dictionary", "cpp": "unordered map", "c": "hash table", "php": "array", "java": "hash map", "csharp": "dictionary"}, "question__find-duplicate-files__a-hash-table-concept": {"swift": "a <span concept='hash-map'>dictionary</span>", "javascript": "an <span concept=\"hash-map\">object</span>", "objectivec": "a <span concept='hash-map'>dictionary</span>", "ruby": "a <span concept=\"hash-map\">hash</span>", "python": "a <span concept=\"hash-map\">dictionary</span>", "cpp": "a <span concept=\"hash-map\">unordered map</span>", "c": "a <span concept=\"hash-map\">hash table</span>", "php": "an <span concept='hash-map'>array</span>", "java": "a <span concept=\"hash-map\">hash map</span>", "csharp": "a <span concept='hash-map'>dictionary</span>"}, "question__find-duplicate-files__a-hash-table-strong": {"javascript": "an <strong>object</strong>", "python": "a <strong>dictionary</strong>", "ruby": "a <strong>hash</strong>", "c": "a <strong>hash table</strong>", "java": "a <strong>hash map</strong>", "cpp": "a <strong>hash table</strong>"}, "question__find-duplicate-files__a-list-strong": {"javascript": "an <strong>array</strong>", "ruby": "an <strong>array</strong>", "python": "a <strong>list</strong>", "default": "a <strong>list</strong>", "c": "a <strong>linked list</strong>", "java": "a <strong>list</strong>", "cpp": "a <strong>vector</strong>"}, "question__find-duplicate-files__use-generator": {"javascript": "Try implementing the file traversal with a generator!", "ruby": "Try implementing the file traversal with an enumerator!", "python": "Try implementing the file traversal with a generator!", "default": "Try implementing the file traversal with a generator!", "c": "", "java": "", "cpp": ""}, "question__find-duplicate-files__a-variable-length-list": {"javascript": "<span words=\"a-standard-list\">an array</span>", "python": "<span words=\"a-standard-list\">a list</span>", "ruby": "<span words=\"a-standard-list\">an array</span>", "default": "<span words=\"a-standard-list\"/>", "c": "a linked list", "java": "a list", "cpp": "<span words=\"a-standard-list\">a vector</span>"}, "question__find-duplicate-files__a-hash-table-em": {"javascript": "an <em>object</em>", "python": "a <em>dictionary</em>", "ruby": "a <em>hash</em>", "c": "a <em>hash table</em>", "java": "a <em>hash map</em>", "cpp": "an <em>unordered map</em>"}, "question__find-duplicate-files__file-paths-explanation": {"javascript": "<span concept=\"array\">arrays</span> where", "python": "<span concept=\"tuple\">tuples</span> where", "ruby": "<span concept=\"array\">arrays</span> where", "default": "<span concept=\"array\">arrays</span> where", "c": "<span var=\"file-paths-class\">FilePaths</span> structures with variables for the original and duplicate paths", "java": "<span var=\"file-paths-class\">FilePaths</span> objects with variables for the original and duplicate paths", "cpp": "<span var=\"file-paths-class\">FilePaths</span> objects with variables for the original and duplicate paths"}, "question__find-duplicate-files__pair": {"javascript": "array", "python": "tuple", "ruby": "array", "default": "array", "c": "<span var=\"file-paths-class\">FilePaths</span> object", "java": "<span var=\"file-paths-class\">FilePaths</span> object", "cpp": "<span var=\"file-paths-class\">FilePaths</span> object"}, "question__find-duplicate-files__a-hash-table": {"swift": "a dictionary", "javascript": "an object", "objectivec": "a dictionary", "ruby": "a hash", "python": "a dictionary", "cpp": "an unordered map", "c": "a hash table", "php": "an array", "java": "a hash map", "csharp": "a dictionary"}, "question__find-duplicate-files__stack-strong": {"javascript": "<strong>stack</strong> (we'll implement ours with <span words=\"a-standard-list\">an array</span>)", "python": "<strong>stack</strong> (we'll implement ours with <span words=\"a-standard-list\">a list</span>)", "ruby": "<strong>stack</strong> (we'll implement ours with <span words=\"a-standard-list\">an array</span>)", "default": "<strong>stack</strong> (we'll implement ours with <span words=\"a-standard-list\"/>)", "c": "<strong>stack</strong>", "java": "<strong>stack</strong>", "cpp": "<strong>stack</strong>"}, "question__find-duplicate-files__server-side-language": {"javascript": "<p class=\"aside\">\n    Since we'll be traversing our file system, we can't solve this with plain JavaScript. We use Node for our solution. You can also change to a server-side language for this challange.\n</p>", "python": "", "ruby": "", "default": "", "c": "", "java": "", "cpp": ""}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-files" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-files" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-files&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/find-duplicate-files" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-files" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/find-duplicate-files&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./42.Find Duplicate Files _ Interview Cake_files/jquery.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./42.Find Duplicate Files _ Interview Cake_files/underscore-min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/angular-seo.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./42.Find Duplicate Files _ Interview Cake_files/base.js"></script>

    
    <script src="./42.Find Duplicate Files _ Interview Cake_files/prism.min.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/codemirror.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/python.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/ruby.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/javascript.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/clike.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/php.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/haskell.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./42.Find Duplicate Files _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./42.Find Duplicate Files _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./42.Find Duplicate Files _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./42.Find Duplicate Files _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="S4VcUcEeuiM4ZPClR3kYqmRjWyGSbbfnpDkychP80R4LOUOrfyzhX5f1hnWlpptC">
<div id="loading">
. . .
</div>


<link href="./42.Find Duplicate Files _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default598219_provider" id="stripeXDM_default598219_provider" src="./42.Find Duplicate Files _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./42.Find Duplicate Files _ Interview Cake_files/saved_resource(1).html"></iframe><iframe src="./42.Find Duplicate Files _ Interview Cake_files/pixel.html" style="display: none;"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket80400" src="./42.Find Duplicate Files _ Interview Cake_files/storage.html"></iframe></span></body></html>