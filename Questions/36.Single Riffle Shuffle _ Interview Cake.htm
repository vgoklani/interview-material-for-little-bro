<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0064)https://www.interviewcake.com/question/python/single-rifle-check -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" defer="true" src="./36.Single Riffle Shuffle _ Interview Cake_files/jquery.js"></script><script async="" defer="true" src="./36.Single Riffle Shuffle _ Interview Cake_files/visits"></script><script type="text/javascript" src="./36.Single Riffle Shuffle _ Interview Cake_files/9e57878e2e"></script><script src="./36.Single Riffle Shuffle _ Interview Cake_files/nr-998.min.js"></script><script type="text/javascript" src="./36.Single Riffle Shuffle _ Interview Cake_files/track"></script><script type="text/javascript" src="./36.Single Riffle Shuffle _ Interview Cake_files/identify"></script><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}</style>
    <script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/prum.min.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/f78ae8e419ed65a0b5d9f07bb19c8d3a987aef19.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/4774384.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/mixpanel-2-latest.min.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/0751fb0485a5b0be210d27b9cefd9842c5c65cc6.2.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/analytics.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/fbevents.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/conversion_async.js"></script><script id="facebook-jssdk" src="./36.Single Riffle Shuffle _ Interview Cake_files/all.js"></script><script type="text/javascript" async="" src="./36.Single Riffle Shuffle _ Interview Cake_files/analytics.min.js"></script><script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}');
        
    </script>


    
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o){if(!p.aborted){e&&e(n,r,o);for(var i=t(o),a=v(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var f=s[w[n]];return f&&f.push([y,n,r,i]),i}}function d(e,t){b[e]=v(e).concat(t)}function v(e){return b[e]||[]}function g(e){return l[e]=l[e]||o(n)}function m(e,t){f(e,function(e,n){t=t||"feature",w[n]=t,t in s||(s[t]=[])})}var b={},w={},y={on:d,emit:n,get:g,listeners:v,context:t,buffer:m,abort:a,aborted:!1};return y}function i(){return new r}function a(){(s.api||s.feature)&&(p.aborted=!0,s=p.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},l={},p=t.exports=o();p.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return f.abort();c(b,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=l.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===l.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=e("ee"),s=window,l=s.document,p="addEventListener",d="attachEvent",v=s.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:v,REQ:s.Request,EV:s.Event,PR:s.Promise,MO:s.MutationObserver},e(1);var m=""+location,b={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},w=v&&g&&g[p]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:m,features:{},xhrWrappable:w};l[p]?(l[p]("DOMContentLoaded",i,!1),s[p]("load",r,!1)):(l[d]("onreadystatechange",o),s[d]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","errorBeacon":"bam.nr-data.net","applicationID":"7328113","queueTime":0,"beacon":"bam.nr-data.net","licenseKey":"9e57878e2e","agent":"","applicationTime":393}</script>
        <link rel="shortcut icon" type="image/x-icon" href="https://www.interviewcake.com/images/favicon.ico?bust=135">
        <link rel="canonical" href="https://www.interviewcake.com/question/java/single-rifle-check">
        <meta name="description" content="Write a function to tell us if a deck of cards is a single riffle of two other halves.">

        

        <meta property="og:title" content="Single Riffle Shuffle | Interview Cake">
        <meta property="og:description" content="Write a function to tell us if a deck of cards is a single riffle of two other halves.">
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta property="og:type" content="website">
        <meta property="og:locale" content="en_US">
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips">
        <meta property="fb:app_id" content="149278655279066">
        <meta property="fb:admins" content="514407734">
        <meta property="og:url" content="https://www.interviewcake.com/question/java/single-rifle-check">

        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@interviewcake">
        <meta name="twitter:title" content="Single Riffle Shuffle | Interview Cake">
        <meta name="twitter:description" content="Write a function to tell us if a deck of cards is a single riffle of two other halves.">
        <meta name="twitter:creator" content="@interviewcake">
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png">
        <meta name="twitter:domain" content="interviewcake.com">

        <title>Single Riffle Shuffle | Interview Cake</title>
    


    

    
    <script type="text/javascript">
        window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
        window.analytics.load("rowk0wc1g6"),
        window.analytics.page();
    </script>
    
    


    


    

        <link href="./36.Single Riffle Shuffle _ Interview Cake_files/bootstrap.min.css" rel="stylesheet">
        <link href="./36.Single Riffle Shuffle _ Interview Cake_files/bootstrap-glyphicons.css" rel="stylesheet">
        <link href="./36.Single Riffle Shuffle _ Interview Cake_files/font-awesome.min.css" rel="stylesheet">
        <link href="./36.Single Riffle Shuffle _ Interview Cake_files/katex.min.css" rel="stylesheet">
    
    
        
            <link rel="stylesheet" href="./36.Single Riffle Shuffle _ Interview Cake_files/4d3ba14d6001.css" type="text/css" media="all">
        
    




<!--
<link href='http://fonts.googleapis.com/css?family=Raleway:500,700,100' rel='stylesheet' type='text/css'>
-->
<!--
<link href='http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
-->
<link href="./36.Single Riffle Shuffle _ Interview Cake_files/css" rel="stylesheet" type="text/css">

<link rel="apple-touch-icon" href="https://www.interviewcake.com/images/cake_white_on_blue_128_128_unrounded.png">
<!--
thought maybe for headings. but nope.
<link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
-->




<meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d">





<script type="text/javascript">
var _vwo_code=(function(){
var account_id=50155,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
// DO NOT EDIT BELOW THIS LINE
f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
</script><script src="./36.Single Riffle Shuffle _ Interview Cake_files/j.php" type="text/javascript"></script>

<script src="./36.Single Riffle Shuffle _ Interview Cake_files/application2.js" async="" defer="" data-cfasync="false"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style><style type="text/css">.olark-key,#hbl_code,#olark-data{display: none !important;}</style><link id="habla_style_div" type="text/css" rel="stylesheet" href="./36.Single Riffle Shuffle _ Interview Cake_files/df26100e954276593311a44753620fda.css"><style type="text/css">@media print {#habla_beta_container_do_not_rely_on_div_classes_or_names {display: none !important}}</style><link rel="stylesheet" href="./36.Single Riffle Shuffle _ Interview Cake_files/theme.css" type="text/css"></head>
<body ng-app="prepApp" ng-init="questionIsEmbedded = false" class="user-is-full-access   ng-scope"><div id="olark" style="display: none;"><olark><iframe frameborder="0" id="olark-loader" src="./36.Single Riffle Shuffle _ Interview Cake_files/saved_resource.html"></iframe></olark></div>

<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="./36.Single Riffle Shuffle _ Interview Cake_files/cake_white_20_21.png" class="logo">
            Interview Cake
        </span>
    </div>
</div>




<div class="navbar navbar-normal navbar-inverse ng-scope" role="navigation" ng-controller="HeaderCtrl" language="python">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="https://www.interviewcake.com/">
            Interview Cake
        </a>
    </div>

  <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-left">
            <li>
                <a href="https://www.interviewcake.com/coding-interview-tips">Tips and Tricks</a>
            </li>

            <li class="dropdown">
                <a href="https://www.interviewcake.com/question/python/single-rifle-check" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                    Glossary <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>, etc</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/article/logarithms">Logarithms</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-search">Binary Search</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/counting-sort">Counting Sort</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/overlapping-subproblems">Overlapping Subproblems</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/memoization">Memoization</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bottom-up">Bottom-Up Algorithms</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/lazy">Lazy Evaluation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/garbage-collection">Garbage Collection</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/integer-overflow">Integer Overflow</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/js-closure">Closure</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/slice">Array Slicing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hashing">Hashing</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/mutable">Mutable vs Immutable</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/in-place">In-Place Operation</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/triangular-series">Triangular Series</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/array">Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/dynamic-array-amortized-analysis">Dynamic Array</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/hash-map">Hash Table</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/linked-list">Linked List</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/queue">Queue</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/stack">Stack</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-tree">Binary Tree</a>
                    </li>

                    <li role="separator" class="divider"></li>

                    <li>
                        <a href="https://www.interviewcake.com/concept/binary-numbers">Binary Numbers</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/and">Bitwise AND</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/or">Bitwise OR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/not">Bitwise NOT</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/xor">Bitwise XOR</a>
                    </li>
                    <li>
                        <a href="https://www.interviewcake.com/concept/bit-shift">Bit Shifting</a>
                    </li>
                </ul>
            </li>

            
            
            
            <li>
                
                <a href="https://www.interviewcake.com/all-questions/python">All Questions</a>
                
            </li>
            
            <li>
                
                
            </li>
        </ul>



        <ul class="nav navbar-nav navbar-right" ng-show="currentUserSet">

            
            <li>
                

                <a class="upgrade ng-hide" ng-hide="currentUser.is_full_access" href="https://www.interviewcake.com/upgrade">
                    <!--
                    <i class="fa fa-unlock-alt fa-lg" style="margin-right: 5px;" ></i>
                    -->

                    Get the full course

                    <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>

</a>
            </li>
            



            
            <li class="dropdown language-dropdown ng-scope" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage&amp;&amp;currentUser.is_full_access ">
                <a rel="nofollow" href="https://www.interviewcake.com/question/python/single-rifle-check" class="dropdown-toggle ng-binding" data-toggle="dropdown">
                    Python <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                
                    <!-- ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">Python</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">Ruby</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">Java</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">JavaScript</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">C (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages --><li ng-repeat="language in contentLanguages" class="ng-scope">
                        <a href="https://www.interviewcake.com/question/python/single-rifle-check" ng-click="updateLanguage(language, true)" class="ng-binding">C++ (beta)</a>
                    </li><!-- end ngRepeat: language in contentLanguages -->
                
                </ul>
            </li>
            

            <li>
                <p class="navbar-text">
                    
                    'sup <a rel="nofollow" trackling="" the-event="Settings Link Click" href="https://www.interviewcake.com/account">Goku</a>.
                    
                    <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                </p>
            </li>
            <li ng-hide="currentUser.is_anonymous">
                <a rel="nofollow" tracklink="" the-event="Logout Link Click" the-properties="{&quot;which&quot; : &quot;header top right&quot;}" href="https://www.interviewcake.com/auth/logout/?next=/" class="ng-isolate-scope">Log out</a>
            </li>

            <li ng-show="currentUser.is_anonymous" class="ng-hide">
                <a href="https://www.interviewcake.com/question/python/single-rifle-check" rel="nofollow" ng-click="loginClick(&#39;header top right&#39;)">Log in to save progress</a>
            </li>
        </ul>
    </div>

</div>


<div class="below-nav">

    <div class="ic-alerts">
        
        
    </div>

    

    
    

<div class="quiz ng-scope" ng-controller="PrepSeshApp">
    
        
            

<div ng-controller="NumberlineCtrl" class="numberline-wrapper  user-is-full-access ng-scope">

    <section ng-controller="NumberlineScrollingCtrl" class="numberline-scrolling ng-scope" ngc-scroll="setEdgeFadeIntensity()">
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/stock-price" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Apple Stocks">
    
    

            <span class="number">
                1
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/product-of-other-numbers" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Product of All Other Numbers">
    
    

            <span class="number">
                2
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/highest-product-of-3" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Highest Product of 3">
    
    

            <span class="number">
                3
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merging-ranges" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merging Meeting Times">
    
    

            <span class="number">
                4
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/coin" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Making Change">
    
    

            <span class="number">
                5
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/rectangular-love" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Rectangular Love">
    
    

            <span class="number">
                6
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/temperature-tracker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Temperature Tracker">
    
    

            <span class="number">
                7
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/balanced-binary-tree" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Balanced Binary Tree">
    
    

            <span class="number">
                8
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bst-checker" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Binary Search Tree Checker">
    
    

            <span class="number">
                9
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/second-largest-item-in-bst" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="2nd Largest Item in a Binary Search Tree">
    
    

            <span class="number">
                10
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/compress-url-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="MillionGazillion">
    
    

            <span class="number">
                11
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-in-ordered-set" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find in Ordered Set">
    
    

            <span class="number">
                12
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-rotation-point" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Rotation Point">
    
    

            <span class="number">
                13
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/inflight-entertainment" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Inflight Entertainment">
    
    

            <span class="number">
                14
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/nth-fibonacci" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Compute nth Fibonacci Number">
    
    

            <span class="number">
                15
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/cake-thief" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Cake Thief">
    
    

            <span class="number">
                16
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-scope" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="JavaScript Scope">
    
    

            <span class="number">
                17
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/js-whats-wrong" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="What&#39;s Wrong with This JavaScript?">
    
    

            <span class="number">
                18
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/queue-two-stacks" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Queue Two Stacks">
    
    

            <span class="number">
                19
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/largest-stack" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Largest Stack">
    
    

            <span class="number">
                20
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-unique-int-among-duplicates" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="The Stolen Breakfast Drone">
    
    

            <span class="number">
                21
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/delete-node" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Delete Node">
    
    

            <span class="number">
                22
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/linked-list-cycles" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Does This Linked List Have A Cycle?">
    
    

            <span class="number">
                23
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse A Linked List">
    
    

            <span class="number">
                24
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/kth-to-last-node-in-singly-linked-list" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Kth to Last Node in a Singly-Linked List">
    
    

            <span class="number">
                25
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-string-in-place" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse String in Place">
    
    

            <span class="number">
                26
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/reverse-words" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Reverse Words">
    
    

            <span class="number">
                27
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/matching-parens" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Parenthesis Matching">
    
    

            <span class="number">
                28
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/bracket-validator" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Bracket Validator">
    
    

            <span class="number">
                29
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/permutation-palindrome" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Permutation Palindrome">
    
    

            <span class="number">
                30
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/recursive-string-permutations" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Recursive String Permutations">
    
    

            <span class="number">
                31
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/top-scores" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Top Scores">
    
    

            <span class="number">
                32
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/which-appears-twice" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Which Appears Twice" aria-describedby="tooltip699980">
    
    

            <span class="number">
                33
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a><div class="tooltip fade bottom" role="tooltip" id="tooltip699980" style="top: 92px; left: 925.5px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Which Appears Twice</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/word-cloud" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Word Cloud Data" aria-describedby="tooltip545672">
    
    

            <span class="number">
                34
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a><div class="tooltip fade bottom in" role="tooltip" id="tooltip545672" style="top: 92px; left: 975.125px; display: block;"><div class="tooltip-arrow" style="left: 50%;"></div><div class="tooltip-inner">Word Cloud Data</div></div>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/shuffle" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="In-Place Shuffle">
    
    

            <span class="number">
                35
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper current                                                              unfinished                             ng-scope" ng-controller="NumberlineCurrentQuestionCtrl">

    
    
        <a href="https://www.interviewcake.com/question/single-rifle-check" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Single Riffle Shuffle">
    
    

            <span class="number">
                36
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-5-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 5-sided die">
    
    

            <span class="number">
                37
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/simulate-7-sided-die" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Simulate 7-sided die">
    
    

            <span class="number">
                38
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/two-egg-problem" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Two Egg Problem">
    
    

            <span class="number">
                39
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                done
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition">
    
    

            <span class="number">
                40
            </span>

            
                <i class="fa fa-check"></i>
            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-optimize-for-space-beast-mode" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Repeat, Space Edition BEAST MODE">
    
    

            <span class="number">
                41
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/find-duplicate-files" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Find Duplicate Files">
    
    

            <span class="number">
                42
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/merge-sorted-arrays" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="Merge Sorted Arrays">
    
    

            <span class="number">
                43
            </span>

            

    
    
        </a>
    
    
</div>

            
        
            
                <div class="numberline-number-wrapper 
                           
                                unfinished
                           ">

    
    
        <a href="https://www.interviewcake.com/question/url-shortener" title="" data-toggle="tooltip" data-placement="bottom" data-delay="{ &quot;show&quot;: 0, &quot;hide&quot;: 0}" data-original-title="URL Shortener">
    
    

            <span class="number">
                44
            </span>

            

    
    
        </a>
    
    
</div>

            
        
    </section>

    <div class="edge-fade left" ng-style="{left: edgeFadePositions.left + &#39;px&#39;}" style="left: 0px;"></div>
    <div class="edge-fade right" ng-style="{right: edgeFadePositions.right + &#39;px&#39;}" style="right: -160px;"></div>

    <div class="scroll-on-hover left" ng-mouseenter="scrollDirection = &#39;-&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.left === -edgeFadeWidth">
    </div>
    <div class="scroll-on-hover right ng-hide" ng-mouseenter="scrollDirection = &#39;+&#39;; toggleScroll()" ng-mouseleave="toggleScroll()" ng-hide="edgeFadePositions.right &lt;= -(edgeFadeWidth - 2)"> <!-- cuz chrome only scrolls to 2px less than it can -->
    </div>

</div>

        
    

    
        <div class="free-questions-left ng-hide" ng-show="currentUserSet &amp;&amp; !currentUser.is_full_access">


<p>
<span ng-show="currentUser.getNumFreeQuestionsLeft()&gt;0" class="ng-hide">

    <span ng-show="currentUser.getNumFreeQuestionsLeft()==1" class="ng-hide">Just </span>
    <strong class="num ng-binding">0</strong>

</span>
<span ng-show="currentUser.getNumFreeQuestionsLeft()==0">
    No
</span>

more free question<span ng-show="currentUser.getNumFreeQuestionsLeft() != 1">s</span>

left!
</p>



<a href="https://www.interviewcake.com/upgrade" class="btn btn-default btn-sm btn-rarr">
    Upgrade Now
</a>

</div>

    

    
    <div class="wrapper-hack" ng-init="slug=&#39;single-rifle-check&#39;">
<div class="card ng-scope" ng-class="{&#39;started&#39;: btnPresses.length &gt; 0}" ng-controller="CardCtrl">

    <div class="sections">
        
    <div>
<span class="question-data" data-name="Single Riffle Shuffle" data-meta_desc="Write a function to tell us if a deck of cards is a single riffle of two other halves." data-title="" data-meta_keywords="" data-weight="1" data-difficulty="5" data-num-hints="7" data-num-gotchas="3" ng-init="setNumHints(7); setNumGotchas(3); ">
</span>

<div class="section-wrapper ng-isolate-scope section-question" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="question">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="question" hide-heading=""></h3>

    <div class="section section-question" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
    <strong>I figured out how to get rich: online poker.</strong>
</p>

<p class="ng-scope">
    I <em>suspect</em> the online poker game I'm playing shuffles cards by doing a single "<span concept="riffle" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">riffle</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
    A "riffle" is the standard way people shuffle cards by hand. You know, the thing that looks like this:
</p>

<div class="diagram image">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/shuffle.jpg" class="img-responsive img-circle img-thumbnail">
</div>

<p>
    Here's a rigorous definition of the riffle algorithm:
</p>

<ol>
<li>
    cut the deck into halves <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-two"><span class="ng-scope">half2</span></span>
</li>
<li>
    grab a random number of cards from the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-one"><span class="ng-scope">half1</span></span> (could be 0, must be less than or equal to the number of cards left in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-one"><span class="ng-scope">half1</span></span>) and throw them into the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>
</li>
<li>
    grab a random number of cards from the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-two"><span class="ng-scope">half2</span></span> (could be 0, must be less than or equal to the number of cards left in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-two"><span class="ng-scope">half2</span></span>) and throw them into the <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>
</li>
<li>
    repeat steps 2-3 until <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__riffle__half-two"><span class="ng-scope">half2</span></span> are empty.
</li>
</ol>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__riffle__shuffled-deck": {"camel": "shuffledDeck", "snake": "shuffled_deck"}, "concept__riffle__half-two": {"default": "half2"}, "concept__riffle__half-one": {"default": "half1"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>."
</p>

<p class="ng-scope">
    To prove this, <strong>let's write a function to tell us if a full deck of cards <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> is a single riffle of two other halves <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span></strong>.
</p>

<p class="ng-scope">
    We'll represent a stack of cards as <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__a-standard-list"><span class="ng-scope">a list</span></span> of integers in the range <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>5</mn><mn>2</mn></mrow><annotation encoding="application/x-tex">1..52</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">5</span><span class="mord">2</span></span></span></span></span> (since there are <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>2</mn></mrow><annotation encoding="application/x-tex">52</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">5</span><span class="mord">2</span></span></span></span></span> distinct cards in a deck). <!--We could specify exactly which numbers map to which cards, but it doesn't really matter for this problem.-->
</p>

<p class="ng-scope">
    <small>
    Why do I care? A single riffle is <em>not</em> a completely random shuffle. If I'm right, I can make more informed bets and get rich and finally prove to my ex that I am not a "loser with an unhealthy cake obsession" (even though it's too late now because she let me go and she's never getting me back).
    </small>
</p>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-gotchas ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="gotchas">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="gotchas" hide-heading="">Gotchas</h3>

    <div class="section section-gotchas" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    <strong>Watch out for <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__index-out-of-bounds-errors"><span class="ng-scope">index out of bounds errors</span></span>!</strong> Will your function ever try to grab the 0th item from an empty <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__standard-list"><span class="ng-scope">list</span></span>, or the nth item from <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__a-standard-list"><span class="ng-scope">a list</span></span> with n elements (where the last index would be <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span></span></span></span></span>)?
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    We can do this in <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> additional space.
</p>
</div>
</div>
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="gotcha">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    <strong>Did you come up with a recursive solution?</strong> Keep in mind that you may be incurring a hidden space cost (probably <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>) in the <span concept="call-stack" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">call stack</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>call stack</strong> is what a program uses to keep track of what function it's currently running and what to do with that function's return value.
</p>

<p>
Whenever you call a function, a new <strong>frame</strong> gets pushed onto the call stack, which is popped off when the function returns. As functions call other functions, the stack gets taller. In recursive functions, the stack can get as tall as the number of times the function calls itself. This can cause a problem: the stack has a limited amount of space, and if it gets too big you can get a <strong>stack overflow</strong> error.
</p>

<!-- #illustrate -->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>! You can avoid this using an iterative approach.
</p>
</div>
</div>
</div>

    
</div>


<div class="section-wrapper ng-isolate-scope section-breakdown ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="breakdown">
    <h3 class="heading slide ng-binding ng-isolate-scope ng-hide" ng-show="shouldShow()" heading="breakdown" hide-heading="">Breakdown</h3>

    <div class="section section-breakdown" ng-class="getSectionClass()" ng-transclude="">
<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="1" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    How can we re-phrase this problem in terms of smaller subproblems?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="2" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    Breaking the problem into smaller subproblems will clearly involve reducing the size of at least one of our stacks of cards. So to start, let's try taking the first card out of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>.
</p>

<p class="ng-scope">
    What should be true of this card if <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> is a riffle of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="3" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
    If <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> is a riffle of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>, then the first card from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> should be either the same as the first card from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> or the same as the first card from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>.
</p>
<p class="ng-scope">
    If we're looking at our decks face-up, from above (so we only see the top card), this <em>could</em> be a single riffle:
</p>

<div class="diagram ng-scope">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/playing_cards__can_be_single_riffle.svg" height="210" width="160" alt="Looking at three face up stacks of cards, the top card of the shuffled deck is 10, the top card of half 1 is 7, and the top card of half 2 is 10.">


    
</div>


<p class="ng-scope">
    While this could not:
</p>

<div class="diagram ng-scope">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/playing_cards__cannot_be_single_riffle.svg" height="210" width="160" alt="Looking at three face up stacks of cards, the top card of the shuffled deck is 32, the top card of half 1 is 7, and the top card of half 2 is 10.">


    
</div>


<p class="ng-scope">
Now that we know the first card checks out, how do we get to our subproblem?
</p>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="4" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Let's "throw out" the top card from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> as well as the card it matched with from the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> or <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>. Those cards are now "accounted for."
</p>

<p class="ng-scope">
Now we're left with a smaller version of the original problem, which we can solve using the same approach! So we keep doing this over and over until we exhaust <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>. If we get to the end and each card "checks out," we return <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__single-rifle-check__true"><span class="ng-scope">True</span></span>.
</p>

<p class="ng-scope">
How do we implement this in code?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="5" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
Now that we have a problem that's the same as the original problem except smaller, our first thought might be to use recursion. All we need is a <span concept="base-case" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">base case</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>base case</strong> tells a recursive function when to stop. Otherwise it would keep calling itself indefinitely!
</p>

<p>
For example, we could add all numbers 1 to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__base-case__n"><span class="ng-scope">n</span></span> recursively like this:
</p>

<div code-block="concept__base-case__without-base-case" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">sum_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n <span class="token operator">+</span> sum_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
If we input 3 as our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__base-case__n"><span class="ng-scope">n</span></span>, this function will take 3, then add 2, then add 1, then add 0, then add -1, then add -2, etc forever (or until the program crashes).
</p>

<p>
We want to stop adding when <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__base-case__n"><span class="ng-scope">n</span></span> gets to 1. We'd say that our "base case" is <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="concept__base-case__n-less-than-or-equal-to-one"><span class="ng-scope">n &lt;= 1</span></span>, and our code might look like:
</p>

<div code-block="concept__base-case__with-base-case" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">sum_1_to_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># base case:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>

    <span class="token keyword">return</span> n <span class="token operator">+</span> sum_1_to_n<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Whenever writing a recursive function, be careful not to forget the base case!</strong>
</p>

<script type="text/javascript">
            var elTranslations = {"vars": {"concept__base-case__n": {"default": "n"}}, "code-blocks": {"concept__base-case__with-base-case": {"python": "def sum_1_to_n(n):\n\n    # base case:\n    if n &lt;= 1:\n        return 1\n\n    return n + sum_1_to_n(n-1)", "javascript": "function sum1ToN(n) {\n\n    // base case:\n    if (n &lt;= 1) return 1;\n\n    return n + sum1ToN(n-1);\n}", "ruby": "def sum_1_to_n(n)\n\n    # base case:\n    return 1 if n &lt;= 1\n\n    return n + sum_1_to_n(n-1)\nend", "cpp": "int sum1ToN(int n) \n{\n    // base case:\n    if (n &lt;= 1) return 1;\n\n    return n + sum1ToN(n-1);\n}", "java": "public int sum1ToN(int n) {\n\n    // base case:\n    if (n &lt;= 1) return 1;\n\n    return n + sum1ToN(n-1);\n}", "c": "int sum1ToN(int n)\n{\n    // base case:\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n + sum1ToN(n-1);\n}"}, "concept__base-case__without-base-case": {"python": "def sum_1_to_n(n):\n    return n + sum_1_to_n(n-1)", "javascript": "function sum1ToN(n) {\n    return n + sum1ToN(n-1);\n}", "ruby": "def sum_1_to_n(n)\n    return n + sum_1_to_n(n-1)\nend", "cpp": "int sum1ToN(int n) \n{\n    return n + sum1ToN(n-1);\n}", "java": "public int sum1ToN(int n) {\n    return n + sum1ToN(n-1);\n}", "c": "int sum1ToN(int n)\n{\n    return n + sum1ToN(n-1);\n}"}}, "code-inlines": {"concept__base-case__n-less-than-or-equal-to-one": {"default": "n &lt;= 1"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>. What's our base case?
</p>
</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="6" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
We stop when we run out of cards in our <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>. So that's our base case: when we've checked all cards in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>, we return <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__single-rifle-check__true"><span class="ng-scope">True</span></span> because we know all of the cards have been "accounted for."
</p>

<span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__slice-performance"><div code-block="question__single-rifle-check__is-single-riffle-recursive" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">is_single_riffle_recursive</span><span class="token punctuation">(</span>half1<span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># base case</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>shuffled_deck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token comment" spellcheck="true"># if the top of shuffled_deck is the same as the top of half1</span>
    <span class="token comment" spellcheck="true"># (making sure first that we have a top card in half1)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>half1<span class="token punctuation">)</span> <span class="token operator">and</span> half1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> shuffled_deck<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># take the top cards off half1 and shuffled_deck and recurse</span>
        <span class="token keyword">return</span> is_single_riffle_recursive<span class="token punctuation">(</span>half1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># if the top of shuffled_deck is the same as the top of half2</span>
    <span class="token keyword">elif</span> len<span class="token punctuation">(</span>half2<span class="token punctuation">)</span> <span class="token operator">and</span> half2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> shuffled_deck<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># take the top cards off half2 and shuffled_deck and recurse</span>
        <span class="token keyword">return</span> is_single_riffle_recursive<span class="token punctuation">(</span>half1<span class="token punctuation">,</span> half2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># top of shuffled_deck doesn't match top of half1 or half2</span>
    <span class="token comment" spellcheck="true"># so we know it's not a single riffle</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
This solution will work. But we can do better.
</p>

<p class="ng-scope">
<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a "premature optimization." But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying "I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?"
</p>

<p class="ng-scope">
Okay, back to our show. This function will take <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> additional space.
</p>

<p class="ng-scope">
Whaaaaat? Yeah. Take a look at this snippet:
</p>

<div code-block="question__single-rifle-check__why-n-two-time-and-space" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">return</span> is_single_riffle_recursive<span class="token punctuation">(</span>half1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
In particular this expression:
</p>

<div code-block="question__single-rifle-check__why-n-two-time-and-space-particular" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude="">half1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
That's a <span concept="slice" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">slice</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
<strong>Array slicing</strong> involves taking a subset from an array and <strong>allocating a new array with those elements</strong>.
</p>

<p>
In <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__c18n-language"><span class="ng-scope">Python</span></span> you can create a new <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__standard-list"><span class="ng-scope">list</span></span> of the elements in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__slice__my-array"><span class="ng-scope">my_list</span></span>, from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__slice__start-index"><span class="ng-scope">start_index</span></span> to <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__slice__end-index"><span class="ng-scope">end_index</span></span> (exclusive), like this:
</p>

<div code-block="concept__slice__slice-start-index-to-end-index-exclusive" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">my_list<span class="token punctuation">[</span>start_index<span class="token punctuation">:</span>end_index<span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
You can also get everything <em>after</em> <span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__slice__start-index"><span class="ng-scope">start_index</span></span> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__how-to-get-everything-after-start-index"><span class="ng-scope">by just omitting </span><span class="ic-variable ng-isolate-scope" ng-transclude="" var="concept__slice__end-index"><span class="ng-scope">end_index</span></span></span>:
</p>

<div code-block="concept__slice__slice-start-index-to-end" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">my_list<span class="token punctuation">[</span>start_index<span class="token punctuation">:</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
<strong>Careful: there's a hidden time and space cost here!</strong> It's tempting to think of slicing as just "getting elements," but in reality you are:
</p>

<ol>
<li>
allocating a new <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__standard-list"><span class="ng-scope">list</span></span>
</li>
<li>
<em>copying</em> the elements from the original <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__standard-list"><span class="ng-scope">list</span></span> to the new <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__standard-list"><span class="ng-scope">list</span></span>
</li>
</ol>

<p>
This takes <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of elements in the <em>resulting</em> <span class="ic-words ng-isolate-scope" ng-transclude="" words="concept__slice__standard-list"><span class="ng-scope">list</span></span>.
</p>

<p>
That's a bit easier to see when you save the result of the slice to a variable:
</p>

<div code-block="concept__slice__slice-to-variable" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude="">tail_of_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
But a bit harder to see when you don't save the result of the slice to a variable:
</p>

<div code-block="concept__slice__return-slice" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">return</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># whoops, I just spent O(n) time and space!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
<div code-block="concept__slice__for-item-in-slice" language="python" translation-highlighting="dynamic" class="ng-isolate-scope"><pre class=" language-python">  <code class=" language-python" ng-transclude=""><span class="token keyword">for</span> item <span class="token keyword">in</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># whoops, I just spent O(n) time and space!</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p>
So keep an eye out. Slice wisely.
</p>

<script type="text/javascript">
            var elTranslations = {"words": {"concept__slice__c18n-language": {"ruby": "Ruby", "java": "Java", "cpp": "C++ (beta)", "python": "Python", "c": "C (beta)", "javascript": "JavaScript"}, "concept__slice__how-to-get-everything-after-start-index": {"ruby": "using <span math=\"\">-1</span>", "java": "using the array's length", "cpp": "using vector's end iterator", "python": "by just omitting <span var=\"end-index\">end_index</span>", "default": "by just omitting <span var=\"end-index\"></span>", "c": "by just omitting <span var=\"end-index\">endIndex</span>", "javascript": "by just omitting <span var=\"end-index\">endIndex</span>"}, "concept__slice__standard-list": {"ruby": "array", "objectivec": "array", "cpp": "vector", "default": "list", "csharp": "list", "c": "array", "php": "array", "javascript": "array", "swift": "array", "java": "array", "python": "list"}}, "vars": {"concept__slice__my-array": {"python": "my_list", "camel": "myArray", "cpp": "myVector", "snake": "my_array"}, "concept__slice__start-index": {"camel": "startIndex", "snake": "start_index"}, "concept__slice__end-index": {"camel": "endIndex", "snake": "end_index"}}, "code-blocks": {"concept__slice__slice-start-index-to-end": {"ruby": "my_array[start_index..-1]", "java": "Arrays.copyOfRange(myArray, startIndex, myArray.length);", "cpp": "vector&lt;int>(myVector.begin() + startIndex, myVector.end());", "python": "my_list[start_index:]", "c": {"warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE.", "code": "vector&lt;int>(myVector.begin() + startIndex, myVector.end());"}, "javascript": "myArray.slice(startIndex);"}, "concept__slice__slice-to-variable": {"ruby": "tail_of_array = my_array[1..-1]", "java": "int[] tailOfArray = Arrays.copyOfRange(myArray, 1, myArray.length);", "cpp": "vector&lt;int> tailOfVector(myVector.begin() + 1, myVector.end());", "python": "tail_of_list = my_list[1:]", "c": {"warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE.", "code": "vector&lt;int> tailOfVector(myVector.begin() + 1, myVector.end());"}, "javascript": "var tailOfArray = myArray.slice(1);"}, "concept__slice__return-slice": {"ruby": "return my_array[1..-1]\n# whoops, I just spent O(n) time and space!", "java": "return Arrays.copyOfRange(myArray, 1, myArray.length);\n// whoops, I just spent O(n) time and space!", "cpp": "return vector&lt;int>(myVector.begin() + 1, myVector.end());\n// whoops, I just spent O(n) time and space!", "python": "return my_list[1:]\n# whoops, I just spent O(n) time and space!", "c": {"warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE.", "code": "return vector&lt;int>(myVector.begin() + 1, myVector.end());\n// whoops, I just spent O(n) time and space!"}, "javascript": "return myArray.slice(1);\n// whoops, I just spent O(n) time and space!"}, "concept__slice__slice-start-index-to-end-index-exclusive": {"ruby": "my_array[start_index...end_index]", "java": "Arrays.copyOfRange(myArray, startIndex, endIndex);", "cpp": "vector&lt;int>(myVector.begin() + startIndex, myVector.begin() + endIndex);", "python": "my_list[start_index:end_index]", "c": {"warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE.", "code": "vector&lt;int>(myVector.begin() + startIndex, myVector.begin() + endIndex);"}, "javascript": "myArray.slice(startIndex, endIndex);"}, "concept__slice__for-item-in-slice": {"ruby": "my_array[1..-1].each do |item|\n    # whoops, I just spent O(n) time and space!\nend", "java": "for (int item : Arrays.copyOfRange(myArray, 1, myArray.length)) {\n    // whoops, I just spent O(n) time and space!\n}", "cpp": "for(int item: vector&lt;int>(myVector.begin() + 1, myVector.end())) {\n    // whoops, I just spent O(n) time and space!\n}", "python": "for item in my_list[1:]:\n    # whoops, I just spent O(n) time and space!", "c": {"warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE.", "code": "for(int item: vector&lt;int>(myVector.begin() + 1, myVector.end())) {\n    // whoops, I just spent O(n) time and space!\n}"}, "javascript": "myArray.slice(1).forEach(function(item) {\n    // whoops, I just spent O(n) time and space!\n});"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>
</div>

</span>
</span>, and it costs <span complexity="m" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></span></span> time and space, where <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> is the size of the resulting <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span>. That's going to determine our overall time and space cost here—the rest of the work we're doing is constant space and time.
</p>

<p class="ng-scope">
In our recursing we'll build up <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> frames on the <span concept="call-stack" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">call stack</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>call stack</strong> is what a program uses to keep track of what function it's currently running and what to do with that function's return value.
</p>

<p>
Whenever you call a function, a new <strong>frame</strong> gets pushed onto the call stack, which is popped off when the function returns. As functions call other functions, the stack gets taller. In recursive functions, the stack can get as tall as the number of times the function calls itself. This can cause a problem: the stack has a limited amount of space, and if it gets too big you can get a <strong>stack overflow</strong> error.
</p>

<!-- #illustrate -->
<script type="text/javascript"></script>
</div>
</div>

</span>
</span>. Each of those frames will hold a <em>different slice</em> of our original <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> (and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>, though we only slice one of them in each recursive call).
</p>

<p class="ng-scope">
So, what's the total time and space cost of all our slices?
</p>

<p class="ng-scope">
If <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> has <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> items to start, taking our first slice takes <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span></span></span></span></span> time and space (plus half that, since we're also slicing one of our halves—but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">2</span></span></span></span></span> time and space. Etcetera.
</p>

<p class="ng-scope">
So our total time and space cost for slicing comes to:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
(n - 1) + (n - 2) + ... + 2 + 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">2</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>

<p class="ng-scope">
This is a <span concept="summation-1-to-n" class="ng-isolate-scope"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude=""><span class="ng-scope">common series</span></span>
        <span class="show-concept-icon">↴</span>
    </span>

    <!-- ngInclude: conceptPartialUrl --><div ng-show="showConcept" class="slide concept-explanation ng-scope ng-hide" ng-include="conceptPartialUrl"><div class="ng-scope">
<p>
The <strong>sum of integers <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">1..n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathit">n</span></span></span></span></span></strong> is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≈</mo><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\approx \frac{n^2}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.97032em;"></span><span class="strut bottom" style="height: 1.31532em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mrel">≈</span><span class="minner reset-textstyle textstyle uncramped"><span class="mfrac"><span class="vlist"><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, which is <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>
</p>

<!--
<p>
This actually comes up quite a bit. For example:
</p>

<div code-block>
def get_possible_pairs_unordered(list_of_people):
    '''
    get all possible pairs from a list of people
    order doesn't matter. in other words, we don't want to count
    (alice, bob) and (bob, alice) as separate possible pairs-
    we just want to count them as one possible pair
    '''

    possible_pairs_unordered = []
    for id, first_person in list_of_people.iteritems():
        for second_person in list_of_people[id:]:
            possible_pairs_unordered.append((first_person, second_person))
    return possible_pairs_unordered

</div>

<p>
Here we have two nested loops, which we know is usually <span complexity="n^2"></span>. But the inner loop only looks at people "past" the person the outer loop is on, so that we avoid counting the same pair twice. So early on our inner loop does close to <span math>n</span> operations...but in the last iteration of our outer loop, the inner loop doesn't even run! And in the second-to-last iteration of the outer loop, the inner loop only runs once, etc.
</p>

<p>
So if we look at this starting from the beginning, it feels like the inner loop runs <span complexity="n"></span> times, for a total of <span complexity="n^2"></span> runtime. But if you look at it starting from the end, it feels like the inner loop runs a constant number of times, for a total of <span complexity="n"></span> runtime. Which is it??
</p>
-->

<p>
Series' like this actually come up quite a bit:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">
1 + 2 + 3 + ... + (n-1) + n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord">1</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">3</span><span class="mbin">+</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit">n</span></span></span></span></span>

<p>
Or, equivalently, the other way around:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mn>3</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
n + (n-1) + ... + 3 + 2 + 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mbin">+</span><span class="mord">3</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>

<p>
And sometimes the last <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is omitted, but as we'll see it doesn't affect the big o:
</p>

<span class="ic-math ng-isolate-scope block" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math="" block=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mn>3</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
(n-1) + (n-2) + ... + 3 + 2 + 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">2</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mbin">+</span><span class="mord">3</span><span class="mbin">+</span><span class="mord">2</span><span class="mbin">+</span><span class="mord">1</span></span></span></span></span>

<p>
Let's draw this out. Let's say <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">n=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord">1</span><span class="mord">0</span></span></span></span></span>, so we'll represent <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span></span></span></span></span> as nine circles:
</p>

<div class="diagram">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/summation_1_to_n__n_minus_1_circles.svg" height="31" width="215" alt="A row of 9 circles.">


    
</div>


<p>
We can continue the pattern with <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">2</span></span></span></span></span>
</p>

<div class="diagram">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/summation_1_to_n__n_minus_2_circles.svg" height="48" width="215" alt="2 rows of cirlces: 9 on top, 8 on the bottom.">


    
</div>


<p>
And <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n-3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">3</span></span></span></span></span>, <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">n-4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">4</span></span></span></span></span>, etc, all the way down to 1:
</p>

<div class="diagram">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/summation_1_to_n__circles_down_to_1.svg" height="159" width="215" alt="9 rows of circles: 9 on top, and one fewer circle in each row, down to 1 circle on the bottom.">


    
</div>


<p>
Notice both the top and right "sides" of our set of circles have <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span></span></span></span></span> items:
</p>

<div class="diagram">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/summation_1_to_n__n_minus_1_sides.svg" height="177" width="215" alt="In a right triangle formed by 9 rows of cirlces (9 in the top row, down to 1 in the bottom row) the top and left side of the triangle are 9 circles long.">


    
</div>


<p>
In fact, we could imagine our circles inside of a square with sides of length n-1:
</p>

<div class="diagram">
    <img src="./36.Single Riffle Shuffle _ Interview Cake_files/summation_1_to_n__square.svg" height="181" width="215" alt="A square around 9 rows of cirlces (9 in the top row, down to 1 in the bottom row) so the square is 9 by 9 circles.">


    
</div>


<p>
Notice that we've filled in just about half of the square!
</p>

<p>
Of course, the area of the square is <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>∗</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(n-1) * (n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>, which is <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>. Our total number of circles is about half of that, so <span complexity="n^2/2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></span></span>, which is still <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>. Remember: with <a href="https://www.interviewcake.com/big-o-notation-time-and-space-complexity">big O notation</a>, we throw out the constants.
</p>

<p>
If we had started from <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> instead of <span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord">1</span></span></span></span></span> we'd have <span complexity="n^2 + n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2 + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span>, which again is still <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> since in big O notation we drop the less significant terms.
</p>
<script type="text/javascript"></script>
</div>
</div>

</span>
</span> that turns out to be <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span>.
</p>

<p class="ng-scope">
We can do better than this <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span class="ic-words ng-isolate-scope" ng-transclude="" words="standard-list"><span class="ng-scope">list</span></span>:
</p>

<div code-block="question__single-rifle-check__is-single-riffle-recursive-optimized" language="python" translation-highlighting="static" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">is_single_riffle_recursive_optimized</span><span class="token punctuation">(</span>half1<span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">,</span> shuffled_deck_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> half1_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> half2_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># base case we've hit the end of shuffled_deck</span>
    <span class="token keyword">if</span> shuffled_deck_index <span class="token operator">==</span> len<span class="token punctuation">(</span>shuffled_deck<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token comment" spellcheck="true"># if we still have cards in half1</span>
    <span class="token comment" spellcheck="true"># and the "top" card in half1 is the same</span>
    <span class="token comment" spellcheck="true"># as the top card in shuffled_deck</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>half1_index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>half1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> \
            half1<span class="token punctuation">[</span>half1_index<span class="token punctuation">]</span> <span class="token operator">==</span> shuffled_deck<span class="token punctuation">[</span>shuffled_deck_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
        half1_index <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># if we still have cards in half2</span>
    <span class="token comment" spellcheck="true"># and the "top" card in half2 is the same</span>
    <span class="token comment" spellcheck="true"># as the top card in shuffled_deck</span>
    <span class="token keyword">elif</span> <span class="token punctuation">(</span>half2_index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>half2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> \
            half2<span class="token punctuation">[</span>half2_index<span class="token punctuation">]</span> <span class="token operator">==</span> shuffled_deck<span class="token punctuation">[</span>shuffled_deck_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
        half2_index <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment" spellcheck="true"># if the top card in shuffled_deck doesn't match the top</span>
    <span class="token comment" spellcheck="true"># card in half1 or half2, this isn't a single riffle.</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token comment" spellcheck="true"># the current card in shuffled_deck has now been "accounted for"</span>
    <span class="token comment" spellcheck="true"># so move on to the next one</span>
    shuffled_deck_index <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> is_single_riffle_recursive_optimized<span class="token punctuation">(</span>half1<span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">,</span> shuffled_deck_index<span class="token punctuation">,</span> half1_index<span class="token punctuation">,</span> half2_index<span class="token punctuation">)</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language ng-hide" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding" ng-show="staticLanguage" ng-bind="onlyLanguage">Python</span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>

<p class="ng-scope">
So now we're down to <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time, but we're still taking <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span>.
</p></span>

</div>
</div>

<div class="note slide ng-isolate-scope ng-hide" ng-show="shouldShow()" note="" number="7" type="hint">
    <div class="note-content" ng-transclude="">
<p class="ng-scope">
What's happening in each iteration of our recursive function? Sometimes we're taking a card off of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and sometimes we're taking a card off of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>, but we're <em>always</em> taking a card off of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>.
</p>

<p class="ng-scope">
So what if instead of taking cards off of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> 1-by-1, we <em>iterated over them</em>?
</p>
</div>
</div>

</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-solution ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="solution">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="solution" hide-heading="">Solution</h3>

    <div class="section section-solution" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
We walk through <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>, seeing if each card <em>so far</em> could have come from a riffle of the other two halves. To check this, we:
</p>

<ol class="ng-scope">
<li>
Keep pointers to the current index in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span>, <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>, and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>.
</li>
<li>
Walk through <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> from beginning to end.
</li>
<li>
If the current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__card"><span class="ng-scope">card</span></span> in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> is the same as the top card from <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span>, increment <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one-index"><span class="ng-scope">half1_index</span></span> and keep going. This can be thought of as "throwing out" the top cards of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> and <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span>, reducing the problem to the remaining cards in the stacks.
</li>
<li>
Same as above with half2.
</li>
<li>
If the current <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__card"><span class="ng-scope">card</span></span> isn't the same as the card at the top of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-one"><span class="ng-scope">half1</span></span> or <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__half-two"><span class="ng-scope">half2</span></span>, we know we don't have a single riffle.
</li>
<li>
If we make it all the way to the end of <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> and each card checks out, we know we do have a single riffle.
</li>
</ol>

<div code-block="question__single-rifle-check__solution" language="python" translation-highlighting="dynamic" class="ng-scope ng-isolate-scope"><pre class="  language-python">  <code class="  language-python" ng-transclude=""><span class="token keyword">def</span> <span class="token function">is_single_riffle</span><span class="token punctuation">(</span>half1<span class="token punctuation">,</span> half2<span class="token punctuation">,</span> shuffled_deck<span class="token punctuation">)</span><span class="token punctuation">:</span>
    half1_index <span class="token operator">=</span> <span class="token number">0</span>
    half2_index <span class="token operator">=</span> <span class="token number">0</span>
    half1_max_index <span class="token operator">=</span> len<span class="token punctuation">(</span>half1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    half2_max_index <span class="token operator">=</span> len<span class="token punctuation">(</span>half2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">for</span> card <span class="token keyword">in</span> shuffled_deck<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># if we still have cards in half1</span>
        <span class="token comment" spellcheck="true"># and the "top" card in half1 is the same</span>
        <span class="token comment" spellcheck="true"># as the top card in shuffled_deck</span>
        <span class="token keyword">if</span> half1_index <span class="token operator">&lt;=</span> half1_max_index <span class="token operator">and</span> \
                card <span class="token operator">==</span> half1<span class="token punctuation">[</span>half1_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            half1_index <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># if we still have cards in half2</span>
        <span class="token comment" spellcheck="true"># and the "top" card in half2 is the same</span>
        <span class="token comment" spellcheck="true"># as the top card in shuffled_deck</span>
        <span class="token keyword">elif</span> half2_index <span class="token operator">&lt;=</span> half2_max_index <span class="token operator">and</span> \
                card <span class="token operator">==</span> half2<span class="token punctuation">[</span>half2_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            half2_index <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token comment" spellcheck="true"># if the top card in shuffled_deck doesn't match the top</span>
        <span class="token comment" spellcheck="true"># card in half1 or half2, this isn't a single riffle.</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token comment" spellcheck="true"># all cards in shuffled_deck have been "accounted for"</span>
    <span class="token comment" spellcheck="true"># so this is a single riffle!</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span></code>
</pre>
<span class="warning-message ng-binding ng-hide" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage">

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Ruby">Ruby</option><option value="2" label="Java">Java</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option></select>

</div>
<span class="only-content-language ng-binding ng-hide" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</div>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-complexity ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="complexity">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="complexity" hide-heading="">Complexity</h3>

    <div class="section section-complexity" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
    <span complexity="n" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></span></span></span> time and <span complexity="1" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></span></span> additional space.
</p>
<p class="ng-scope">
<small>
    Becky if you're reading this I didn't really mean what I said in the problem statement. It's just that things have been hard lately and anyway if you'll just give me another chance I promise it won't be like last time. I'm a wreck without you. Like a collapsed soufflé. Please Becky. <!-- i love you -->
</small>
</p>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-bonus ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="bonus">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="bonus" hide-heading="">Bonus</h3>

    <div class="section section-bonus" ng-class="getSectionClass()" ng-transclude="">
<ol class="ng-scope">
<li>
    This assumes <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> contains all 52 cards. What if we can't trust this (e.g. some cards are being secretly <em>removed</em> by the shuffle)?
</li>
<li>
    This assumes each number in <span class="ic-variable ng-isolate-scope" ng-transclude="" var="question__single-rifle-check__shuffled-deck"><span class="ng-scope">shuffled_deck</span></span> is unique. How can we adapt this to rifling <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__standard-list"><span class="ng-scope">list</span></span>s of random integers with <em>potential repeats</em>?
</li>
<li>
    Our solution returns <span class="ic-code-inline ng-isolate-scope" ng-transclude="" code-inline="question__single-rifle-check__true"><span class="ng-scope">True</span></span> if you just cut the deck—take one half and put it on top of the other. While that <em>technically</em> meets the definition of a riffle, what if you wanted to <em>ensure</em> that some mixing of the two halves occurred?
</li>
</ol>
</div>

    
</div>

<div class="section-wrapper ng-isolate-scope section-learnings ng-hide" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()" section="learnings">
    <h3 class="heading slide ng-binding ng-isolate-scope" ng-show="shouldShow()" heading="learnings" hide-heading="">What We Learned</h3>

    <div class="section section-learnings" ng-class="getSectionClass()" ng-transclude="">
<p class="ng-scope">
If you read the whole breakdown section, you might have noticed that we started with a recursive function that looked simple but turned out to cost <span complexity="n^2" class="ng-isolate-scope"><span class="complexity"><span class="ic-math ng-isolate-scope" ng-class="{&#39;block&#39;: isBlock()}" ng-transclude="" math=""><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></span></span> time and space because each recursive step <em>created its own new "slice"</em> of the input <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__standard-list"><span class="ng-scope">list</span></span>. If you missed that part, go back and take a look.
</p>

<p class="ng-scope">
Be careful of the hidden time and space costs of <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__standard-list"><span class="ng-scope">list</span></span> slicing! Consider tracking <span class="ic-words ng-isolate-scope" ng-transclude="" words="question__single-rifle-check__standard-list"><span class="ng-scope">list</span></span> indices "by hand" instead (as we do in our final solution).
</p>
</div>

    
</div>

<script type="text/javascript">
            var elTranslations = {"code-inlines": {"question__single-rifle-check__true": {"default": "true", "python": "True"}}, "code-blocks": {"question__single-rifle-check__is-single-riffle-recursive": {"javascript": {"code": "function isSingleRiffleRecursive(half1, half2, shuffledDeck) {\n\n    // base case\n    if (shuffledDeck.length === 0) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1.length && half1[0] === shuffledDeck[0]) {\n\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1.slice(1), half2, shuffledDeck.slice(1));\n\n    // if the top of shuffledDeck is the same as the top of half2\n    } else if (half2.length && half2[0] === shuffledDeck[0]) {\n\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, half2.slice(1), shuffledDeck.slice(1));\n\n    // top of shuffledDeck doesn't match top of half1 or half2\n    // so we know it's not a single riffle\n    } else {\n        return false;\n    }\n}", "tests": "testInputAndOutputLists(isSingleRiffleRecursive, tests, true);"}, "python": {"code": "def is_single_riffle_recursive(half1, half2, shuffled_deck):\n\n    # base case\n    if len(shuffled_deck) == 0:\n        return True\n\n    # if the top of shuffled_deck is the same as the top of half1\n    # (making sure first that we have a top card in half1)\n    if len(half1) and half1[0] == shuffled_deck[0]:\n\n        # take the top cards off half1 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1[1:], half2, shuffled_deck[1:])\n\n    # if the top of shuffled_deck is the same as the top of half2\n    elif len(half2) and half2[0] == shuffled_deck[0]:\n\n        # take the top cards off half2 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1, half2[1:], shuffled_deck[1:])\n\n    # top of shuffled_deck doesn't match top of half1 or half2\n    # so we know it's not a single riffle\n    else:\n        return False", "tests": "testInputAndOutputLists(is_single_riffle_recursive, tests, True)"}, "ruby": {"code": "def is_single_riffle_recursive(half1, half2, shuffled_deck)\n\n    # base case\n    if shuffled_deck.length == 0\n        return true\n    end\n\n    # if the top of shuffled_deck is the same as the top of half1\n    # (making sure first that we have a top card in half1)\n    if half1.length > 0 and half1[0] == shuffled_deck[0]\n\n        # take the top cards off half1 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1[1..-1], half2, shuffled_deck[1..-1])\n\n    # if the top of shuffled_deck is the same as the top of half2\n    elsif half2.length > 0 and half2[0] == shuffled_deck[0]\n\n        # take the top cards off half2 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1, half2[1..-1], shuffled_deck[1..-1])\n\n    # top of shuffled_deck doesn't match top of half1 or half2\n    # so we know it's not a single riffle\n    else\n        return false\n    end\nend", "tests": "testInputAndOutputLists(method(:is_single_riffle_recursive), tests, true)"}, "c": {"code": "vector&lt;int> removeTopCard(const vector&lt;int>& cards)\n{\n    return vector&lt;int>(++cards.begin(), cards.end());\n}\n\nbool isSingleRiffleRecursive(\n    const vector&lt;int>& half1,\n    const vector&lt;int>& half2,\n    const vector&lt;int>& shuffledDeck)\n{\n    // base case\n    if (shuffledDeck.empty()) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (!half1.empty() && half1[0] == shuffledDeck[0]) {\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));\n    }\n    else if (!half2.empty() && half2[0] == shuffledDeck[0]) {\n        // if the top of shuffledDeck is the same as the top of half2\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, removeTopCard(half2), removeTopCard(shuffledDeck));\n    }\n    else {\n        // top of shuffledDeck doesn't match top of half1 or half2\n        // so we know it's not a single riffle\n        return false;\n    }\n}", "tests": "for (size_t i = 0; i < decks.size(); ++i) {\n    assertEqual(isSingleRiffleRecursive(decks[i][0], decks[i][1], decks[i][2]),\n        static_cast<bool>(expectedOutputs[i])); // have to cast due to vector<bool>\n}", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "java": {"code": "public int[] removeTopCard(int[] cards) {\n    return Arrays.copyOfRange(cards, 1, cards.length);\n}\n\npublic boolean isSingleRiffleRecursive(int[] half1, int[] half2, int[] shuffledDeck) {\n\n    // base case\n    if (shuffledDeck.length == 0) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1.length > 0 && half1[0] == shuffledDeck[0]) {\n\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));\n\n    // if the top of shuffledDeck is the same as the top of half2\n    } else if (half2.length > 0 && half2[0] == shuffledDeck[0]) {\n\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, removeTopCard(half2), removeTopCard(shuffledDeck));\n\n    // top of shuffledDeck doesn't match top of half1 or half2\n    // so we know it's not a single riffle\n    } else {\n        return false;\n    }\n}", "tests": "for (int n = 0; n < decks.length; n++) {\n    assertEqual(t.isSingleRiffleRecursive(decks[n][0], decks[n][1], decks[n][2]), expectedOutputs[n]);\n}"}, "cpp": {"code": "vector&lt;int> removeTopCard(const vector&lt;int>& cards)\n{\n    return vector&lt;int>(++cards.begin(), cards.end());\n}\n\nbool isSingleRiffleRecursive(\n    const vector&lt;int>& half1,\n    const vector&lt;int>& half2,\n    const vector&lt;int>& shuffledDeck)\n{\n    // base case\n    if (shuffledDeck.empty()) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (!half1.empty() && half1[0] == shuffledDeck[0]) {\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));\n    }\n    else if (!half2.empty() && half2[0] == shuffledDeck[0]) {\n        // if the top of shuffledDeck is the same as the top of half2\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, removeTopCard(half2), removeTopCard(shuffledDeck));\n    }\n    else {\n        // top of shuffledDeck doesn't match top of half1 or half2\n        // so we know it's not a single riffle\n        return false;\n    }\n}", "tests": "for (size_t i = 0; i < decks.size(); ++i) {\n    assertEqual(isSingleRiffleRecursive(decks[i][0], decks[i][1], decks[i][2]),\n        static_cast<bool>(expectedOutputs[i])); // have to cast due to vector<bool>\n}"}}, "setup": {"javascript": "var tests = [\n    [[[1, 2, 4], [3, 5, 6], [1, 2, 3, 4, 5, 6]], true],\n    [[[2], [7, 5], [7, 2, 5]], true],\n    [[[1, 5], [2, 7], [7, 4, 5]], false],\n    [[[1], [7, 8], [8, 1, 7]], false],\n];", "python": "tests = [\n    [[[1, 2, 4], [3, 5, 6], [1, 2, 3, 4, 5, 6]], True],\n    [[[2], [7, 5], [7, 2, 5]], True],\n    [[[1, 5], [2, 7], [7, 4, 5]], False],\n    [[[1], [7, 8], [8, 1, 7]], False],\n]", "ruby": "tests = [\n    [[[1, 2, 4], [3, 5, 6], [1, 2, 3, 4, 5, 6]], true],\n    [[[2], [7, 5], [7, 2, 5]], true],\n    [[[1, 5], [2, 7], [7, 4, 5]], false],\n    [[[1], [7, 8], [8, 1, 7]], false],\n]", "c": "const int TESTS_NUM = 4;\nint inputs[4][3][6] = {\n    { {1, 2, 4}, {3, 5, 6}, {1, 2, 3, 4, 5, 6} },\n    { {2}, {7, 5}, {7, 2, 5} },\n    { {1, 5}, {2, 7}, {7, 4, 5} },\n    { {1}, {7, 8}, {8, 1, 7} }\n};\nint sizes[4][3] = {\n    {3, 3, 6},\n    {1, 2, 3},\n    {2, 2, 3},\n    {1, 2, 3}\n};\nint expected[4] = {1, 1, 0, 0};", "java": "int[][][] decks = new int[][][]{\n    { {1, 2, 4}, {3, 5, 6}, {1, 2, 3, 4, 5, 6} },\n    { {2}, {7, 5}, {7, 2, 5} },\n    { {1, 5}, {2, 7}, {7, 4, 5} },\n    { {1}, {7, 8}, {8, 1, 7} },\n};\n\nboolean[] expectedOutputs = new boolean[]{\n    true,\n    true,\n    false,\n    false,\n};", "cpp": "const vector<vector<vector<int>>> decks {\n    vector<vector<int>> {\n        vector<int> {1, 2, 4},\n        vector<int> {3, 5, 6},\n        vector<int> {1, 2, 3, 4, 5, 6}\n    },\n    vector<vector<int>> {\n        vector<int> {2},\n        vector<int> {7, 5},\n        vector<int> {7, 2, 5}\n    },\n    vector<vector<int>> {\n        vector<int> {1, 5},\n        vector<int> {2, 7},\n        vector<int> {7, 4, 5}\n    },\n    vector<vector<int>> {\n        {1},\n        vector<int> {7, 8},\n        vector<int> {8, 1, 7}\n    },\n};\n\nconst vector<bool> expectedOutputs {\n    true,\n    true,\n    false,\n    false,\n};"}, "question__single-rifle-check__solution": {"javascript": {"code": "function isSingleRiffle(half1, half2, shuffledDeck) {\n    var half1Index = 0;\n    var half2Index = 0;\n    var half1MaxIndex = half1.length - 1;\n    var half2MaxIndex = half2.length - 1;\n\n    for (var i = 0; i &lt; shuffledDeck.length; i++) {\n        var card = shuffledDeck[i];\n\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        if (half1Index &lt;= half1MaxIndex &&\n                card === half1[half1Index]) {\n            half1Index++;\n\n        // if we still have cards in half2\n        // and the \"top\" card in half2 is the same\n        // as the top card in shuffledDeck\n        } else if (half2Index &lt;= half2MaxIndex &&\n                card === half2[half2Index]) {\n            half2Index++;\n\n        // if the top card in shuffledDeck doesn't match the top\n        // card in half1 or half2, this isn't a single riffle.\n        } else {\n            return false;\n        }\n    }\n\n    // all cards in shuffledDeck have been \"accounted for\"\n    // so this is a single riffle!\n    return true;\n}", "tests": "testInputAndOutputLists(isSingleRiffle, tests, true);"}, "python": {"code": "def is_single_riffle(half1, half2, shuffled_deck):\n    half1_index = 0\n    half2_index = 0\n    half1_max_index = len(half1) - 1\n    half2_max_index = len(half2) - 1\n\n    for card in shuffled_deck:\n        # if we still have cards in half1\n        # and the \"top\" card in half1 is the same\n        # as the top card in shuffled_deck\n        if half1_index &lt;= half1_max_index and \\\n                card == half1[half1_index]:\n            half1_index += 1\n\n        # if we still have cards in half2\n        # and the \"top\" card in half2 is the same\n        # as the top card in shuffled_deck\n        elif half2_index &lt;= half2_max_index and \\\n                card == half2[half2_index]:\n            half2_index += 1\n\n        # if the top card in shuffled_deck doesn't match the top\n        # card in half1 or half2, this isn't a single riffle.\n        else:\n            return False\n\n    # all cards in shuffled_deck have been \"accounted for\"\n    # so this is a single riffle!\n    return True", "tests": "testInputAndOutputLists(is_single_riffle, tests, True)"}, "ruby": {"code": "def is_single_riffle(half1, half2, shuffled_deck)\n    half1_index = 0\n    half2_index = 0\n    half1_max_index = half1.length - 1\n    half2_max_index = half2.length - 1\n\n    shuffled_deck.each do |card|\n        # if we still have cards in half1\n        # and the \"top\" card in half1 is the same\n        # as the top card in shuffled_deck\n        if half1_index &lt;= half1_max_index and \\\n                card == half1[half1_index]\n            half1_index += 1\n\n        # if we still have cards in half2\n        # and the \"top\" card in half2 is the same\n        # as the top card in shuffled_deck\n        elsif half2_index &lt;= half2_max_index and \\\n                card == half2[half2_index]\n            half2_index += 1\n\n        # if the top card in shuffled_deck doesn't match the top\n        # card in half1 or half2, this isn't a single riffle.\n        else\n            return false\n        end\n    end\n\n    # all cards in shuffled_deck have been \"accounted for\"\n    # so this is a single riffle!\n    return true\nend", "tests": "testInputAndOutputLists(method(:is_single_riffle), tests, true)"}, "c": {"code": "int isSingleRiffle(\n    int* half1,\n    int half1Size,\n    int* half2,\n    int half2Size,\n    int* shuffledDeck,\n    int shuffledDeckSize\n    )\n{\n    size_t i;\n    size_t half1Index = 0;\n    size_t half2Index = 0;\n    size_t half1MaxIndex = half1Size - 1;\n    size_t half2MaxIndex = half2Size - 1;\n\n    for (i = 0; i &lt; shuffledDeckSize; ++i) {\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        if (half1Index &lt;= half1MaxIndex && shuffledDeck[i] == half1[half1Index]) {\n            ++half1Index;\n        } else if (half2Index &lt;= half2MaxIndex && shuffledDeck[i] == half2[half2Index]) {\n            // if we still have cards in half2\n            // and the \"top\" card in half2 is the same\n            // as the top card in shuffledDeck\n            ++half2Index;\n        } else {\n            // if the top card in shuffledDeck doesn't match the top\n            // card in half1 or half2, this isn't a single riffle.\n            return 0;\n        }\n    }\n\n    // all cards in shuffledDeck have been \"accounted for\"\n    // so this is a single riffle!\n    return 1;\n}", "tests": "for (int t = 0; t < TESTS_NUM; t++) {\n    int actual = isSingleRiffle(\n            inputs[t][0],\n            sizes[t][0],\n            inputs[t][1],\n            sizes[t][1],\n            inputs[t][2],\n            sizes[t][2]);\n    ASSERT(actual == expected[t]);\n}"}, "java": {"code": "public boolean isSingleRiffle(int[] half1, int[] half2, int[] shuffledDeck) {\n    int half1Index = 0;\n    int half2Index = 0;\n    int half1MaxIndex = half1.length - 1;\n    int half2MaxIndex = half2.length - 1;\n\n    for (int card : shuffledDeck) {\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        if (half1Index &lt;= half1MaxIndex\n                && card == half1[half1Index]) {\n            half1Index++;\n\n        // if we still have cards in half2\n        // and the \"top\" card in half2 is the same\n        // as the top card in shuffledDeck\n        } else if (half2Index &lt;= half2MaxIndex\n                && card == half2[half2Index]) {\n            half2Index++;\n\n        // if the top card in shuffledDeck doesn't match the top\n        // card in half1 or half2, this isn't a single riffle.\n        } else {\n            return false;\n        }\n    }\n\n    // all cards in shuffledDeck have been \"accounted for\"\n    // so this is a single riffle!\n    return true;\n}", "tests": "for (int n = 0; n < decks.length; n++) {\n    assertEqual(t.isSingleRiffle(decks[n][0], decks[n][1], decks[n][2]), expectedOutputs[n]);\n}"}, "cpp": {"code": "bool isSingleRiffle(\n    const vector&lt;int>& half1,\n    const vector&lt;int>& half2,\n    const vector&lt;int>& shuffledDeck)\n{\n    size_t half1Index = 0;\n    size_t half2Index = 0;\n    size_t half1MaxIndex = half1.size() - 1;\n    size_t half2MaxIndex = half2.size() - 1;\n\n    for (int card : shuffledDeck) {\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        if (half1Index &lt;= half1MaxIndex && card == half1[half1Index]) {\n            ++half1Index;\n        }\n        else if (half2Index &lt;= half2MaxIndex && card == half2[half2Index]) {\n            // if we still have cards in half2\n            // and the \"top\" card in half2 is the same\n            // as the top card in shuffledDeck\n            ++half2Index;\n        }\n        else {\n            // if the top card in shuffledDeck doesn't match the top\n            // card in half1 or half2, this isn't a single riffle.\n            return false;\n        }\n    }\n\n    // all cards in shuffledDeck have been \"accounted for\"\n    // so this is a single riffle!\n    return true;\n}", "tests": "for (size_t i = 0; i < decks.size(); ++i) {\n    assertEqual(isSingleRiffle(decks[i][0], decks[i][1], decks[i][2]),\n        static_cast<bool>(expectedOutputs[i])); // have to cast due to vector<bool>\n}"}}, "question__single-rifle-check__why-n-two-time-and-space-particular": {"javascript": "half1.slice(1);", "python": "half1[1:]", "ruby": "half1[1..-1]", "c": {"code": "vector&lt;int>(++cards.begin(), cards.end());", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "java": "Arrays.copyOfRange(cards, 1, cards.length);", "cpp": "vector&lt;int>(++cards.begin(), cards.end());"}, "question__single-rifle-check__why-n-two-time-and-space": {"javascript": "return isSingleRiffleRecursive(half1.slice(1), half2, shuffledDeck.slice(1));", "python": "return is_single_riffle_recursive(half1[1:], half2, shuffled_deck[1:])", "ruby": "return is_single_riffle_recursive(half1[1..-1], half2, shuffled_deck[1..-1])", "c": {"code": "vector&lt;int> removeTopCard(const vector&lt;int>& cards)\n{\n    return vector&lt;int>(++cards.begin(), cards.end());\n}\n\nreturn isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));", "warning_message": "C IS IN BETA. SHOWING C++ UNTIL WE TRANSLATE THIS CODE."}, "java": "public int[] removeTopCard(int[] cards) {\n    return Arrays.copyOfRange(cards, 1, cards.length);\n}\n\nreturn isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));", "cpp": "vector&lt;int> removeTopCard(const vector&lt;int>& cards)\n{\n    return vector&lt;int>(++cards.begin(), cards.end());\n}\n\nreturn isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));"}, "question__single-rifle-check__is-single-riffle-recursive-optimized": {"javascript": {"code": "function isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index) {\n    shuffledDeckIndex = shuffledDeckIndex || 0;\n    half1Index = half1Index || 0;\n    half2Index = half2Index || 0;\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex === shuffledDeck.length) {\n        return true;\n    }\n\n    // if we still have cards in half1\n    // and the \"top\" card in half1 is the same\n    // as the top card in shuffledDeck\n    if ((half1Index &lt; half1.length) &&\n            (half1[half1Index] === shuffledDeck[shuffledDeckIndex])) {\n        half1Index++;\n\n    // if we still have cards in half2\n    // and the \"top\" card in half2 is the same\n    // as the top card in shuffledDeck\n    } else if ((half2Index &lt; half2.length) &&\n            (half2[half2Index] === shuffledDeck[shuffledDeckIndex])) {\n        half2Index++;\n\n    // if the top card in shuffledDeck doesn't match the top\n    // card in half1 or half2, this isn't a single riffle.\n    } else {\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    shuffledDeckIndex++;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index);\n}", "tests": "testInputAndOutputLists(isSingleRiffleRecursiveOptimized, tests, true);"}, "python": {"code": "def is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index=0, half1_index=0, half2_index=0):\n\n    # base case we've hit the end of shuffled_deck\n    if shuffled_deck_index == len(shuffled_deck):\n        return True\n\n    # if we still have cards in half1\n    # and the \"top\" card in half1 is the same\n    # as the top card in shuffled_deck\n    if (half1_index &lt; len(half1)) and \\\n            half1[half1_index] == shuffled_deck[shuffled_deck_index]:\n        half1_index += 1\n\n    # if we still have cards in half2\n    # and the \"top\" card in half2 is the same\n    # as the top card in shuffled_deck\n    elif (half2_index &lt; len(half2)) and \\\n            half2[half2_index] == shuffled_deck[shuffled_deck_index]:\n        half2_index += 1\n\n    # if the top card in shuffled_deck doesn't match the top\n    # card in half1 or half2, this isn't a single riffle.\n    else:\n        return False\n\n    # the current card in shuffled_deck has now been \"accounted for\"\n    # so move on to the next one\n    shuffled_deck_index += 1\n    return is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index, half1_index, half2_index)", "tests": "testInputAndOutputLists(is_single_riffle_recursive_optimized, tests, True)"}, "ruby": {"code": "def is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index=0, half1_index=0, half2_index=0)\n\n    # base case we've hit the end of shuffled_deck\n    if shuffled_deck_index == shuffled_deck.length\n        return true\n    end\n\n    # if we still have cards in half1\n    # and the \"top\" card in half1 is the same\n    # as the top card in shuffled_deck\n    if (half1_index &lt; half1.length) and \\\n            half1[half1_index] == shuffled_deck[shuffled_deck_index]\n        half1_index += 1\n\n    # if we still have cards in half2\n    # and the \"top\" card in half2 is the same\n    # as the top card in shuffled_deck\n    elsif (half2_index &lt; half2.length) and \\\n            half2[half2_index] == shuffled_deck[shuffled_deck_index]\n        half2_index += 1\n\n    # if the top card in shuffled_deck doesn't match the top\n    # card in half1 or half2, this isn't a single riffle.\n    else\n        return false\n    end\n\n    # the current card in shuffled_deck has now been \"accounted for\"\n    # so move on to the next one\n    shuffled_deck_index += 1\n    return is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index, half1_index, half2_index)\nend", "tests": "testInputAndOutputLists(method(:is_single_riffle_recursive_optimized), tests, true)"}, "c": {"code": "int* removeTopCard(int* cards, int size)\n{\n    assert(size);\n    return cards + 1;\n}\n\nint isSingleRiffleRecursive(\n    int* half1,\n    int half1Size,\n    int* half2,\n    int half2Size,\n    int* shuffledDeck,\n    int shuffledDeckSize\n    )\n{\n    // base case\n    if (!shuffledDeckSize) {\n        return 1;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1Size && half1[0] == shuffledDeck[0]) {\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(\n            removeTopCard(half1, half1Size),\n            half1Size - 1,\n            half2,\n            half2Size,\n            removeTopCard(shuffledDeck, shuffledDeckSize),\n            shuffledDeckSize - 1);\n    } else if (half2Size && half2[0] == shuffledDeck[0]) {\n        // if the top of shuffledDeck is the same as the top of half2\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(\n            half1,\n            half1Size,\n            removeTopCard(half2, half2Size),\n            half2Size - 1,\n            removeTopCard(shuffledDeck, shuffledDeckSize),\n            shuffledDeckSize - 1);\n    } else {\n        // top of shuffledDeck doesn't match top of half1 or half2\n        // so we know it's not a single riffle\n        return 0;\n    }\n}", "tests": "for (int t = 0; t < TESTS_NUM; t++) {\n    int actual = isSingleRiffleRecursive(\n            inputs[t][0],\n            sizes[t][0],\n            inputs[t][1],\n            sizes[t][1],\n            inputs[t][2],\n            sizes[t][2]);\n    ASSERT(actual == expected[t]);\n}"}, "java": {"code": "public boolean isSingleRiffleRecursiveOptimized(int[] half1, int[] half2, int[] shuffledDeck) {\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, 0, 0, 0);\n}\n\n\npublic boolean isSingleRiffleRecursiveOptimized(int[] half1, int[] half2, int[] shuffledDeck,\n        int shuffledDeckIndex, int half1Index, int half2Index) {\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex == shuffledDeck.length) {\n        return true;\n    }\n\n    // if we still have cards in half1\n    // and the \"top\" card in half1 is the same\n    // as the top card in shuffledDeck\n    if ((half1Index &lt; half1.length)\n            && (half1[half1Index] == shuffledDeck[shuffledDeckIndex])) {\n        half1Index++;\n\n    // if we still have cards in half2\n    // and the \"top\" card in half2 is the same\n    // as the top card in shuffledDeck\n    } else if ((half2Index &lt; half2.length)\n            && (half2[half2Index] == shuffledDeck[shuffledDeckIndex])) {\n        half2Index++;\n\n    // if the top card in shuffledDeck doesn't match the top\n    // card in half1 or half2, this isn't a single riffle.\n    } else {\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    shuffledDeckIndex++;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index);\n}", "tests": "for (int n = 0; n < decks.length; n++) {\n    assertEqual(t.isSingleRiffleRecursiveOptimized(decks[n][0], decks[n][1], decks[n][2]), expectedOutputs[n]);\n}"}, "cpp": {"code": "bool isSingleRiffleRecursiveOptimized(\n    const vector&lt;int>& half1,\n    const vector&lt;int>& half2,\n    const vector&lt;int>& shuffledDeck,\n    size_t shuffledDeckIndex = 0,\n    size_t half1Index = 0,\n    size_t half2Index = 0)\n{\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex == shuffledDeck.size()) {\n        return true;\n    }\n\n    if ((half1Index &lt; half1.size())\n            && (half1[half1Index] == shuffledDeck[shuffledDeckIndex])) {\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        ++half1Index;\n    }\n    else if ((half2Index &lt; half2.size())\n            && (half2[half2Index] == shuffledDeck[shuffledDeckIndex])) {\n        // if we still have cards in half2\n        // and the \"top\" card in half2 is the same\n        // as the top card in shuffledDeck\n        ++half2Index;\n    }\n    else {\n        // if the top card in shuffledDeck doesn't match the top\n        // card in half1 or half2, this isn't a single riffle.\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    ++shuffledDeckIndex;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck,\n            shuffledDeckIndex, half1Index, half2Index);\n}", "tests": "for (size_t i = 0; i < decks.size(); ++i) {\n    assertEqual(isSingleRiffleRecursiveOptimized(decks[i][0], decks[i][1], decks[i][2]),\n        static_cast<bool>(expectedOutputs[i])); // have to cast due to vector<bool>\n}"}}}, "vars": {"question__single-rifle-check__shuffled-deck": {"snake": "shuffled_deck", "camel": "shuffledDeck"}, "question__single-rifle-check__card": {"default": "card"}, "question__single-rifle-check__half-one": {"default": "half1"}, "question__single-rifle-check__half-one-index": {"snake": "half1_index", "camel": "half1Index"}, "question__single-rifle-check__half-two": {"default": "half2"}}, "words": {"question__single-rifle-check__index-out-of-bounds-errors": {"javascript": "bugs because your index is outside an array", "python": "index out of bounds errors", "ruby": "index out of bounds errors", "default": "index out of bounds errors", "c": "index out of bounds errors", "java": "index out of bounds errors", "cpp": "index out of bounds errors"}, "question__single-rifle-check__standard-list": {"javascript": "array", "python": "list", "default": "list", "php": "array", "ruby": "array", "swift": "array", "cpp": "vector", "objectivec": "array", "csharp": "list", "c": "array", "java": "array"}, "question__single-rifle-check__slice-performance": {"javascript": "<div code-block=\"is-single-riffle-recursive\" language=\"javascript\" translation-highlighting=\"static\">function isSingleRiffleRecursive(half1, half2, shuffledDeck) {\n\n    // base case\n    if (shuffledDeck.length === 0) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1.length &amp;&amp; half1[0] === shuffledDeck[0]) {\n\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1.slice(1), half2, shuffledDeck.slice(1));\n\n    // if the top of shuffledDeck is the same as the top of half2\n    } else if (half2.length &amp;&amp; half2[0] === shuffledDeck[0]) {\n\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, half2.slice(1), shuffledDeck.slice(1));\n\n    // top of shuffledDeck doesn't match top of half1 or half2\n    // so we know it's not a single riffle\n    } else {\n        return false;\n    }\n}</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\" language=\"javascript\" translation-highlighting=\"static\">return isSingleRiffleRecursive(half1.slice(1), half2, shuffledDeck.slice(1));</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\" language=\"javascript\" translation-highlighting=\"static\">half1.slice(1);</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\">array</span>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\">shuffledDeck</span> (and <span var=\"half-one\">half1</span> and <span var=\"half-two\">half2</span>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\">shuffledDeck</span> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\">array</span>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\" language=\"javascript\" translation-highlighting=\"static\">function isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index) {\n    shuffledDeckIndex = shuffledDeckIndex || 0;\n    half1Index = half1Index || 0;\n    half2Index = half2Index || 0;\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex === shuffledDeck.length) {\n        return true;\n    }\n\n    // if we still have cards in half1\n    // and the \"top\" card in half1 is the same\n    // as the top card in shuffledDeck\n    if ((half1Index &lt; half1.length) &amp;&amp;\n            (half1[half1Index] === shuffledDeck[shuffledDeckIndex])) {\n        half1Index++;\n\n    // if we still have cards in half2\n    // and the \"top\" card in half2 is the same\n    // as the top card in shuffledDeck\n    } else if ((half2Index &lt; half2.length) &amp;&amp;\n            (half2[half2Index] === shuffledDeck[shuffledDeckIndex])) {\n        half2Index++;\n\n    // if the top card in shuffledDeck doesn't match the top\n    // card in half1 or half2, this isn't a single riffle.\n    } else {\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    shuffledDeckIndex++;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index);\n}</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "python": "<div code-block=\"is-single-riffle-recursive\" language=\"python\" translation-highlighting=\"static\">def is_single_riffle_recursive(half1, half2, shuffled_deck):\n\n    # base case\n    if len(shuffled_deck) == 0:\n        return True\n\n    # if the top of shuffled_deck is the same as the top of half1\n    # (making sure first that we have a top card in half1)\n    if len(half1) and half1[0] == shuffled_deck[0]:\n\n        # take the top cards off half1 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1[1:], half2, shuffled_deck[1:])\n\n    # if the top of shuffled_deck is the same as the top of half2\n    elif len(half2) and half2[0] == shuffled_deck[0]:\n\n        # take the top cards off half2 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1, half2[1:], shuffled_deck[1:])\n\n    # top of shuffled_deck doesn't match top of half1 or half2\n    # so we know it's not a single riffle\n    else:\n        return False</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\" language=\"python\" translation-highlighting=\"static\">return is_single_riffle_recursive(half1[1:], half2, shuffled_deck[1:])</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\" language=\"python\" translation-highlighting=\"static\">half1[1:]</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\">list</span>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\">shuffled_deck</span> (and <span var=\"half-one\">half1</span> and <span var=\"half-two\">half2</span>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\">shuffled_deck</span> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\">list</span>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\" language=\"python\" translation-highlighting=\"static\">def is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index=0, half1_index=0, half2_index=0):\n\n    # base case we've hit the end of shuffled_deck\n    if shuffled_deck_index == len(shuffled_deck):\n        return True\n\n    # if we still have cards in half1\n    # and the \"top\" card in half1 is the same\n    # as the top card in shuffled_deck\n    if (half1_index &lt; len(half1)) and \\\n            half1[half1_index] == shuffled_deck[shuffled_deck_index]:\n        half1_index += 1\n\n    # if we still have cards in half2\n    # and the \"top\" card in half2 is the same\n    # as the top card in shuffled_deck\n    elif (half2_index &lt; len(half2)) and \\\n            half2[half2_index] == shuffled_deck[shuffled_deck_index]:\n        half2_index += 1\n\n    # if the top card in shuffled_deck doesn't match the top\n    # card in half1 or half2, this isn't a single riffle.\n    else:\n        return False\n\n    # the current card in shuffled_deck has now been \"accounted for\"\n    # so move on to the next one\n    shuffled_deck_index += 1\n    return is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index, half1_index, half2_index)</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "ruby": "<div code-block=\"is-single-riffle-recursive\" language=\"ruby\" translation-highlighting=\"static\">def is_single_riffle_recursive(half1, half2, shuffled_deck)\n\n    # base case\n    if shuffled_deck.length == 0\n        return true\n    end\n\n    # if the top of shuffled_deck is the same as the top of half1\n    # (making sure first that we have a top card in half1)\n    if half1.length &gt; 0 and half1[0] == shuffled_deck[0]\n\n        # take the top cards off half1 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1[1..-1], half2, shuffled_deck[1..-1])\n\n    # if the top of shuffled_deck is the same as the top of half2\n    elsif half2.length &gt; 0 and half2[0] == shuffled_deck[0]\n\n        # take the top cards off half2 and shuffled_deck and recurse\n        return is_single_riffle_recursive(half1, half2[1..-1], shuffled_deck[1..-1])\n\n    # top of shuffled_deck doesn't match top of half1 or half2\n    # so we know it's not a single riffle\n    else\n        return false\n    end\nend</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\" language=\"ruby\" translation-highlighting=\"static\">return is_single_riffle_recursive(half1[1..-1], half2, shuffled_deck[1..-1])</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\" language=\"ruby\" translation-highlighting=\"static\">half1[1..-1]</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\">array</span>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\">shuffled_deck</span> (and <span var=\"half-one\">half1</span> and <span var=\"half-two\">half2</span>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\">shuffled_deck</span> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\">array</span>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\" language=\"ruby\" translation-highlighting=\"static\">def is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index=0, half1_index=0, half2_index=0)\n\n    # base case we've hit the end of shuffled_deck\n    if shuffled_deck_index == shuffled_deck.length\n        return true\n    end\n\n    # if we still have cards in half1\n    # and the \"top\" card in half1 is the same\n    # as the top card in shuffled_deck\n    if (half1_index &lt; half1.length) and \\\n            half1[half1_index] == shuffled_deck[shuffled_deck_index]\n        half1_index += 1\n\n    # if we still have cards in half2\n    # and the \"top\" card in half2 is the same\n    # as the top card in shuffled_deck\n    elsif (half2_index &lt; half2.length) and \\\n            half2[half2_index] == shuffled_deck[shuffled_deck_index]\n        half2_index += 1\n\n    # if the top card in shuffled_deck doesn't match the top\n    # card in half1 or half2, this isn't a single riffle.\n    else\n        return false\n    end\n\n    # the current card in shuffled_deck has now been \"accounted for\"\n    # so move on to the next one\n    shuffled_deck_index += 1\n    return is_single_riffle_recursive_optimized(half1, half2, shuffled_deck, shuffled_deck_index, half1_index, half2_index)\nend</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "default": "<div code-block=\"is-single-riffle-recursive\">\n</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\">\n</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\">\n</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\"/>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\"/> (and <span var=\"half-one\"/> and <span var=\"half-two\"/>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\"/> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\"/>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\">\n</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "c": "<div code-block=\"is-single-riffle-recursive-optimized\" language=\"c\" translation-highlighting=\"static\">int* removeTopCard(int* cards, int size)\n{\n    assert(size);\n    return cards + 1;\n}\n\nint isSingleRiffleRecursive(\n    int* half1,\n    int half1Size,\n    int* half2,\n    int half2Size,\n    int* shuffledDeck,\n    int shuffledDeckSize\n    )\n{\n    // base case\n    if (!shuffledDeckSize) {\n        return 1;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1Size &amp;&amp; half1[0] == shuffledDeck[0]) {\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(\n            removeTopCard(half1, half1Size),\n            half1Size - 1,\n            half2,\n            half2Size,\n            removeTopCard(shuffledDeck, shuffledDeckSize),\n            shuffledDeckSize - 1);\n    } else if (half2Size &amp;&amp; half2[0] == shuffledDeck[0]) {\n        // if the top of shuffledDeck is the same as the top of half2\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(\n            half1,\n            half1Size,\n            removeTopCard(half2, half2Size),\n            half2Size - 1,\n            removeTopCard(shuffledDeck, shuffledDeckSize),\n            shuffledDeckSize - 1);\n    } else {\n        // top of shuffledDeck doesn't match top of half1 or half2\n        // so we know it's not a single riffle\n        return 0;\n    }\n}</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n\"/> time and <span complexity=\"n\"/> additional space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "java": "<div code-block=\"is-single-riffle-recursive\" language=\"java\" translation-highlighting=\"static\">public int[] removeTopCard(int[] cards) {\n    return Arrays.copyOfRange(cards, 1, cards.length);\n}\n\npublic boolean isSingleRiffleRecursive(int[] half1, int[] half2, int[] shuffledDeck) {\n\n    // base case\n    if (shuffledDeck.length == 0) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (half1.length &gt; 0 &amp;&amp; half1[0] == shuffledDeck[0]) {\n\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));\n\n    // if the top of shuffledDeck is the same as the top of half2\n    } else if (half2.length &gt; 0 &amp;&amp; half2[0] == shuffledDeck[0]) {\n\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, removeTopCard(half2), removeTopCard(shuffledDeck));\n\n    // top of shuffledDeck doesn't match top of half1 or half2\n    // so we know it's not a single riffle\n    } else {\n        return false;\n    }\n}</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\" language=\"java\" translation-highlighting=\"static\">public int[] removeTopCard(int[] cards) {\n    return Arrays.copyOfRange(cards, 1, cards.length);\n}\n\nreturn isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\" language=\"java\" translation-highlighting=\"static\">Arrays.copyOfRange(cards, 1, cards.length);</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\">array</span>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\">shuffledDeck</span> (and <span var=\"half-one\">half1</span> and <span var=\"half-two\">half2</span>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\">shuffledDeck</span> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\">array</span>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\" language=\"java\" translation-highlighting=\"static\">public boolean isSingleRiffleRecursiveOptimized(int[] half1, int[] half2, int[] shuffledDeck) {\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, 0, 0, 0);\n}\n\n\npublic boolean isSingleRiffleRecursiveOptimized(int[] half1, int[] half2, int[] shuffledDeck,\n        int shuffledDeckIndex, int half1Index, int half2Index) {\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex == shuffledDeck.length) {\n        return true;\n    }\n\n    // if we still have cards in half1\n    // and the \"top\" card in half1 is the same\n    // as the top card in shuffledDeck\n    if ((half1Index &lt; half1.length)\n            &amp;&amp; (half1[half1Index] == shuffledDeck[shuffledDeckIndex])) {\n        half1Index++;\n\n    // if we still have cards in half2\n    // and the \"top\" card in half2 is the same\n    // as the top card in shuffledDeck\n    } else if ((half2Index &lt; half2.length)\n            &amp;&amp; (half2[half2Index] == shuffledDeck[shuffledDeckIndex])) {\n        half2Index++;\n\n    // if the top card in shuffledDeck doesn't match the top\n    // card in half1 or half2, this isn't a single riffle.\n    } else {\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    shuffledDeckIndex++;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck, shuffledDeckIndex, half1Index, half2Index);\n}</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>", "cpp": "<div code-block=\"is-single-riffle-recursive\" language=\"cpp\" translation-highlighting=\"static\">vector&lt;int&gt; removeTopCard(const vector&lt;int&gt;&amp; cards)\n{\n    return vector&lt;int&gt;(++cards.begin(), cards.end());\n}\n\nbool isSingleRiffleRecursive(\n    const vector&lt;int&gt;&amp; half1,\n    const vector&lt;int&gt;&amp; half2,\n    const vector&lt;int&gt;&amp; shuffledDeck)\n{\n    // base case\n    if (shuffledDeck.empty()) {\n        return true;\n    }\n\n    // if the top of shuffledDeck is the same as the top of half1\n    // (making sure first that we have a top card in half1)\n    if (!half1.empty() &amp;&amp; half1[0] == shuffledDeck[0]) {\n        // take the top cards off half1 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));\n    }\n    else if (!half2.empty() &amp;&amp; half2[0] == shuffledDeck[0]) {\n        // if the top of shuffledDeck is the same as the top of half2\n        // take the top cards off half2 and shuffledDeck and recurse\n        return isSingleRiffleRecursive(half1, removeTopCard(half2), removeTopCard(shuffledDeck));\n    }\n    else {\n        // top of shuffledDeck doesn't match top of half1 or half2\n        // so we know it's not a single riffle\n        return false;\n    }\n}</div>\n\n<p>\nThis solution will work. But we can do better.\n</p>\n\n<p>\n<strong>Before we talk about optimization, note that our inputs are of <em>small</em> and <em>constant</em> size</strong>. This function will take hardly any time or space, even if it <em>could be</em> more efficient. In industry, especially at small startups that want to move quickly, optimizing this might be considered a \"premature optimization.\" But if we're going to do something inefficient, we should at least <em>know</em> about it. Great engineers have both the <em>skill</em> to see how to optimize their code and the <em>wisdom</em> to know when those optimizations aren't worth it. At this point in the interview I recommend saying \"I think we can optimize this a bit further, although given the constraints on the input this probably won't be very resource-intensive anyway...should we talk about optimizations?\"\n</p>\n\n<p>\nOkay, back to our show. This function will take <span complexity=\"n^2\"/> time and <span complexity=\"n^2\"/> additional space.\n</p>\n\n<p>\nWhaaaaat? Yeah. Take a look at this snippet:\n</p>\n\n<div code-block=\"why-n-two-time-and-space\" language=\"cpp\" translation-highlighting=\"static\">vector&lt;int&gt; removeTopCard(const vector&lt;int&gt;&amp; cards)\n{\n    return vector&lt;int&gt;(++cards.begin(), cards.end());\n}\n\nreturn isSingleRiffleRecursive(removeTopCard(half1), half2, removeTopCard(shuffledDeck));</div>\n\n<p>\nIn particular this expression:\n</p>\n\n<div code-block=\"why-n-two-time-and-space-particular\" language=\"cpp\" translation-highlighting=\"static\">vector&lt;int&gt;(++cards.begin(), cards.end());</div>\n\n<p>\nThat's a <span concept=\"slice\">slice</span>, and it costs <span complexity=\"m\"/> time and space, where <span math=\"\">m</span> is the size of the resulting <span words=\"standard-list\">vector</span>. That's going to determine our overall time and space cost here&#8212;the rest of the work we're doing is constant space and time.\n</p>\n\n<p>\nIn our recursing we'll build up <span math=\"\">n</span> frames on the <span concept=\"call-stack\">call stack</span>. Each of those frames will hold a <em>different slice</em> of our original <span var=\"shuffled-deck\">shuffledDeck</span> (and <span var=\"half-one\">half1</span> and <span var=\"half-two\">half2</span>, though we only slice one of them in each recursive call).\n</p>\n\n<p>\nSo, what's the total time and space cost of all our slices?\n</p>\n\n<p>\nIf <span var=\"shuffled-deck\">shuffledDeck</span> has <span math=\"\">n</span> items to start, taking our first slice takes <span math=\"\">n-1</span> time and space (plus half that, since we're also slicing one of our halves&#8212;but that's just a constant multiplier so we can ignore it). In our second recursive call, slicing takes <span math=\"\">n-2</span> time and space. Etcetera.\n</p>\n\n<p>\nSo our total time and space cost for slicing comes to:\n</p>\n\n<span math=\"\" block=\"\">\n(n - 1) + (n - 2) + ... + 2 + 1\n</span>\n\n<p>\nThis is a <span concept=\"summation-1-to-n\">common series</span> that turns out to be <span complexity=\"n^2\"/>.\n</p>\n\n<p>\nWe can do better than this <span complexity=\"n^2\"/> time and space cost. One way we could to that is to avoid slicing and instead keep track of indices in the <span words=\"standard-list\">vector</span>:\n</p>\n\n<div code-block=\"is-single-riffle-recursive-optimized\" language=\"cpp\" translation-highlighting=\"static\">bool isSingleRiffleRecursiveOptimized(\n    const vector&lt;int&gt;&amp; half1,\n    const vector&lt;int&gt;&amp; half2,\n    const vector&lt;int&gt;&amp; shuffledDeck,\n    size_t shuffledDeckIndex = 0,\n    size_t half1Index = 0,\n    size_t half2Index = 0)\n{\n\n    // base case we've hit the end of shuffledDeck\n    if (shuffledDeckIndex == shuffledDeck.size()) {\n        return true;\n    }\n\n    if ((half1Index &lt; half1.size())\n            &amp;&amp; (half1[half1Index] == shuffledDeck[shuffledDeckIndex])) {\n        // if we still have cards in half1\n        // and the \"top\" card in half1 is the same\n        // as the top card in shuffledDeck\n        ++half1Index;\n    }\n    else if ((half2Index &lt; half2.size())\n            &amp;&amp; (half2[half2Index] == shuffledDeck[shuffledDeckIndex])) {\n        // if we still have cards in half2\n        // and the \"top\" card in half2 is the same\n        // as the top card in shuffledDeck\n        ++half2Index;\n    }\n    else {\n        // if the top card in shuffledDeck doesn't match the top\n        // card in half1 or half2, this isn't a single riffle.\n        return false;\n    }\n\n    // the current card in shuffledDeck has now been \"accounted for\"\n    // so move on to the next one\n    ++shuffledDeckIndex;\n    return isSingleRiffleRecursiveOptimized(half1, half2, shuffledDeck,\n            shuffledDeckIndex, half1Index, half2Index);\n}</div>\n\n<p>\nSo now we're down to <span complexity=\"n\"/> time, but we're still taking <span complexity=\"n\"/> space in the call stack because of our recursion. We can rewrite this as an iterative function to get that memory cost down to <span complexity=\"1\"/>.\n</p>"}, "question__single-rifle-check__a-standard-list": {"javascript": "an array", "python": "a list", "default": "a list", "php": "an array", "ruby": "an array", "swift": "an array", "cpp": "a vector", "objectivec": "an array", "csharp": "a list", "c": "an array", "java": "an array"}}};
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            </script>
</div>


    </div>

    <div class="btn-sets">

        <p class="prompt ng-binding" ng-bind="getPromptStr()" ng-hide="&#39;full&#39; !== &#39;full&#39; &amp;&amp; endedQuestion">Do you have an answer?</p>

        <div class="btn-set btn-set-during ng-hide" ng-show="isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text ng-binding" ng-bind="getShowBtnText()">Show answer</span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack &amp;&amp; getBtnSet()==&#39;during&#39;">
                <a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text ng-binding" ng-bind="getHaveAnswerBtnText()">I have an answer</span></a>
                <a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text ng-binding" ng-bind="getDontHaveAnswerBtnText()">I need a hint</span></a>
        </div>

        
            <div class="btn-set btn-set-after-option ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
                    <a ng-click="feelExpertPress()" id="btn-feel-good" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text">Yes, I'm expert on this</span></a>
                    <a ng-click="dontFeelExpertPress()" id="btn-need-review" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-repeat"></span><span class="text">Not quite, review later</span></a>
            </div>
            <div class="btn-set btn-set-after-must-review ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
                    <a ng-click="nextQuestionPress()" id="btn-next" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-right"></span><span class="text">Next question</span></a>
            </div>
        

        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-option&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/single-rifle-check" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/single-rifle-check" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/single-rifle-check&amp;title=&amp;summary=Solved%20this%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question option&quot;}"><i class="fa fa-linkedin"> </i> Share</a>


        </div>
        <div class="share-btns share-btns-quiz-end ng-hide" ng-show="getBtnSet()==&#39;after-must-review&#39;">
            <p>
                Like this problem? Pass it on!
            </p>

            

<a class="custom-share facebook-share ng-isolate-scope" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/single-rifle-check" target="_blank" tracklink="" the-event="FB share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-facebook"> </i> Share</a>
<a class="custom-share twitter-share ng-isolate-scope" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&amp;via=interviewcake&amp;related=interviewcake&amp;url=https%3A//www.interviewcake.com/question/python/single-rifle-check" target="_blank" tracklink="" the-event="Twitter share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-twitter"> </i> Tweet</a>
<a class="custom-share linkedin-share ng-isolate-scope" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//www.interviewcake.com/question/python/single-rifle-check&amp;title=&amp;summary=Tough%20coding%20interview%20question%21&amp;source=Interview%20Cake" target="_blank" tracklink="" the-event="LinkedIn share click" the-properties="{&quot;which&quot; : &quot;post-question must review&quot;}"><i class="fa fa-linkedin"> </i> Share</a>

        </div>

    </div>

    
        <div ng-controller="NotepadCtrl" class="notepad-outer-wrapper ng-scope tab-mode" ng-class="notepadMode" style="bottom: 0px;">
    <div class="notepad-inner-wrapper tab-mode" ng-class="notepadMode">
        <div class="notepad-buttons tab-mode" ng-class="notepadMode">
            <div class="select-language ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;">
                <select ng-model="selectedLanguage" ng-options="language.display_name for language in codemirrorLanguages | orderBy: &#39;dropdown_rank&#39;" ng-change="selectFromLanguageDropdown()" class="ng-pristine ng-untouched ng-valid"><option value="0" selected="selected" label="Python">Python</option><option value="1" label="Java">Java</option><option value="2" label="Ruby">Ruby</option><option value="3" label="JavaScript">JavaScript</option><option value="4" label="C (beta)">C (beta)</option><option value="5" label="C++ (beta)">C++ (beta)</option><option value="6" label="C# (beta)">C# (beta)</option><option value="7" label="Objective-C (beta)">Objective-C (beta)</option><option value="8" label="PHP (beta)">PHP (beta)</option><option value="9" label="Haskell">Haskell</option><option value="10" label="No syntax">No syntax</option></select>
            </div>
            <span class="tab ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;tab-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="notepadMode!==&#39;tab-mode&#39;"></span>
            <span class="type-and-look" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;type-and-look-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
            <span class="focus" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="clickIcon(&#39;focus-mode&#39;)" ng-mouseup="isNotepadRelatedElementClicked=false"></span>
        </div>
        <div class="notepad-typing tab-mode" ng-class="{&#39;output-displayed&#39;: outputDisplayed &amp;&amp; selectedLanguage.codewars}">
            <div class="ng-pristine ng-untouched ng-valid cm-s-default CodeMirror" ui-codemirror-opts="editorOptions" ui-refresh="isCodemirrorUpdated" ng-model="userCode"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 26px; left: 22px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" not-content="true" style="min-width: 18px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" not-content="true" style="min-height: 18px;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" not-content="true"></div><div class="CodeMirror-gutter-filler" not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-width: 86.9688px; min-height: 29px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 17.85px;">&nbsp;</div></div><div class="CodeMirror-code"><pre><span style="padding-right: 0.1px;"><span class="cm-variable">Type</span> <span class="cm-variable">code</span><span class="cm-operator">!</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 29px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div>
        </div>

        

        <div class="notepad-run tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars">
            <span class="output-button ng-binding ng-hide" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="outputDisplayed = !outputDisplayed; codemirrorElement.focus()" ng-mouseup="isNotepadRelatedElementClicked=false" ng-show="outputDisplayed || output !== undefined" ng-bind="outputDisplayed ? &#39;HIDE&#39; : &#39;SHOW&#39;">SHOW</span>
            <span class="output-button" ng-mousedown="isNotepadRelatedElementClicked=true" ng-click="runCode()" ng-mouseup="isNotepadRelatedElementClicked=false">RUN</span>
        </div>
        <div class="notepad-output tab-mode" ng-class="notepadMode" ng-show="selectedLanguage.codewars" ng-mousedown="isNotepadRelatedElementClicked=true" ng-mouseup="isNotepadRelatedElementClicked=false">
            <span class="powered-by">
                Code execution powered by Qualified.io
            </span>
            <p class="content output-help ng-binding ng-hide" ng-show="outputHelp" ng-bind="outputHelp"></p>
            <p class="content output ng-binding ng-hide" ng-show="output" ng-bind="output"></p>
            <p class="content output-error ng-binding" ng-bind="outputError"></p>
        </div>

        
    </div>
</div>

    

</div>
</div>



    <div ng-view=""></div>
</div>


    
    
    


    <div id="print-footer">
        <p>
            Want more coding interview help?
        </p>

        <p>
            Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
        </p>
    </div>

    <div id="footer">

        <a class="newsletter-link" href="https://www.interviewcake.com/free-weekly-coding-interview-problem-newsletter">Subscribe to our weekly question email list »</a>

        <div class="links">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="by-company">
                            <h5>
                                Programming interview questions by company:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/google-interview-questions">Google interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/facebook-interview-questions">Facebook interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/amazon-interview-questions">Amazon interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="by-language">
                            <h5>
                                Programming interview questions by language:
                            </h5>
                            <ul>
                                <li>
                                    <a href="https://www.interviewcake.com/java-interview-questions">Java interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/python-interview-questions">Python interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/ruby-interview-questions">Ruby interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/javascript-interview-questions">JavaScript interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/sql-interview-questions">SQL interview questions</a>
                                </li>
                                <li>
                                    <a href="https://www.interviewcake.com/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="social-media">

            <a class="facebook ng-isolate-scope" href="https://www.facebook.com/interviewcake" target="_blank" tracklink="" the-event="FB footer click"><i class="fa fa-facebook"></i></a>
            <a class="twitter ng-isolate-scope" href="https://www.twitter.com/interviewcake" target="_blank" tracklink="" the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
        </div>

        

            <div itemscope="" itemtype="http://schema.org/Corporation">
                <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>

                Copyright © 2016
                <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                    <span itemprop="addressLocality">New York</span>,
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                    <span itemprop="addressCountry">US</span>
                    <span itemprop="addressLocality">New York</span>
                    <span itemprop="addressRegion">NY</span>
                    <span itemprop="streetAddress">228 Park Ave S #82632</span>
                    <span itemprop="postalCode">10003</span>
                    <span itemprop="telephone">(804) 876-2253</span>
                </address>

                <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                    <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                        <meta itemprop="latitude" content="37.76480">
                        <meta itemprop="longitude" content="-122.41872">
                    </div>
                </div>
            </div>
        
        <div>

            
                <a href="https://www.interviewcake.com/about">About</a>
                |
            
            <a rel="nofollow" href="https://www.interviewcake.com/privacy-policy">Privacy</a>
            |
            <a rel="nofollow" href="https://www.interviewcake.com/terms-and-conditions">Terms</a>
        </div>
    </div>

    

</div> <!-- /"below-nav" -->

    
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/jquery.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/bootstrap.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular-route.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular-cookies.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular-animate.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/katex.min.js"></script>

    

    
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/underscore-min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular-django-rest-resource.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/angular-seo.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'new_header': true,'allow_anonymous_purchase': false
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/base.js"></script>

    
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/prism.min.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/codemirror.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/python.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/ruby.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/javascript.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/clike.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/php.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/haskell.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/ui-codemirror.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/jquery.payment.js"></script>
    <script src="./36.Single Riffle Shuffle _ Interview Cake_files/edgeUtils.js"></script>
    




    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=135';
        //TODO: move above into the below
        window.JS_CONSTANTS = {"INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"All": false, "Google Analytics": true, "Optimizely": true, "Adwords": true, "Facebook Pixel": true}, "C18N_LANGUAGES": [{"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}], "CODEMIRROR_LANGUAGES": [{"dropdown_rank": 10, "codemirror": "text/x-haskell", "codewars": "haskell", "short_name": "haskell", "display_name": "Haskell", "notepad_template": "myFunction :: String -> String\n-- write the body of your function here\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "PRISM_LANGUAGES": [{"dropdown_rank": 11, "codemirror": "", "short_name": "nolanguage", "prism": "none", "display_name": "No syntax"}, {"short_name": "html", "prism": "markup", "display_name": "HTML"}, {"short_name": "sql", "prism": "sql", "display_name": "SQL"}, {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}, {"dropdown_rank": 3, "prism": "ruby", "codemirror": "text/x-ruby", "codewars": "ruby", "short_name": "ruby", "case_convention": "snake", "notepad_template": "def my_function(arg)\n    # write the body of your function here\n    return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "display_name": "Ruby"}, {"dropdown_rank": 2, "prism": "java", "codemirror": "text/x-java", "codewars": "java", "short_name": "java", "case_convention": "camel", "notepad_template": "public class Solution {\n    public static String myFunction(String arg) {\n        // write the body of your function here\n        return \"running with \" + arg;\n    }\n    public static void main(String[] args) {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "display_name": "Java"}, {"dropdown_rank": 4, "prism": "javascript", "codemirror": "text/javascript", "codewars": "javascript", "short_name": "javascript", "case_convention": "camel", "notepad_template": "function myFunction(arg) {\n    // write the body of your function here\n    return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "display_name": "JavaScript"}, {"dropdown_rank": 5, "closest_languages": ["cpp", "java"], "prism": "c", "codemirror": "text/x-csrc", "codewars": "c", "short_name": "c", "case_convention": "camel", "notepad_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * my_function(char * arg) {\n    // write the body of your function here\n    return arg;\n}\n\nint main() {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    printf(\"%s\", my_function(\"test input\"));\n    return 0;\n}", "display_name": "C (beta)"}, {"dropdown_rank": 6, "closest_languages": ["c", "java"], "prism": "cpp", "codemirror": "text/x-c++src", "codewars": "cpp", "short_name": "cpp", "case_convention": "camel", "notepad_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "display_name": "C++ (beta)"}, {"dropdown_rank": 7, "closest_languages": ["java"], "prism": "csharp", "codemirror": "text/x-csharp", "codewars": "csharp", "short_name": "csharp", "case_convention": "camel", "notepad_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "display_name": "C# (beta)"}, {"dropdown_rank": 9, "closest_languages": ["javascript"], "prism": "php", "codemirror": "text/x-php", "codewars": "php", "short_name": "php", "case_convention": "camel", "notepad_template": "<?php\n\nfunction myFunction($arg) {\n    // write the body of your function here\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n\n?>", "display_name": "PHP (beta)"}, {"closest_languages": ["java"], "prism": "swift", "codewars": "swift", "short_name": "swift", "case_convention": "camel", "display_name": "Swift (beta)"}, {"dropdown_rank": 8, "closest_languages": ["c", "java"], "prism": "objectivec", "codemirror": "text/x-objectivec", "short_name": "objectivec", "case_convention": "camel", "notepad_template": "#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n\n+ (NSString *)myFunction:(NSString *)arg;\n\n@end\n\n@implementation Solution\n\n+ (NSString *)myFunction:(NSString *)arg\n{\n  // write the body of your function here\n  return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main (int argc, const char * argv[])\n{\n  @autoreleasepool {\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    NSString * result = [Solution myFunction:@\"test input\"];\n    printf(\"%s\", [result UTF8String]);\n  }\n}", "display_name": "Objective-C (beta)"}], "next_step_type_enum": {"login": "_NEXT_STEP_TYPE_LOGIN_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_", "done": "_NEXT_STEP_TYPE_DONE_", "question": "_NEXT_STEP_TYPE_QUESTION_"}, "CACHEBUST_QUERY_STR": "?bust=135", "DEFAULT_C18N_LANGUAGE": {"dropdown_rank": 1, "prism": "python", "codemirror": "text/x-python", "codewars": "python", "short_name": "python", "case_convention": "snake", "notepad_template": "def my_function(arg):\n    # write the body of your function here\n    return 'running with %s' % arg\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nprint my_function('test input')\n", "display_name": "Python"}};

        
        window.JS_VARS = {"questions_fully_attempted": ["largest-stack", "find-in-ordered-set", "stock-price", "queue-two-stacks", "which-appears-twice", "find-rotation-point", "matching-parens", "reverse-string-in-place", "balanced-binary-tree", "compress-url-list", "bst-checker", "bracket-validator", "permutation-palindrome", "temperature-tracker", "inflight-entertainment", "recursive-string-permutations", "shuffle", "highest-product-of-3", "top-scores", "simulate-5-sided-die", "reverse-linked-list", "linked-list-cycles", "merging-ranges", "second-largest-item-in-bst", "find-duplicate-optimize-for-space", "rectangular-love", "word-cloud", "two-egg-problem", "simulate-7-sided-die", "nth-fibonacci", "product-of-other-numbers", "find-unique-int-among-duplicates", "cake-thief", "delete-node", "kth-to-last-node-in-singly-linked-list", "reverse-words"], "url_content_type": "question"};
        

        
    </script>



    

    
    <script type="text/javascript" src="./36.Single Riffle Shuffle _ Interview Cake_files/saved_resource"></script>
    <script type="text/javascript">
        Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
    </script>
    

    
    
    <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./36.Single Riffle Shuffle _ Interview Cake_files/iPrOY23SGAp.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div>
    <script>(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <script id="twitter-wjs" src="./36.Single Riffle Shuffle _ Interview Cake_files/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[[getCompId()]]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe animation-iframe-[[getCompId()]]"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[[language]]">
  <code class="language-[[language]]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-content-language" ng-hide="staticLanguage" ng-cloak>

    <select ng-model="contentLanguage" ng-options="language.display_name for language in contentLanguages" ng-change="updateLanguage(contentLanguage)"></select>

</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
<!-- FE TESTING <button class="run-tests" ng-show="showTests && hasTests" ng-click="runTests()">TEST</button> -->
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([[getComplexityMarkup()]])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-explanation" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span>()</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak>[[getHeadingText()]]</h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[[section]]" hide-heading="[[hideHeading]]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    


    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:2385549,&quot;username&quot;:&quot;gokumd&quot;,&quot;email&quot;:&quot;gokumd@gmail.com&quot;,&quot;date_joined&quot;:&quot;2016-01-02T20:29:37.549407+00:00&quot;,&quot;first_name&quot;:&quot;Goku&quot;,&quot;last_name&quot;:&quot;Mohandas&quot;,&quot;full_name&quot;:&quot;Goku Mohandas&quot;,&quot;short_name&quot;:&quot;Goku&quot;,&quot;is_anonymous&quot;:false,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:66,&quot;num_questions_done&quot;:29,&quot;num_questions_remaining&quot;:15,&quot;recruiting_is_interested_in_intros&quot;:true,&quot;is_full_access&quot;:true,&quot;first_payment_date&quot;:&quot;2016-01-02T22:17:39.210063Z&quot;,&quot;last_payment_date&quot;:&quot;2016-01-02T22:17:37Z&quot;,&quot;num_free_questions_left&quot;:0,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;python&quot;,&quot;preferred_notepad_language&quot;:&quot;python&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;Google&quot;,&quot;num_auth_providers&quot;:1,&quot;auth_email&quot;:&quot;gokumd@gmail.com&quot;}">
        {"id":2385549,"username":"gokumd","email":"gokumd@gmail.com","date_joined":"2016-01-02T20:29:37.549407+00:00","first_name":"Goku","last_name":"Mohandas","full_name":"Goku Mohandas","short_name":"Goku","is_anonymous":false,"is_on_last_question":false,"percent_done":66,"num_questions_done":29,"num_questions_remaining":15,"recruiting_is_interested_in_intros":true,"is_full_access":true,"first_payment_date":"2016-01-02T22:17:39.210063Z","last_payment_date":"2016-01-02T22:17:37Z","num_free_questions_left":0,"terms_has_agreed_to_latest":false,"preferred_content_language":"python","preferred_notepad_language":"python","is_staff":false,"auth_providers_human_readable_list":"Google","num_auth_providers":1,"auth_email":"gokumd@gmail.com"}
    </div>

    

    <!-- Login Modal -->
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal ng-scope" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 ng-bind="note" class="ng-binding">Log in to continue</h3>
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <div class="login-btns">
    <a ng-href="/auth/login/github/?next=%2Fnext" class="btn btn-soc-github" href="https://www.interviewcake.com/auth/login/github/?next=%2Fnext"><i class="fa fa-github"></i> | Log in with Github</a>
    <a ng-href="/auth/login/google-oauth2/?next=%2Fnext" class="btn btn-soc-google-plus" href="https://www.interviewcake.com/auth/login/google-oauth2/?next=%2Fnext"><i class="fa my-fa-google-plus"></i> | Log in with Google</a>
    <a ng-href="/auth/login/facebook/?next=%2Fnext" class="btn btn-soc-facebook" href="https://www.interviewcake.com/auth/login/facebook/?next=%2Fnext"><i class="fa my-fa-facebook"></i> | Log in with Facebook</a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                </div>
            </div>
        </div>
    </div>


    

    <input type="hidden" name="csrfmiddlewaretoken" value="HlkwYFDSoCT23Fw7iEZ1rh3DrCNPJk9peUJSgKOMUbbJSKIdG9ekY0rlMr3iXynE">
<div id="loading">
. . .
</div>


<link href="./36.Single Riffle Shuffle _ Interview Cake_files/css(1)" rel="stylesheet" type="text/css">

<iframe name="stripeXDM_default886240_provider" id="stripeXDM_default886240_provider" src="./36.Single Riffle Shuffle _ Interview Cake_files/channel.html" frameborder="0" style="position: absolute; top: -2000px; left: 0px;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./36.Single Riffle Shuffle _ Interview Cake_files/saved_resource(1).html"></iframe><span style="display: none;"><iframe style="display: none !important;" id="_olark_framesocket33425" src="./36.Single Riffle Shuffle _ Interview Cake_files/storage.html"></iframe></span><div><div id="olark-wrapper" class="" data-reactid=".0"><style rel="stylesheet" type="text/css" data-reactid=".0.0">#olark-wrapper .olark-launch-button {
  background-color: #59a8c4 !important;
}
#olark-wrapper .olark-launch-button svg path {
  fill: #ffffff !important;
}
#olark-wrapper .olark-launch-button .olark-button-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
  border-color: #469dbe !important;
}
#olark-wrapper .olark-top-bar-text {
  color: #ffffff !important;
}
#olark-wrapper .olark-top-bar-arrow {
  fill: #ffffff !important;
}
#olark-wrapper #olark-container .olark-visitor-message {
  background-color: rgba(89, 168, 196, 0.25) !important;
  border: none !important;
}
#olark-wrapper #olark-container .olark-form-send-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-feedback-form-button {
  background-color: #59a8c4 !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-cancel-button {
  background-color: #59a8c4 !important;
  border: none !important;
  color: #ffffff !important;
}
#olark-wrapper #olark-container .olark-branding-panel .olark-branding-go-button {
  border: none !important;
  background: rgba(89, 168, 196, 0.35) !important;
}
#olark-wrapper .olark-end-chat-flag {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-confirmation-icon .olark-launch-button-icon {
  fill: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-input:focus {
  border-color: #59a8c4 !important;
}
#olark-wrapper #olark-container .olark-form-message-input:focus {
  border-color: #59a8c4 !important;
}
</style><button class="olark-launch-button" data-reactid=".0.2"><svg x="0px" y="0px" viewBox="0 0 28 18" data-reactid=".0.2.0"><path fill="#ffffff" d="M28,3.2C28,1.5,26.5,0,24.8,0H3.2C1.5,0,0,1.5,0,3.2v11.5C0,16.5,1.5,18,3.2,18h21.5c1.8,0,3.2-1.5,3.2-3.2 V3.2z M24.7,14.8c-0.2,0.1-0.4,0.2-0.6,0.2c-0.2,0-0.4-0.1-0.6-0.3l-5-5.3l-3.6,3c-0.3,0.2-0.6,0.3-0.9,0.3s-0.7-0.1-0.9-0.4l-3.6-3 l-5,5.3c-0.2,0.2-0.4,0.3-0.6,0.3c-0.2,0-0.4-0.1-0.6-0.2c-0.3-0.3-0.4-0.8,0-1.2l4.9-5.3L3.3,4.5C3,4.2,2.9,3.6,3.2,3.3 C3.5,2.9,4,2.9,4.4,3.2l9.6,7.9l9.6-7.9c0.4-0.3,0.9-0.2,1.2,0.1c0.3,0.4,0.2,0.9-0.1,1.2l-4.8,3.9l4.9,5.3 C25.1,14,25,14.5,24.7,14.8z" data-reactid=".0.2.0.0"></path></svg><div class="olark-notification-badge olark-hidden" data-reactid=".0.2.1"><div class="olark-notification-badge-text" data-reactid=".0.2.1.0">0</div></div></button><div id="olark-container" class="olark-hidden" data-reactid=".0.3"><div class="olark-top-bar" data-reactid=".0.3.0"><div class="olark-top-bar-text" data-reactid=".0.3.0.0">Send me a message!</div><div class="olark-top-bar-button" data-reactid=".0.3.0.1"><svg viewBox="0 0 15.1 8.9" fill="#ffffff" data-reactid=".0.3.0.1.0"><polygon class="olark-top-bar-arrow" points="0.2,1.4 7.6,8.9 15.1,1.4 13.7,0 7.6,6 1.6,0" data-reactid=".0.3.0.1.0.0"></polygon></svg></div></div><div class="olark-conversation-container olark-form-conversation-container olark-no-message-form" data-reactid=".0.3.1"><div class="olark-form-message" data-reactid=".0.3.1.0">Parker from Interview Cake here. You can reach my email inbox through this handy form!</div><div class="olark-form-container" data-reactid=".0.3.1.1"><form class="olark-form" novalidate="" data-reactid=".0.3.1.1.0"><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$fname"><input type="text" name="fname" class="olark-form-input-filled olark-form-input" id="olark-form-input-fname" tabindex="1" autocomplete="on" value="Goku Mohandas" required="" data-reactid=".0.3.1.1.0.0:$fname.0"><label class="olark-float-label" for="olark-form-input-fname" data-reactid=".0.3.1.1.0.0:$fname.1">click here and type your Name</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$fname.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$fname.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$fname.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$email"><input type="email" name="email" class="olark-form-input-filled olark-form-input" id="olark-form-input-email" tabindex="2" autocomplete="on" value="gokumd@gmail.com" required="" data-reactid=".0.3.1.1.0.0:$email.0"><label class="olark-float-label" for="olark-form-input-email" data-reactid=".0.3.1.1.0.0:$email.1">click here and type your Email</label><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$email.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$email.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$email.2.0.0"></path></svg></span></div><div class="olark-form-input-container" data-reactid=".0.3.1.1.0.0:$body"><div data-reactid=".0.3.1.1.0.0:$body.0"><div class="olark-form-message-input olark-clone-textarea" data-reactid=".0.3.1.1.0.0:$body.0.0" style="width: 330px !important; overflow-wrap: break-word;">Type a message...</div><textarea class="olark-form-message-input" tabindex="3" name="body" id="olark-form-input-body" placeholder="Type a message..." title="Type a message..." required="" data-reactid=".0.3.1.1.0.0:$body.0.1"></textarea></div><span class="olark-required-asterisk" data-reactid=".0.3.1.1.0.0:$body.2"><svg viewBox="0 0 20 20" x="0" y="0" fill="currentcolor" data-reactid=".0.3.1.1.0.0:$body.2.0"><path d="M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10s10-4.5,10-10C20,4.5,15.5,0,10,0z M13.8,13.6L12,15l-2-3L8,15l-1.8-1.4l2-2.8 L5,9.6l0.8-2.2L9,8.6L8.8,5h2.4L11,8.6l3.2-1.3L15,9.6l-3.2,1.1L13.8,13.6z" data-reactid=".0.3.1.1.0.0:$body.2.0.0"></path></svg></span></div><button class="olark-form-send-button" type="submit" data-reactid=".0.3.1.1.0.2">Send</button></form></div></div></div></div></div></body></html>